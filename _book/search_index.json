[
["index.html", "Statistika Lingkungan Menggunakan R Pengantar", " Statistika Lingkungan Menggunakan R Moh. Rosidi 2019-03-29 Pengantar Buku ini menyajikan penerapan program R dalam Statistika Lingkungan. Buku ini akan disajikan secara ringkas menggunakan sejumlah contoh kasus yang relevan dalam bidang lingkungan. Penulis berharap buku ini dapat menjadi referensi sumber terbuka bagi mahasiswa yang ingin menggunakan R untuk kegiatan analisa data. Sehingga dapat mengurangi ketergantungan pada penggunaan aplikasi yang berlisensi. "],
["mengenal-bahasa-r.html", "Chapter 1 Mengenal Bahasa R 1.1 Sejarah R 1.2 Fitur dan Karakteristik R 1.3 Kelebihan dan Kekurangan R 1.4 RStudio 1.5 Menginstall R dan RStudio 1.6 Working Directory 1.7 Fasilitas Help 1.8 Referensi", " Chapter 1 Mengenal Bahasa R Dewasa ini tersedia banyak sekali software yang dapat digunakan untuk membantu kita dalam melakukan analisa data. software yang digunakan dapat berupa software berbayar atau gratis. R merupakan merupakan salah satu software gratis yang sangat populer di Indonesia. Kemudahan penggunaan serta banyaknya besarnya dukungan komunitas membuat R menjadi salah satu bahasa pemrograman paling populer di dunia. Paket yang disediakan untuk analisis statistika juga sangat lengkap dan terus bertambah setiap saat. Hal ini membuat R banyak digunakan oleh para analis data. Pada chapter ini penulis akan memperkenalkan kepada pembaca mengenai bahasa pemrograman R. Mulai dari sejarah, cara instalasi sampai dengan bagaimana kita memanfaatkan fitur dasar bantuan untuk menggali lebih jauh tentang fungsi-fungsi R. 1.1 Sejarah R R Merupakan bahasa yang digunakan dalam komputasi statistik yang pertama kali dikembangkan oleh Ross Ihaka dan Robert Gentlement di University of Auckland New Zealand yang merupakan akronim dari nama depan kedua pembuatnya. Sebelum R dikenal ada S yang dikembangkan oleh John Chambers dan rekan-rekan dari Bell Laboratories yang memiliki fungsi yang sama untuk komputasi statistik. Hal yang membedakan antara keduanya adalah R merupakan sistem komputasi yang bersifat gratis.Logo R dapat dilihat pada Gambar 1.1. Gambar 1.1: Logo R. R dapat dibilang merupakan aplikasi sistem statistik yang kaya. Hal ini disebabkan banyak sekali paket yang dikembangkan oleh pengembang dan komunitas untuk keperluan analisa statistik seperti linear regression, clustering, statistical test, dll. Selain itu, R juga dapat ditambahkan paket-paket lain yang dapat meningkatkan fiturnya. Sebagai sebuah bahasa pemrograman yang banyak digunakan untuk keperluan analisa data, R dapat dioperasikan pada berbagai sistem operasi pada komputer. Adapun sistem operasi yang didukung antara lain: UNIX, Linux, Windows, dan MacOS. 1.2 Fitur dan Karakteristik R R memiliki karakteristik yang berbeda dengan bahasa pemrograman lain seperti C++,python, dll. R memiliki aturan/sintaks yang berbeda dengan bahasa pemrograman yang lain yang membuatnya memiliki ciri khas tersendiri dibanding bahasa pemrograman yang lain. Beberapa ciri dan fitur pada R antara lain: Bahasa R bersifat case sensitif. maksudnya adalah dalam proses input R huruf besar dan kecil sangat diperhatikan. Sebagai contoh kita ingin melihat apakah objek A dan B pada sintaks berikut: A &lt;- &quot;Andi&quot; B &lt;- &quot;andi&quot; # cek kedua objek A dan B A == B ## [1] FALSE # Kesimpulan : Kedua objek berbeda Segala sesuatu yang ada pada program R akan diangap sebagai objek. konsep objek ini sama dengan bahasa pemrograma berbasis objek yang lain seperti Java, C++, python, dll.Perbedaannya adalah bahasa R relatif lebih sederhana dibandingkan bahasa pemrograman berbasis obejk yang lain. interpreted language atau script. Bahasa R memungkinkan pengguna untuk melakukan kerja pada R tanpa perlu kompilasi kode program menjadi bahasa mesin. Mendukung proses loop, decision making, dan menyediakan berbagai jenis operstor (aritmatika, logika, dll). Mendukung export dan import berbagai format file, seperti:TXT, CSV, XLS, dll. Mudah ditingkatkan melalui penambahan fungsi atau paket. Penambahan paket dapat dilakukan secara online melalui CRAN atau melalui sumber seperti github. Menyedikan berbagai fungsi untuk keperluan visualisasi data. Visualisasi data pada R dapat menggunakan paket bawaan atau paket lain seperti ggplo2,ggvis, dll. 1.3 Kelebihan dan Kekurangan R Selain karena R dapat digunakan secara gratis terdapat kelebihan lain yang ditawarkan, antara lain: Protability. Penggunaan software dapat digunakan kapanpun tanpa terikat oleh masa berakhirnya lisensi. Multiplatform. R bersifat Multiplatform Operating Systems, dimana software R lebih kompatibel dibanding software statistika lainnya. Hal in berdampak pada kemudahan dalam penyesuaian jika pengguna harus berpindah sistem operasi karena R baik pada sistem operasi seperti windows akan sama pengoperasiannya dengan yang ada di Linux (paket yang digunakan sama). General dan Cutting-edge. Berbagai metode statistik baik metode klasik maupun baru telah diprogram kedalam R. Dengan demikian software ini dapat digunakan untuk analisis statistika dengan pendekatan klasik dan pendekatan modern. Programable. Pengguna dapat memprogram metode baru atau mengembangakan modifikasi dari analisis statistika yang telah ada pada sistem R. Berbasis analisis matriks. Bahasa R sangat baik digunakan untuk programming dengan basis matriks. Fasiltas grafik yang lengkap. Adapun kekurangan dari R antara lain: Point and Click GUI. Interaksi utama dengan R bersifat CLI (Command Line Interface), walaupun saat ini telah dikembangkan paket yang memungkinkan kita berinteraksi dengan R menggunakan GUI (Graphical User Interface) sederhana menggunakan paket R-Commander yang memiliki fungsi yang terbatas. R- Commander sendiri merupakan GUI yang diciptakan dengan tujuan untuk keperluan pengajaran sehingga analisis statistik yang disediakan adalah yang klasik. Meskipun terbatas paket ini berguna jika kita membutuhkan analisis statistik sederhana dengan cara yang simpel. Missing statistical function. Meskipun analisis statistika dalam R sudah cukup lengkap, namun tidak semua metode statistika telah diimplementasikan ke dalam R. Namun karena R merupakan lingua franca untuk keperluan komputasi statistika modern staan ini, dapat dikatakan ketersediaan fungsi tambahan dalam bentuk paket hanya masalah waktu saja. 1.4 RStudio Aplikasi R pada dasarnya berbasis teks atau command line sehingga pengguna harus mengetikkan perintah-perintah tertentu dan harus hapal perintah-perintahnya. Setidaknya jika kita ingin melakukan kegiatan analisa data menggunakan R kita harus selalu siap dengan perintah-perintah yang hendak digunakan sehingga buku manual menjadi sesuatu yang wajib adasaat berkeja dengan R. Kondisi ini sering kali membingunkan bagi pengguna pemula maupun pengguna mahir yang sudah terbiasa dengan aplikasi statistik lain seperti SAS, SPSS, Minitab, dll. Alasan itulah yang menyebabkan pengembang R membuat berbagai frontend untuk R yang berguna untuk memudahkan dalam pengoperasian R. RStudio merupakan salah satu bentuk frontend R yang cukup populer dan nyaman digunakan. Selain nyaman digunakan, RStudio memungkinkan kita melakukan penulisan laporan menggunakan Rmarkdown atau RNotebook serta membuat berbagai bentuk project seperti shyni, dll. Pada R studio juga memungkinkan kita mengatur working directory tanpa perlu mengetikkan sintaks pada Commander, yang diperlukan hanya memilihnya di menu RStudio. Selain itu, kita juga dapat meng-import file berisikan data tanpa perlu mengetikkan pada Commander dengan cara memilih pada menu Environment. 1.5 Menginstall R dan RStudio Pada tutorial ini hanya akan dijelaskan bagaimana menginstal R dan RStudio pada sistem operasi windows. Sebelum memulai menginstal sebaiknya pembaca mengunduh terlebih dahulu installer R dan RStudio. Jalankan proses pemasangan dengan meng-klik installer aplikasi R dan RStudio. Ikuti langkah proses pemasangan aplikasi yang ditampilkan dengan klik OK atau Next. Apabila pemasangan telah dilakukan, jalankan aplikasi yang telah terpasang untuk menguji jika aplikasi telah berjalan dengan baik. Jendela aplikasi yang telah terpasang ditampilkan pada Gambar 1.2 dan Gambar 1.3. Gambar 1.2: Jendela R. Gambar 1.3: Jendela RStudio. Note: Sebaiknya install R terlebih dahulu sebelum RStudio 1.6 Working Directory Setiap pengguna akan bekerja pada tempat khusus yang disebut sebagai working directory. working directory merupakan sebuah folder dimana R akan membaca dan menyimpan file kerja kita. Pada pengguna windows, working directory secara default pada saat pertama kali menginstall R terletak pada folder c:\\\\Document. 1.6.1 Mengubah Lokasi Working Directory Kita dapat mengubah lokasi working directory berdasarkan lokasi yang kita inginkan, misalnya letak data yang akan kita olah tidak ada pada folder default atau kita ingin pekerjaan kita terkait R dapat berlangsung pada satu folder khusus. Berikut adalah cara mengubah working directory pada R. Buatlah folder pada drive (kita bisa membuat folder pada selain drive c) dan namai dengan nama yang kalian inginkan. Pada tutorial ini penulis menggunakan nama folder R. Jika pengguna menggunakan RStudio, pada menu RStudio pilih Session &gt; Set Working Directory &gt; Chooses Directory. Proses tersebut ditampilkan pada Gambar 1.4 Pilih folder yang telah dibuat pada step 1 sebagai *working directory. Note: Data atau file yang hendak dibaca selama proses kerja pada R harus selalu diletakkan pada working directory. Jika tidak maka data atau file tidak akan terbaca. Untuk mengecek apakah proses perubahan telah terjadi, kita dapat mengeceknya dengan menjalankan perintah berikut untuk melihat lokasi working directory kita yang baru. getwd() Gambar 1.4: Mengubah working directory. Selain itu kita dapat mengubah working directory menggunakan perintah berikut: # Ubah working directori pada folder R setwd(&quot;/Documents/R&quot;) Note: Pada proses pengisian lokasi folder pastikan pemisah pada lokasi folder menggunakan tanda “/” bukan “&quot; 1.6.2 Mengubah Lokasi Working Directory Default Pada proses yang telah penulis jelaskan sebelumnya. Proses perubahan working directory hanya berlaku pada saat pekerjaan tersebut dilakukan. Setelah pekerjaan selesai dan kita menjalankan kembali R maka working directory akan kembali secara default pada working directory lama. Untuk membuat lokasi default working directory pindah, kita dapat melakukannya dengan memilih pada menu: Tools &gt; Global options &gt; pada “General” klik pada “Browse” dan pilih lokasi working directory yang diinginkan. Proses tersebut ditampilkan pada Gambar 1.5 Gambar 1.5: Merubah working directory melalui Global options. 1.7 Fasilitas Help Agar dapat menggunakan R dengan secara lebih baik, pengetahuan untuk mengakses fasilitas help in cukup penting untuk disampaikan. Adapun cara yang dapat digunakan adalah sebagai berikut. 1.7.1 Mencari Help dari Suatu Perintah Tertentu Untuk memperoleh bantuan terkait suatu perintah tertentu kita dapat menggunakan fungsi help(). Secara umum format yang digunakan adalah sebagai berikut: help(nama_perintah) atau dapat juga menggunakan tanda tanya (?) pada awal nama_perintah seperti berikut: ?nama_perintah Misalkan kita kebingungan terkait bagaimana cara menuliskan perintah untuk menghitung rata-rata suatu vektor. Kita dapat mengetikkan perintah berikut untuk mengakses fasilitas help. help(mean) #atau ?mean Perintah tersebut akan memunculkan hasil berupa dokumentasi yang ditampilkan pada Gambar 1.6. Gambar 1.6: Jendela help dokumentasi fungsi mean(). Keterangan pada jendela pada Gambar 1.6 adalah sebagia berikut: Pada bagian jendela kiri atas jendela help, diberikan keterangan nama dari perintah yang sedang ditampilkan. Selanjutnya, pada bagian atas dokumen, ditampilkan infomasi terkait nama perintah, dan nama library yang memuat perintah tersebut. Pada gambar diatas informasi terkait perintah dan nama library ditunjukkan pada teks mean {base} yang menunjukkan perintah mean() pada paket (library) base (paket bawaan R). Setiap jendela help dari suatu perintah tertentu selanjutnya akan memuat bagian-bagian berikut: Title Description : deskripsi singkat tentang perintah. Usage : menampilkan sintaks perintah untuk penggunaan perintah tersebut. Arguments : keterangan mengenai argument/inputyang diperlukan pada perintah tersebut. Details : keterangan lebih lengkap lengkap tentang perintah tersebut. Value : keterangan tentang output suatu perintah dapat diperoleh pada bagian ini. Author(s) : memberikan keterangan tentang Author dari perintah tersebut. References : seringkali referensi yang dapat digunakan untuk memperoleh keterangan lebih lanjut terhadap suatu perintah ditampilkan pada bagian ini. See also: bagian ini berisikan daftar perintah/fungsi yang berhubungan erat dengan perintah tersebut. Example : berisikan contoh-contoh penggunaan perintah tersebut. Kita juga dapat melihat contoh penggunaan dari perintah tersebut. Untuk melakukannya kita dapat menggunakan fungsi example(). Fungsi tersebut akan menampilkan contoh kode penerapan dari fungsi yang kita inginkan. Secara sederhana fungsi tersebut dapat dituliskan sebagai berikut: example(nama_perintah) Untuk mengetahui contoh kode fungsi mean(), ketikkan sintaks berikut: example(mean) ## ## mean&gt; x &lt;- c(0:10, 50) ## ## mean&gt; xm &lt;- mean(x) ## ## mean&gt; c(xm, mean(x, trim = 0.10)) ## [1] 8.75 5.50 kita juga dapat mencoba kode yang dihasilkan pada console R. Berikut adalah contoh penerapannya: # Menghitung rata-rata bilangan 1 sampai 10 dan 50 # membuat vektor x &lt;- c(0:10, 50) # Print x ## [1] 0 1 2 3 4 5 6 7 8 9 10 50 # mean mean(x) ## [1] 8.75 Pembaca dapat mencoba melakukanya sendiri dengan mengganti nilai yang telah ada serta mencoba contoh kode yang lain. 1.7.2 General Help Kita juga dapat membaca beberapa dokumen manual yang ada pada R. Untuk melakukannya jalankan perintah berikut: help.start() Output yang dihasilkan berupa link pada sejumlah dokumen yang dapat kita klik. Tampilan halaman yang dihasilkan disajikan pada Gambar 1.7. Gambar 1.7: Jendela general help dokumentasi fungsi mean(). 1.7.3 Fasilitas Help Lainnya Selain yang telah penulis sebutkan sebelumnya. Kita juga dapat memanfaatkan fasilitas help lainnya melalui fungsi apropos() dan help.search(). apropos (): mengembalikan daftar objek, berisi pola yang pembaca cari, dengan pencocokan sebagian. Ini berguna ketika pembaca tidak ingat persis nama fungsi yang akan digunakan. Berikut adalah contoh ketika penulis ingin mengetahui fungsi yang digunakan untuk menghitung median. apropos(&quot;med&quot;) ## [1] &quot;elNamed&quot; &quot;elNamed&lt;-&quot; &quot;median&quot; ## [4] &quot;median.default&quot; &quot;medpolish&quot; &quot;runmed&quot; List yang dihasilkan berupa fungsi-fungsi yang memiliki elemen kata “med”. Berdasarkan pencaria tersebut penulis dapat mencoba menggunakan fungsi “median” untuk menghitung median. help.search () (sebagai alternatif ??): mencari dokumentasi yang cocok dengan karakter yang diberikan dengan cara yang berbeda. Ini mengembalikan daftar fungsi yang mengandung istilah yang pembaca cari dengan deskripsi singkat dari fungsi. Berikut adalah contoh penerapan dari fungsi tersebut: help.search(&quot;mean&quot;) # atau ??mean Output yang dihasilkan akan tampak seperti pada Gambar 1.8. Gambar 1.8: Jendela help search dokumentasi fungsi mean(). 1.8 Referensi Primartha, R. 2018. Belajar Machine Learning Teori dan Praktik. Penerbit Informatika : Bandung Rosadi,D. 2016. Analisis Statistika dengan R. Gadjah Mada University Press: Yogyakarta STHDA. Running RStudio and Setting Up Your Working Directory - Easy R Programming .http://www.sthda.com/english/wiki/running-rstudio-and-setting-up-your-working-directory-easy-r-programming#set-your-working-directory STDHA. Getting Help With Functions In R Programming. http://www.sthda.com/english/wiki/getting-help-with-functions-in-r-programming . Venables, W.N. Smith D.M. and R Core Team. 2018. An Introduction to R. R Manuals. "],
["sintaks-bahasa-r.html", "Chapter 2 Sintaks Bahasa R 2.1 Operator Aritmatika 2.2 Fungsi Aritmetik 2.3 Operator Relasi 2.4 Operator Logika 2.5 Memasukkan Nilai Kedalam Variabel 2.6 Tipe Data 2.7 Vektor 2.8 Matriks 2.9 Faktor 2.10 Data Frames 2.11 List 2.12 Loop 2.13 Decision Making 2.14 Fungsi 2.15 Referensi", " Chapter 2 Sintaks Bahasa R Pada chapter ini penulis hendak mengajak pembaca lebih familiar dengan sintaks atau perintah yang ada pada R. Pembaca akan mempelajari penggunaan operator dalam melakukan operasi pengolahan data pada R, jenis data yang ada pada R, sampai dengan bagaimana kita melakukan proses decision making menggunakan R. 2.1 Operator Aritmatika Proses perhitungan akan ditangani oleh fungsi khusus. R akan memahami urutannya secara benar. Kecuali kita secara eksplisit menetapkan yang lain. Sebagai contoh jalankan sintaks berikut: 2+4*2 ## [1] 10 Bandingkan dengan sintaks berikut: (2+4)*2 ## [1] 12 R dapat digunakan sebagai kalkulator Berdasarkan kedua hasil tersebut dapat disimpulkan bahwa ketika kita tidak menetapkan urutan perhitungan menggunakan tanda kurung, R akan secara otomatis akan menghitung terlebih dahulu perkalian atau pembangian. Operator aritmatika yang disediakan R disajikan pada Tabel 2.1: Tabel 2.1: Operator Aritmatika R. Simbol Keterangan + Addition, untuk operasi penjumlahan - Substraction, untuk operasi pengurangan * Multiplication, untuk operasi pembagian / Division, untuk operasi pembagian ^ Eksponentiation, untuk operasi pemangkatan %% Modulus, Untuk mencari sisa pembagian %/% Integer, Untuk mencari bilangan bulat hasil pembagian saja dan tanpa sisa pembagian Untuk lebih memahaminya berikut contoh sintaks penerapan operator tersebut. # Addition 5+3 ## [1] 8 # Substraction 5-3 ## [1] 2 # Multiplication 5*3 ## [1] 15 # Division 5/3 ## [1] 1.667 # Eksponetiation 5^3 ## [1] 125 # Modulus 5%%3 ## [1] 2 # Integer 5%/%3 ## [1] 1 Note: Pada R tanda # berfungsi menambahkan keterangan untuk menjelaskan sebuah sintaks pada R. 2.2 Fungsi Aritmetik Selain fungsi operator aritmetik, pada R juga telah tersedia fungsi aritmetik yang lain seperti logaritmik, ekponensial, trigonometri, dll. Logaritma dan eksponensial Untuk contoh fungsi logaritmik dan eksponensial jalankan sintaks berikut: log2(8) # logaritma basis 2 untuk 8 ## [1] 3 log10(8) # logaritma basis 10 untuk 8 ## [1] 0.9031 exp(8) # eksponensial 8 ## [1] 2981 Fungsi trigonometri fungsi trigonometri yang ditampilkan seperti sin,cos, tan, dll. cos(x) # cos x sin(x) # Sin x tan(x) # Tan x acos(x) # arc-cos x asin(x) # arc-sin x atan(x) #arc-tan x Note: x dalam fungsi trigonometri memiliki satuan radian Berikut adalah salah satu contoh penggunaannya: cos(pi) ## [1] -1 Fungsi matematik lainnya Fungsi lainnya yang dapat digunakan adalah fungsi absolut, akar kuadrat, dll. Berikut adalah contoh sintaks penggunaan fungsi absolut dan akar kuadrat. abs(-2) # nilai absolut -2 ## [1] 2 sqrt(4) # akar kuadrat 4 ## [1] 2 2.3 Operator Relasi Operator relasi digunakan untuk membandingkan satu objek dengan objek lainnya. Operator yang disediakan R disajikan pada Tabel 2.2. Tabel 2.2: Operator Relasi R. Simbol Keterangan “&gt;” Lebih besar dari “&lt;” Lebih Kecil dari “==” Sama dengan “&gt;=” Lebih besar sama dengan “&lt;=” Lebih kecil sama dengan “!=” Tidak sama dengan Berikut adalah penerapan operator pada tabel tersebut: x &lt;- 34 y &lt;- 35 # Operator &gt; x &gt; y ## [1] FALSE # Operator &lt; x &lt; y ## [1] TRUE # operator == x == y ## [1] FALSE # Operator &gt;= x &gt;= y ## [1] FALSE # Operator &lt;= x &lt;= y ## [1] TRUE # Operator != x != y ## [1] TRUE 2.4 Operator Logika Operator logika hanya berlaku pada vektor dengan tipe logical, numeric, atau complex. Semua angka bernilai 1 akan dianggap bernilai logika TRUE. Operator logika yang disediakan R dapat dilihat pada Tabel 2.3. Tabel 2.3: Operator logika R. Simbol Keterangan &amp;&amp; Operator logika AND ! Opeartor logika NOT &amp; Operator logika AND element wise Operator logika OR element wise Penerapannya terdapat pada sintaks berikut: v &lt;- c(TRUE,TRUE, FALSE) t &lt;- c(FALSE,FALSE,FALSE) # Operator &amp;&amp; print(v&amp;&amp;t) ## [1] FALSE # Operator || print(v||t) ## [1] TRUE # Operator ! print(!v) ## [1] FALSE FALSE TRUE # operator &amp; print(v&amp;t) ## [1] FALSE FALSE FALSE # Operator | print(v|t) ## [1] TRUE TRUE FALSE Note: operator &amp; dan | akan mengecek logika tiap elemen pada vektor secara berpesangan (sesuai urutan dari kiri ke kanan). Operator %% dan || hanya mengecek dari kiri ke kanan pada observasi pertama. Misal saat menggunakan &amp;&amp; jika observasi pertama TRUE maka observasi pertama pada vektor lainnya akan dicek, namun jika observasi pertama FALSE maka proses akan segera dihentikan dan menghasilkan FALSE. 2.5 Memasukkan Nilai Kedalam Variabel Variabel pada R dapat digunakan untuk menyimpan nilai. Sebagai contoh jalankan sintaks berikut: # Harga sebuah lemon adalah 500 rupiah lemon &lt;- 500 # Atau 500 -&gt; lemon # dapat juga menggunakan tanda &quot;=&quot; lemon = 500 Note: R memungkinkan penggunaan &lt;-,-&gt;, atau = sebagai perintah pengisi nilai variabel R bersifat case-sensitive. Maksudnya adalah variabel Lemon tidak sama dengan lemon (Besar kecil huruf berpengaruh) Untuk mengetahui nilai dari objek lemon kita dapat menggunakan fungsi print() atau mengetikkan nama objeknya secara langsung. # Menggunakan fungsi print() print(lemon) ## [1] 500 # Atau lemon ## [1] 500 R akan menyimpan variabel lemon sebagai objek pada memori. Sehingga kita dapat melakukan operasi terhadap objek tersebut seperti mengalikannya atau menjumlahkannya dengan bilangan lain. Sebagai contoh jalankan sintaks berikut: # Operasi perkalian terhadap objek lemon 5*lemon ## [1] 2500 Kita dapat juga mengubah nilai dari objek lemon dengan cara menginput nilai baru terhadap objek yang sama. R secara otomatis akan menggatikan nilai sebelumnya. Untuk lebih memahaminya jalankan sintaks berikut: lemon &lt;- 1000 # Print lemon print(lemon) ## [1] 1000 Untuk lebih memahaminya berikut adalah sintaks untuk menghitung volume suatu objek. # Dimensi objek panjang &lt;- 10 lebar &lt;- 5 tinggi &lt;- 5 # Menghitung volume volume &lt;- panjang*lebar*tinggi # Print objek volume print(volume) ## [1] 250 Untuk mengetahui objek apa saja yang telah kita buat sepanjang artikel ini kita dapang menggunakan fungsi ls(). ls() ## [1] &quot;A&quot; &quot;B&quot; &quot;img1_path&quot; &quot;lebar&quot; ## [5] &quot;lemon&quot; &quot;panjang&quot; &quot;t&quot; &quot;tinggi&quot; ## [9] &quot;v&quot; &quot;volume&quot; &quot;x&quot; &quot;xm&quot; ## [13] &quot;y&quot; Kumpulan objek yang telah tersimpan dalam memori disebut sebagai workspace Untuk menghapus objek pada memori kita dapat menggunakan fungsi rm(). Pada sintaks berikut penulis hendak menghapus objek lemon dan volume. # Menghapus objek lemon dan volume rm(lemon, volume) # Tampilkan kembali objek yang tersisa ls() ## [1] &quot;A&quot; &quot;B&quot; &quot;img1_path&quot; &quot;lebar&quot; ## [5] &quot;panjang&quot; &quot;t&quot; &quot;tinggi&quot; &quot;v&quot; ## [9] &quot;x&quot; &quot;xm&quot; &quot;y&quot; Note: Setiap variabel atau objek yang dibuat akan menempati sejumlah memori pada komputer sehingga jika kita bekerja dengan jumlah data yang banyak pastikan kita menghapus seluruh objek pada memori sebelum memulai kerja. 2.6 Tipe Data Data pada R dapat dikelompokan berdasarkan beberapa tipe. Tipe data pada R disajikan pada Tabel 2.4. Tabel 2.4: Tipe Data R. Tipe Data Contoh Keterangan Logical TRUE, FALSE Nilai Boolean Numeric 12.3, 5, 999 Segala jenis angka Integer 23L, 97L, 3L Bilangan integer (bilangan bulat) Complex 2i, 3i, 9i Bilangan kompleks Character ‘a’, “b”, “123” Karakter dan string Raw Identik dengan “hello” Segala jenis data yang disimpan sebagai raw bytes Sintaks berikut adalah contoh dari tipe data pada R. Untuk mengetahui tipa data suatu objek kita dapat menggunakan perintah class() # Logical apel &lt;- TRUE class(apel) ## [1] &quot;logical&quot; # Numeric x &lt;- 2.3 class(x) ## [1] &quot;numeric&quot; # Integer y &lt;- 2L class(y) ## [1] &quot;integer&quot; # Compleks z &lt;- 5+2i class(z) ## [1] &quot;complex&quot; # string w &lt;- &quot;saya&quot; class(w) ## [1] &quot;character&quot; # Raw xy &lt;- charToRaw(&quot;hello world&quot;) class(xy) ## [1] &quot;raw&quot; Keenam jenis data tersebut disebut sebagai tipe data atomik. Hal ini disebabkan karena hanya dapat menangani satu tipe data saja. Misalnya hanya numeric atau hanya integer. Selain menggunakan fungsi class(), kita dapat pula menggunakan fungsi is_numeric(), is.character(), is.logical(), dan sebagainya berdasarkan jenis data apa yang ingin kita cek. Berbeda dengan fungsi class(), ouput yang dihasilkan pada fungsi seperti is_numeric() adalah nilai Boolean sehingga fungsi ini hanya digunakan untuk mengecek apakah jenis data pada objek sama seperti yang kita pikirkan. Sebagai contoh disajikan pada sintaks berikut: data &lt;- 25 # Cek apakah objek berisi data numerik is.numeric(data) ## [1] TRUE # Cek apakah objek adalah karakter is.character(data) ## [1] FALSE Kita juga dapat mengubah jenis data menjadi jenis lainnya seperti integer menjadi numerik atau sebaliknya. Fungsi yang digunakan adalah as.numeric() jika ingin mengubah suatu jenis data menjadi numerik. Fungsi lainnya juga dapat digunakan sesuai dengan kita ingin mengubah jenis data objek menjadi jenis data lainnya. # Integer apel &lt;- 2L # Ubah menjadi numerik as.numeric(apel) ## [1] 2 # Cek is.numeric(apel) ## [1] TRUE # Logical nangka &lt;- TRUE # Ubah logical menjadi numeric as.numeric(nangka) ## [1] 1 # Karakter minum &lt;- &quot;minum&quot; # ubah karakter menjadi numerik as.numeric(minum) ## Warning: NAs introduced by coercion ## [1] NA Note: Konversi karakter menjadi numerik akan menghasilkan output NA (not available). R tidak mengetahui bagaimana cara merubah karakter menjadi bentuk numerik. Berdasarkan Tabel 2, vektor karakter dapat dibuat menggunakan tanda kurung baik double quote (“”) maupun single quote (’’).Jika pada teks yang kita tuliskan mengandung quote maka kita harus menghentikannya menggunakan tanda ( ). Sbegai contoh kita ingin menuliskan `My friend’s name is “Adi”, pada sintaks akan dituliskan: &#39;My friend\\`s name is &quot;Adi&quot;&#39; ## [1] &quot;My friend`s name is \\&quot;Adi\\&quot;&quot; # Atau &quot;My friend&#39;s name \\&quot;Adi\\&quot;&quot; ## [1] &quot;My friend&#39;s name \\&quot;Adi\\&quot;&quot; 2.7 Vektor Vektor merupakan kombinasi berbagai nilai (numerik, karakter, logical, dan sebagainya berdasarkan jenis input data) pada objek yang sma. Pada contoh kasus berikut, pembaca akan memiliki sesuai jenis data input yaituvektor numerik, vector karakter, vektor logical, dll. 2.7.1 Membuat vektor Vektor dibuat dengan menggunakan fungsi c()(concatenate) seperti yang disajikan pada sintaks berikut: # membuat vektor numerik x &lt;- c(3,3.5,4,7) x # print vektor ## [1] 3.0 3.5 4.0 7.0 # membuat vektor karakter y &lt;- c(&quot;Apel&quot;, &quot;Jeruk&quot;, &quot;Rambutan&quot;, &quot;Salak&quot;) y # print vektor ## [1] &quot;Apel&quot; &quot;Jeruk&quot; &quot;Rambutan&quot; &quot;Salak&quot; # membuat vektor logical t &lt;- c(&quot;TRUE&quot;, &quot;FALSE&quot;, &quot;TRUE&quot;) t # print vektor ## [1] &quot;TRUE&quot; &quot;FALSE&quot; &quot;TRUE&quot; selain menginput nilai pada vektor, kita juga dapat memberi nama nilai setiap vektor menggunakan fungsi names(). # Membuat vektor jumlah buah yang dibeli Jumlah &lt;- c(5,5,6,7) names(Jumlah) &lt;- c(&quot;Apel&quot;, &quot;Jeruk&quot;, &quot;Rambutan&quot;, &quot;Salak&quot;) # Atau Jumlah &lt;- c(Apel=5, Jeruk=5, Rambutan=6, Salak=7) # Print Jumlah ## Apel Jeruk Rambutan Salak ## 5 5 6 7 Note: Vektor hanya dapat memuat satu buah jenis data. Vektor hanya dapat mengandung jenis data numerik saja, karakter saja, dll. Untuk menentukan panjang sebuah vektor kita dapat menggunakan fungsi lenght(). length(Jumlah) ## [1] 4 2.7.2 Missing Values Seringkali nilai pada vektor kita tidak lengkap atau terdapat nilai yang hilang (missing value) pada vektor. Missing value pada R dilambangkan oleh NA(not available). Berikut adalah contoh vektor dengan missing value. Jumlah &lt;- c(Apel=5, Jeruk=NA, Rambutan=6, Salak=7) Untuk mengecek apakah dalam objek terdapat missing value dapat menggunakan fungsi is.na(). ouput dari fungsi tersebut adalah nilai Boolean. Jika terdapat Missing value, maka output yang dihasilkan akan memberikan nilai TRUE. is.na(Jumlah) ## Apel Jeruk Rambutan Salak ## FALSE TRUE FALSE FALSE Note: Selain NA terdapat NaN (not a number) sebagai missing value8. Nilai tersebut muncul ketika fungsi matematika yang digunakan pada proses perhitungan tidak bekerja sebagaimana mestinya. Contoh: 0/0 = NaN is.na() juga akan menghasilkan nilai TRUE pada NaN. Untuk membedakannya dengan NA dapat digunakan fungsi is.nan(). 2.7.3 Subset Pada Vektor Subseting vector terdiri atas tiga jenis, yaitu: positive indexing, Negative Indexing, dan . Positive indexing: memilih elemen vektor berdasarkan posisinya (indeks) dalam kurung siku. # Subset vektor pada urutan kedua Jumlah[2] ## Jeruk ## NA # Subset vektor pada urutan 2 dan 4 Jumlah[c(2, 4)] ## Jeruk Salak ## NA 7 Selain melalui urutan (indeks), kita juga dapat melakukan subset berdasarkan nama elemen vektornya. Jumlah[&quot;Jeruk&quot;] ## Jeruk ## NA Note: Indeks pada R dimulai dari 1. Sehingga kolom atau elemen pertama vektor dimulai dari [1] Negative indexing: mengecualikan (exclude) elemen vektor. # mengecualikan elemen vektor 2 dan 4 Jumlah[-c(2,4)] ## Apel Rambutan ## 5 6 # mengecualikan elemen vektor 1 sampai 3 Jumlah[-c(1:3)] ## Salak ## 7 Subset berdasarkan vektor logical: Hanya, elemen-elemen yang nilai yang bersesuaian dalam vektor pemilihan bernilai TRUE, akan disimpan dalam subset. Note: panjang vektor yang digunakan untuk subset harus sama. Jumlah &lt;- c(Apel=5, Jeruk=NA, Rambutan=6, Salak=7) # selecting vector merah &lt;- c(TRUE, FALSE, TRUE, FALSE) # Subset Jumlah[merah==TRUE] ## Apel Rambutan ## 5 6 # Subset untuk elemen vektor bukan missing value Jumlah[!is.na(Jumlah)] ## Apel Rambutan Salak ## 5 6 7 2.7.4 Perhitungan Menggunakan Vektor Jika pembaca melakukan operasi dengan vektor, operasi akan diterapkan ke setiap elemen vektor. Contoh disediakan pada sintaks di bawah ini: pendapatan &lt;- c(2000, 1800, 2500, 3000) names(pendapatan) &lt;- c(&quot;Andi&quot;, &quot;Joni&quot;, &quot;Lina&quot;, &quot;Rani&quot;) pendapatan ## Andi Joni Lina Rani ## 2000 1800 2500 3000 # Kalikan pendapatan dengan 3 pendapatan*3 ## Andi Joni Lina Rani ## 6000 5400 7500 9000 Seperti yang dapat dilihat, R mengalikan setiap elemen dengan bilangan pengali. Kita juga dapat mengalikan vektor dengan vektor lainnya.Contohnya disajikan pada sintaks berikut: # membuat vektor dengan panjang sama dengan dengan vektor pendapatan coefs &lt;- c(2, 1.5, 1, 3) # Mengalikan pendapatan dengan vektor coefs pendapatan*coefs ## Andi Joni Lina Rani ## 4000 2700 2500 9000 Berdasarkan sintaks tersebut dapat terlihat bahwa operasi matematik terhadap masing-masing vektor dapat berlangsung jika panjang vektornya sama. Berikut adalah fungsi lain yang dapat digunakan pada operasi matematika vektor. max(x) # memperoleh nilai maksimum x min(x) # memperoleh nilai minimum x range(x) # memperoleh range vektor x length(x) # memperoleh jumlah elemen vektor x sum(x) # memperoleh total penjumlahan elemen vektor x prod(x) # memeperoleh produk elemen vektor x mean(x) # memperoleh nilai rata-rata seluruh elemen vektor x sd(x) # standar deviasi vektor x var(x) # varian vektor x sort(x) # mengurutkan elemen vektor x dari yang terbesar Contoh penggunaan fungsi tersebut disajikan beberapa pada sintaks berikut: # Menghitung range pendapatan range(pendapatan) ## [1] 1800 3000 # menghitung rata-rata dan standar deviasi pendapatan mean(pendapatan) ## [1] 2325 sd(pendapatan) ## [1] 537.7 2.8 Matriks Matriks seperti Excel sheet yang berisi banyak baris dan kolom (kumpulan bebrapa vektor). Matriks digunakan untuk menggabungkan vektor dengan tipe yang sama, yang bisa berupa numerik, karakter, atau logis. Matriks digunakan untuk menyimpan tabel data dalam R. Baris-baris matriks pada umumnya adalah individu / pengamatan dan kolom adalah variabel. 2.8.1 Membuat matriks Untuk membuat matriks kita dapat menggunakan fungsi cbind() atau rbind(). Berikut adalah contoh sintaks untuk membuat matriks. # membuat vektor numerik col1 &lt;- c(5, 6, 7, 8, 9) col2 &lt;- c(2, 4, 5, 9, 8) col3 &lt;- c(7, 3, 4, 8, 7) # menggabungkan vektor berdasarkan kolom my_data &lt;- cbind(col1, col2, col3) my_data ## col1 col2 col3 ## [1,] 5 2 7 ## [2,] 6 4 3 ## [3,] 7 5 4 ## [4,] 8 9 8 ## [5,] 9 8 7 # Mengubah atau menambahkan nama baris rownames(my_data) &lt;- c(&quot;row1&quot;, &quot;row2&quot;, &quot;row3&quot;, &quot;row4&quot;, &quot;row5&quot;) my_data ## col1 col2 col3 ## row1 5 2 7 ## row2 6 4 3 ## row3 7 5 4 ## row4 8 9 8 ## row5 9 8 7 Note: cbind(): menggabungkan objek R berdasarkan kolom rbind(): menggabungkan objek R berdasarkan baris rownames(): mengambil atau menetapkan nama-nama baris dari objek seperti-matriks colnames(): mengambil atau menetapkan nama-nama kolom dari objek seperti-matriks Kita dapat melakukan tranpose (merotasi matriks sehingga kolom menjadi baris dan sebaliknya) menggunakan fungsi t(). Berikut adalah contoh penerapannya: t(my_data) ## row1 row2 row3 row4 row5 ## col1 5 6 7 8 9 ## col2 2 4 5 9 8 ## col3 7 3 4 8 7 Selain melalui pembentukan sejumlah objek vektor, kita juga dapat membuat matriks menggunakan fungsi matrix(). Secara sederhana fungsi tersebut dapat dituliskan sebagai berikut: matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL) Note: data: vektor data opsional nrow, ncol: jumlah baris dan kolom yang diinginkan, masing-masing. byrow: nilai logis. Jika FALSE (default) matriks diisi oleh kolom, jika tidak, matriks diisi oleh baris. dimnames: Daftar dua vektor yang memberikan nama baris dan kolom masing-masing. Dalam kode R di bawah ini, data input memiliki panjang 6. Kita ingin membuat matriks dengan dua kolom. Kita tidak perlu menentukan jumlah baris (di sini nrow = 3). R akan menyimpulkan ini secara otomatis. Matriks diisi kolom demi kolom saat argumen byrow = FALSE. Jika kita ingin mengisi matriks dengan baris, gunakan byrow = TRUE. Berikut adalah contoh pembuatan matriks menggunakan fungsi matrix(). data &lt;- matrix( data = c(1,2,3, 11,12,13), nrow = 2, byrow = TRUE, dimnames = list(c(&quot;row1&quot;, &quot;row2&quot;), c(&quot;C.1&quot;, &quot;C.2&quot;, &quot;C.3&quot;)) ) data ## C.1 C.2 C.3 ## row1 1 2 3 ## row2 11 12 13 Untuk mengetahui dimensi dari suatu matriks, kita dapat menggunakan fungsi ncol() untuk mengetahui jumlah kolom matriks dan nrow() untuk mengetahui jumlah baris pada matriks. Berikut adalah contoh penerapannya: # mengetahui jumlah kolom ncol(my_data) ## [1] 3 # mengetahui jumlah baris nrow(my_data) ## [1] 5 Jika ingin memperoleh ringkasan terkait dimensi matriks kita juga dapat mengunakan fungsi dim() untuk mengetahui jumlah baris dan kolom matriks. Berikut adalah contoh penerapannya: dim(my_data) # jumlah baris dan kolom ## [1] 5 3 2.8.2 Subset Pada Matriks Sama dengan vektor, subset juga dapat dilakukan pada matriks. Bedanya subset dilakukan berdasarkan baris dan kolom pada matriks. Memilih baris/kolom berdasarkan pengindeksan positif baris atau kolom dapat diseleksi menggunakan format data[row, col]. Cara selesi ini sama dengan vektor, bedanya kita harus menetukan baris dan kolom dari data yang akan kita pilih. Berikut adalah contoh penerapannya: # Pilih baris ke-2 my_data[2,] ## col1 col2 col3 ## 6 4 3 # Pilih baris 2 sampai 4 my_data[2:4,] ## col1 col2 col3 ## row2 6 4 3 ## row3 7 5 4 ## row4 8 9 8 # Pilih baris 2 dan 4 my_data[c(2,4),] ## col1 col2 col3 ## row2 6 4 3 ## row4 8 9 8 # Pilih baris 2 dan kolom 3 my_data[2, 3] ## [1] 3 Pilih berdasarkan nama baris/kolom Berikut adalah contoh subset berdasarkan nama baris atau kolom. # Pilih baris 1 dan kolom 3 my_data[&quot;row1&quot;,&quot;col3&quot;] ## [1] 7 # Pilih baris 1 sampai 4 dan kolom 3 baris &lt;- c(&quot;row1&quot;,&quot;row2&quot;,&quot;row3&quot;) my_data[baris, &quot;col3&quot;] ## row1 row2 row3 ## 7 3 4 Kecualikan baris/kolom dengan pengindeksan negatif Sama seperti vektor pengecualian data dapat dilakukan di matriks menggunakan pengindeksan negatif. Berikut cara melakukannya: # Kecualikan baris 2 dan 3 serta kolom 3 my_data[-c(2,3), -3] ## col1 col2 ## row1 5 2 ## row4 8 9 ## row5 9 8 Pilihan dengan logik Dalam kode R di bawah ini, misalkan kita ingin hanya menyimpan baris di mana col3&gt; = 4: col3 &lt;- my_data[, &quot;col3&quot;] my_data[col3 &gt;= 4, ] ## col1 col2 col3 ## row1 5 2 7 ## row3 7 5 4 ## row4 8 9 8 ## row5 9 8 7 2.8.3 Perhitungan Menggunakan Matriks _ Kita juga dapat melakukan operasi matematika pada matriks. Pada operasi matematika pada matriks proses yang terjadi bisa lebih kompleks dibanding pada vektor, dimana kita dapat melakukan operasi untuk memperoleh gambaran data pada tiap kolom atau baris. Berikut adalah contoh operasi matematika sederhana pada matriks: # mengalikan masing-masing elemen matriks dengan 2 my_data*2 ## col1 col2 col3 ## row1 10 4 14 ## row2 12 8 6 ## row3 14 10 8 ## row4 16 18 16 ## row5 18 16 14 # memperoleh nilai log basis 2 pada masing-masing elemen matriks log2(my_data) ## col1 col2 col3 ## row1 2.322 1.000 2.807 ## row2 2.585 2.000 1.585 ## row3 2.807 2.322 2.000 ## row4 3.000 3.170 3.000 ## row5 3.170 3.000 2.807 Seperti yang telah penulis jelaskan sebelumnya, kita juga dapat melakukan operasi matematika untuk memperoleh hasil penjumlahan elemen pada tiap baris atau kolom dengan menggunakan fungsi rowSums() untuk baris dan colSums() untuk kolom. # Total pada tiap kolom colSums(my_data) ## col1 col2 col3 ## 35 28 29 # Total pada tiap baris rowSums(my_data) ## row1 row2 row3 row4 row5 ## 14 13 16 25 24 Jika kita tertarik untuk mencari nilai rata-rata tiap baris arau kolom kita juga dapat menggunakan fungsi rowMeans() atau colMeans(). Berikut adalah contoh penerapannya: # Rata-rata tiap baris rowMeans(my_data) ## row1 row2 row3 row4 row5 ## 4.667 4.333 5.333 8.333 8.000 # Rata-rata tiap kolom colMeans(my_data) ## col1 col2 col3 ## 7.0 5.6 5.8 Kita juga dapat melakukan perhitungan statistika lainnya menggunakan fungsi apply(). Berikut adalah format sederhananya: apply(x, MARGIN, FUN) Note: x : data matriks MARGIN : Nilai yang dapat digunakan adalah 1 (untuk operasi pada baris) dan 2 (untuk operasi pada kolom) FUN : fungsi yang diterapkan pada baris atau kolom untuk mengetahui fungsi (FUN) apa saja yang dapat diterapkan pada fungsi apply() jalankan sintaks bantuan berikut: help(apply) Berikut adalah contoh penerapannya: # Rata-rata pada tiap baris apply(my_data, 1, mean) ## row1 row2 row3 row4 row5 ## 4.667 4.333 5.333 8.333 8.000 # Median pada tiap kolom apply(my_data, 2, median) ## col1 col2 col3 ## 7 5 7 2.9 Faktor Dalam bahasa R , faktor merupakan verktor dengan level. Level disimpan sebagai R Character. Jika kita menggunakan SPSS maka factor ini akan sama dengan jenis data numerik atau ordinal. Faktor merepresentasikan kategori atau grup pada data. Untuk membuat faktor pada R, kita dapat menggunakan fungsi factor(). 2.9.1 Membuat Variabel Faktor Berikut adalah contoh sintaks pembuatan variabel faktor. # membuat variabel faktor faktor &lt;- factor(c(1,2,1,2)) faktor ## [1] 1 2 1 2 ## Levels: 1 2 Pada sintaks tersebut objek faktor terdiri atas dua buah kategori atau pada R disebut sebagai factor levels. Kita dapat mengecek factor levels menggunakan fungsi levels(). levels(faktor) ## [1] &quot;1&quot; &quot;2&quot; Kita juga dapat memberikan label atau mengubah level pada faktor. Berikut adalah contoh bagaimana kita melakukannya: # Ubah level levels(faktor) &lt;- c(&quot;baik&quot;,&quot;tidak_baik&quot;) faktor ## [1] baik tidak_baik baik tidak_baik ## Levels: baik tidak_baik # Ubah urutan level faktor &lt;- factor(faktor, levels = c(&quot;tidak_baik&quot;,&quot;baik&quot;)) faktor ## [1] baik tidak_baik baik tidak_baik ## Levels: tidak_baik baik Note: Fungsi is.factor() dapat digunakan untuk mengecek apakah sebuah variabel adalah faktor. Hasil yang dimunculkan dapat berupa TRUE (jika faktor) atau FALSE (jika bukan) Fungsi as.factor() dapat digunakan untuk merubah sebuah variabel menjadi faktor. # Cek jika objek faktor adalah faktor is.factor(faktor) ## [1] TRUE # Cek jika objek Jumlah adalah faktor is.factor(Jumlah) ## [1] FALSE # Ubah objek Jumlah menjadi faktor as.factor(Jumlah) ## Apel Jeruk Rambutan Salak ## 5 &lt;NA&gt; 6 7 ## Levels: 5 6 7 2.9.2 Perhitungan Menggunakan Faktor Jika kita ingin mengetahui jumlah masing-masing observasi pada masing-masing faktor, kita dapat menggunakan fungsi summary(). Berikut adalah contoh penerapannya: summary(faktor) ## tidak_baik baik ## 2 2 Pada contoh perhitungan menggunakan vektor kita telah membuat objek pendapatan. Pada objek tersebut kita ingin menghitung nilai rata-rata pendapatan berdasarkan objek faktor. Untuk melakukannya kita dapat menggunakan fungsi tapply(). pendapatan ## Andi Joni Lina Rani ## 2000 1800 2500 3000 faktor ## [1] baik tidak_baik baik tidak_baik ## Levels: tidak_baik baik # Rata-rata pendapatan dan simpan sebagai objek dengan nama: # mean_pendapatan mean_pendapatan &lt;- tapply(pendapatan, faktor, mean) mean_pendapatan ## tidak_baik baik ## 2400 2250 # Hitung ukuran/panjang masing-masing grup tapply(pendapatan, faktor, length) ## tidak_baik baik ## 2 2 Untuk mengetahui jumlah masing-masing observasi masing-masing factor levels kita juga dapat menggunakan fungsi table(). Fungsi tersebut akan membuat frekuensi tabel pada masing-masing factor levels atau yang dikenal sebagai contingency table. table(faktor) ## faktor ## tidak_baik baik ## 2 2 # Cross-tabulation antara # faktor dan pendapatan table(pendapatan, faktor) ## faktor ## pendapatan tidak_baik baik ## 1800 1 0 ## 2000 0 1 ## 2500 0 1 ## 3000 1 0 2.10 Data Frames Data frame merupakan kumpulan vektor dengan panjang sama atau dapat pula dikatan sebagai matriks yang memiliki kolom dengan jenis data yang berbeda-beda (numerik, karakter, logical). Pada data frame terdapat baris dan kolom. Baris disebut sebagai observasi, sedangkan kolom disebut sebagai variabel. Sehingga dapat dikatakan bahwa setiap observasi akan memiliki satu atau beberapa variabel. 2.10.1 Membuat Data Frame Data frame dapat dibuat menggunakan fungsi data.frame(). Berikut adalah contoh cara membuat data frame: # Membuat data frame nama &lt;- c(&quot;Andi&quot;,&quot;Rizal&quot;,&quot;Ani&quot;,&quot;Ina&quot;) pendapatan &lt;- c(1000, 2000, 3500, 500) tinggi &lt;- c(160, 155, 170, 146) usia &lt;- c(35, 40, 25, 27) menikah &lt;- c(TRUE, FALSE, TRUE, TRUE) data_teman &lt;- data.frame(nama = nama, gaji = pendapatan, tinggi = tinggi, menikah = menikah) data_teman ## nama gaji tinggi menikah ## 1 Andi 1000 160 TRUE ## 2 Rizal 2000 155 FALSE ## 3 Ani 3500 170 TRUE ## 4 Ina 500 146 TRUE Untuk mengecek apakah objek data_teman merupakan data frame, kita dapat menggunakan fungsi is.data.frame(). Jika hasilnya TRUE, maka objek tersebut adalah data frame. Berikut adalah contoh penerapannya: is.data.frame(data_teman) ## [1] TRUE Note: untuk konversi objek menjadi data frame, kita dapat menjalankan fungsi as.data.frame(). 2.10.2 Subset Pada Data Frame Subset pada data frame sebenarnya tidak berbeda dengan subset pada matriks. Bedanya adalah kita juga bisa melakukan subset langsung terhadap nama variabel menggunakan dollar sign. Untuk lebih memahaminya berikut adalah jenis subset pada data frame. Pengindeksan positif menggunakan nama dan lokasi. # Subset menggunakan dollar sign data_teman$nama ## [1] Andi Rizal Ani Ina ## Levels: Andi Ani Ina Rizal # atau data_teman[, &quot;nama&quot;] ## [1] Andi Rizal Ani Ina ## Levels: Andi Ani Ina Rizal # subset baris 1 sampai 3 serta kolom 1 dan 3 data_teman[1:3, c(1,3)] ## nama tinggi ## 1 Andi 160 ## 2 Rizal 155 ## 3 Ani 170 Pengindeksan negatif # Kecualikan kolom nama data_teman[,-1] ## gaji tinggi menikah ## 1 1000 160 TRUE ## 2 2000 155 FALSE ## 3 3500 170 TRUE ## 4 500 146 TRUE Pengideksan berdasarkan karakteristik Kita ingin memilih data dengan kriteria teman yang telah menikah data_teman[data_teman$menikah==TRUE, ] ## nama gaji tinggi menikah ## 1 Andi 1000 160 TRUE ## 3 Ani 3500 170 TRUE ## 4 Ina 500 146 TRUE # Tampilkan hanya kolom nama dan gaji untuk yang telah menikah data_teman[data_teman$menikah==TRUE, 1:2] ## nama gaji ## 1 Andi 1000 ## 3 Ani 3500 ## 4 Ina 500 kita juga dapat menggunakan fungsi subset() agar lebih mudah. Berikut adalah contoh penerapannya: # subset terhadap teman yang berusia &gt;=30 tahun subset(data_teman, usia&gt;=30) ## nama gaji tinggi menikah ## 1 Andi 1000 160 TRUE ## 2 Rizal 2000 155 FALSE Opsi lain adalah menggunakan fungsi attach() dan detach(). Fungsi attach() mengambil data frame dan membuat kolomnya dapat diakses hanya dengan memberikan nama mereka. # attach data frame attach(data_teman) ## The following objects are masked _by_ .GlobalEnv: ## ## menikah, nama, tinggi # ==== memulai data manipulation ==== data_teman[usia&gt;=30] ## nama gaji ## 1 Andi 1000 ## 2 Rizal 2000 ## 3 Ani 3500 ## 4 Ina 500 # ==== mengakhiri data manipulation ==== # detach data frame detach(data_teman) 2.10.3 Memperluas Data Frame Kita dapat juga memperluas data frame dengan cara menambahkan variabel atau kolombaru pada data frame. Pada contoh kali ini penulis akan menambahkan kolom pendidikan terakhir pada objek data_teman. Berikut adalah sintaks yang digunakan. # membuat vektor pendidikan pendidikan &lt;- c(&quot;S1&quot;,&quot;S2&quot;,&quot;D3&quot;,&quot;D1&quot;) # menambahkan variabel pendidikan pada data frame data_teman$pendidikan &lt;- pendidikan # atau cbind(data_teman, pendidikan=pendidikan) 2.10.4 Perhitungan Pada Data Frame Perhitungan pada variabel numerik data frame pada dasarnya sama dengan perhitungan pada matriks. kita dapat menggunakan fungsi rowSums(), colSums(), rowMeans() dan apply(). Proses perhitungan dan manipulasi pada data frame akan dibahas pada sesi yang lain secara lebih detail. 2.11 List List adalah kumpulan objek yang diurutkan, yang dapat berupa vektor, matriks, data frame, dll. Dengan kata lain, daftar dapat berisi semua jenis objek R. 2.11.1 Membuat List List dapat dibuat menggunakan fungsi list(). Berikut disajikan contoh sebuah list sebuah keluarga: # Membuat list keluarga keluarga &lt;- list( ayah = &quot;Budi&quot;, usia_ayah = 48, ibu = &quot;Ani&quot;, usia_ibu = &quot;47&quot;, anak = c(&quot;Andi&quot;, &quot;Adi&quot;), usia_anak = c(15,10) ) # Print keluarga ## $ayah ## [1] &quot;Budi&quot; ## ## $usia_ayah ## [1] 48 ## ## $ibu ## [1] &quot;Ani&quot; ## ## $usia_ibu ## [1] &quot;47&quot; ## ## $anak ## [1] &quot;Andi&quot; &quot;Adi&quot; ## ## $usia_anak ## [1] 15 10 # Nama elemen dalam list names(keluarga) ## [1] &quot;ayah&quot; &quot;usia_ayah&quot; &quot;ibu&quot; &quot;usia_ibu&quot; ## [5] &quot;anak&quot; &quot;usia_anak&quot; # Jumlah elemen pada list length(keluarga) ## [1] 6 2.11.2 Subset List Kita dapat memilih sebuah elemen pada list dengan menggunakan nama elemen atau indeks dari elemen tersebut. Berikut adalah contoh penerapannya: # Subset berdasarkan nama # mengambil elemen usia_ayah keluarga$usia_ayah ## [1] 48 # Atau keluarga[[&quot;usia_ayah&quot;]] ## [1] 48 # Subset berdasarkan indeks keluarga[[2]] ## [1] 48 # subset elemen pertama pada keluarga[[5]] keluarga[[5]][1] ## [1] &quot;Andi&quot; 2.11.3 Memperluas List Kita juga dapat menambahkan elemen pada list yang telah kita buat. Pada contoh list sebelumnya penulis akan menambahkan elemen keluarga yang lain seperti berikut: # Menambahkan kakek dan nenek pada list keluarga$kakek &lt;- &quot;Suprapto&quot; keluarga$nenek &lt;- &quot;Sri&quot; # Print keluarga ## $ayah ## [1] &quot;Budi&quot; ## ## $usia_ayah ## [1] 48 ## ## $ibu ## [1] &quot;Ani&quot; ## ## $usia_ibu ## [1] &quot;47&quot; ## ## $anak ## [1] &quot;Andi&quot; &quot;Adi&quot; ## ## $usia_anak ## [1] 15 10 ## ## $kakek ## [1] &quot;Suprapto&quot; ## ## $nenek ## [1] &quot;Sri&quot; Kita juga dapat menggabungkan beberapa list menjadi satu. Berikut adalah format sederhana bagaimana cara menggabungkan beberapa list menjadi satu: list_baru &lt;- c(list_a, list_b, list_c, ...) 2.12 Loop Loop merupakan kode program yang berulang-ulang. Loop berguna saat kita ingin melakukan sebuah perintah yang perlu dijalankan berulang-ulang seperti melakukan perhitungan maupaun melakukan visualisasi terhadap banyak variabel secara serentak. Hal ini tentu saja membantu kita karena kita tidak perlu menulis sejumlah sintaks yang berulang-ulang. Kita hanya perlu mengatur statement berdasarkan hasil yang kita harapkan. Pada R bentuk loop dapat bermacam-macam (“for loop”,“while loop”, dll). R menyederhanakan bentuk loop ini dengan menyediakan sejumlah fungsi seperti apply(),tapply(), dll. Sehingga loop jarang sekali muncul dalam kode R. Sehingga R sering disebut sebagai loopless loop. Meski loop jarang muncul bukan berarti kita tidak akan melakukannya. Terkadang saat kita melakukan komputasi statistik atau matematik dan belum terdapat paket yang mendukung proses tersebut, sering kali kita akan membuat sintaks sendiri berdasarkan algoritma metode tersebut. Pada algoritma tersebut sering pula terdapat loop yang diperlukan selama proses perhitungan. Secara sederhana diagram umum loop ditampilkan pada Gambar 2.1 Gambar 2.1: Diagram umum loop (sumber: Primartha, 2018). 2.12.1 For Loop Mengulangi sebuah statement atau sekelompok statement sebanyak nilai yang ditentukan di awal. Jadi operasi akan terus dilakukan sampai dengan jumlah yang telah ditetapkan di awal atau dengan kata lain tes kondisi (Jika jumlah pengulangan telah cukup) hanya akan dilakukan di akhir. Secara sederhana bentuk dari for loop dapat dituliskan sebagai berikut: for (value in vector){ statements } Berikut adalah contoh sintaks penerapan for loop: # Membuat vektor numerik vektor &lt;- c(1:5) # loop for(i in vektor){ print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 Loop akan dimulai dari blok statement for sampai dengan print(i). Berdasarkan loop pada contoh tersebut, loop hanya dilakukan sebanyak 5 kali sesuai dengan jumlah vektor yang ada. 2.12.2 While Loop While loop merupakan loop yang digunakan ketika kita telah menetapkan stop condition sebelumnya. Blok statement/kode yang sama akan terus dijalankan sampai stop condition ini tercapai. Stop condition akan di cek sebelum melakukan proses loop. Berikut adalah pola dari while loop dapat dituliskan sebagai berikut: while (test_expression){ statement } Berikut adalah contoh penerapan dari while loop: coba &lt;- c(&quot;Contoh&quot;) counter &lt;- 1 # loop while (counter&lt;5){ # print vektor print(coba) # tambahkan nilai counter sehingga proses terus berlangsung sampai counter = 5 counter &lt;- counter + 1 } ## [1] &quot;Contoh&quot; ## [1] &quot;Contoh&quot; ## [1] &quot;Contoh&quot; ## [1] &quot;Contoh&quot; Loop akan dimulai dari blok statement while sampai dengan counter &lt;- 1. Loop hanya akan dilakukan sepanjang nilai counter &lt; 5. 2.12.3 Repeat Loop Repeat loop akan menjalankan statement/kode yang sama berulang-ulang hingga stop condition tercapai. Berikut adalah pola dari repeat loop. repeat { commands if(condition){ break } } Berikut adalah contoh penerapan dari repeat loop: coba &lt;- c(&quot;contoh&quot;) counter &lt;- 1 repeat { print(coba) counter &lt;- counter + 1 if(counter &lt; 5){ break } } ## [1] &quot;contoh&quot; Loop akan dimulai dari blok statement while sampai dengan break. Loop hanya akan dilakukan sepanjang nilai counter &lt; 5. Hasil yang diperoleh berbeda dengan while loop, dimana kita memperoleh 4 buah kata “contoh”. Hal ini disebabkan karena repeat loop melakukan pengecekan stop condition tidak di awal loop seperti while loop sehingga berapapun nilainya, selama nilainya sesuai dengan stop condition maka loop akan dihentikan. Hal ini berbeda dengan while loop dimana proses dilakukan berulang-ulang sampai jumlahnya mendekati stop condition. 2.12.4 Break Break sebenarnya bukan bagian dari loop, namun sering digunakan dalam loop. Break dapat digunakan pada loop manakala dirasa perlu, yaitu saat kondisi yang disyaratkan pada break tercapai. Berikut adalah contoh penerapan break pada beberapa jenis loop. # for loop a = c(2,4,6,8,10,12,14) for(i in a){ if(i&gt;8){ break } print(i) } ## [1] 2 ## [1] 4 ## [1] 6 ## [1] 8 # while loop a = 2 b = 4 while(a&lt;7){ print(a) a = a +1 if(b+a&gt;10){ break } } ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 # repeat loop a = 1 repeat{ print(a) a = a+1 if(a&gt;6){ break } } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 2.13 Decision Making Decicion Making atau sering disebut sebagai if then else statement merupakan bentuk percabagan yang digunakan manakala kita ingin agar program dapat melakukan pengujian terhadap syarat kondisi tertentu. Pada Tabel 2.5 disajikan daftar percabangan yang digunakan pada R. Tabel 2.5: Daftar percabangan pada R. Statement Keterangan if statement if statement hanya terdiri atas sebuah ekspresi Boolean, dan diikuti satu atau lebih statement if…else statement if else statement terdiri atas beberapa buah ekspresi Boolean. Ekspressi Boolean berikutnya akan dijalankan jika ekspresi *Boolan sebelumnya bernilai FALSE switch statement switch statement digunakan untuk mengevaluasi sebuah variabel beberapa pilihan 2.13.1 if statement Pola if statement disajikan pada Gambar 2.2 Gambar 2.2: Diagram if statement (sumber: Primartha, 2018). Berikut adalah contoh penerapan if statement: x &lt;- c(1:5) if(is.vector(x)){ print(&quot;x adalah sebuah vector&quot;) } ## [1] &quot;x adalah sebuah vector&quot; 2.13.2 if else statement Pola dari if else statement disajikan pada Gambar 2.3 Gambar 2.3: Diagram if else statement (sumber: Primartha, 2018). Berikut adalah contoh penerapan if else statement: x &lt;- c(&quot;Andi&quot;,&quot;Iwan&quot;, &quot;Adi&quot;) if(&quot;Rina&quot; %in% x){ print(&quot;Rina ditemukan&quot;) } else if(&quot;Adi&quot; %in% x){ print(&quot;Adi ditemukan&quot;) } else{ print(&quot;tidak ada yang ditemukan&quot;) } ## [1] &quot;Adi ditemukan&quot; 2.13.3 switch statement Pola dari switch statement disajikan pada Gambar 2.4 Gambar 2.4: Diagram switch statement (sumber: Primartha, 2018). Berikut adalah contoh penerapan switch statement: y = 3 x = switch( y, &quot;Selamat Pagi&quot;, &quot;Selamat Siang&quot;, &quot;Selamat Sore&quot;, &quot;Selamat Malam&quot; ) print(x) ## [1] &quot;Selamat Sore&quot; 2.14 Fungsi Fungsi merupakan sekumpulan instruksi atau statement yang dapat melakukan tugas khusus. Sebagai contoh fungsi perkalian untuk menyelesaikan operasi perkalian, fungsi pemangkatan hanya untuk operasi pemangkatan, dll. Pada R terdapat 2 jenis fungsi, yaitu: build in fuction dan user define function. build in fnction merupakan fungsi bawaan R saat pertama kita menginstall R. Contohnya adalah mean(), sum(), ls(), rm(), dll. Sedangkan user define fuction merupakan fungsi-fungsi yang dibuat sendiri oleh pengguna. Fungsi-fungsi buatan pengguna haruslah dideklarasikan (dibuat) terlebih dahulu sebelum dapat dijalankan. Pola pembentukan fungsi adalah sebagai berikut: function_name &lt;- function(argument_1, argument_2, ...){ function body } Note: function_name : Nama dari fungsi R. R akan menyimpan fungsi tersebut sebagai objek argument_1, argument_2,… : Argument bersifat opsional (tidak wajib). Argument dapat digunakan untuk memberi inputan kepada fungsi function body : Merupakan inti dari fungsi. Fuction body dapat terdiri atas 0 statement (kosong) hingga banyak statement. return : Fungsi ada yang memiliki output atau return value ada juga yang tidak. Jika fungsi memiliki return value maka return value dapat diproses lebih lanjut Berikut adalah contoh penerapan user define function: # Fungsi tanpa argument bilang &lt;- function(){ print(&quot;Hello World!!&quot;) } # Print bilang() ## [1] &quot;Hello World!!&quot; # Fungsi dengan argumen tambah &lt;- function(a,b){ print(a+b) } # Print tambah(5,3) ## [1] 8 # Fungsi dengan return value kali &lt;- function(a,b){ return(a*b) } # Print kali(4,3) ## [1] 12 2.15 Referensi Primartha, R. 2018. Belajar Machine Learning Teori dan Praktik. Penerbit Informatika : Bandung. Rosadi,D. 2016. Analisis Statistika dengan R. Gadjah Mada University Press: Yogyakarta. STHDA. Easy R Programming Basics. http://www.sthda.com/english/wiki/easy-r-programming-basics Venables, W.N. Smith D.M. and R Core Team. 2018. An Introduction to R. R Manuals. The R Core Team. 2018. R: A Language and Environment for Statistical Computing. R Manuals. "],
["manajemen-data-r.html", "Chapter 3 Manajemen Data R 3.1 Import File 3.2 Eksport File 3.3 Tibble Data Format 3.4 Merapikan Data 3.5 Transformasi Data 3.6 Referensi", " Chapter 3 Manajemen Data R Data manajemen merupakan bagian penting dalam setiap proses analisa data. Proses import dan eksport data pada berbagai format penting untuk dipelajari. Selain itu, proses perapihan data sebelum analisa menjadi bagian yang harus ada pada awal proses analisa. Proses-proses tersebut akan kita ulas secara mendalam pada chapter ini.Chapter ini juga akan membahas bagaimana kita dapat melakukan sejumlah manipulasi data untuk memperoleh informasi lebih yang terkandung pada. 3.1 Import File Pada sesi bagian ini penulis akan menjelaskan cara mengimport file pada R. File yang diimport ke dalam R terdiri atas file yang sering digunakan pada saat akan melakukan analisis data, antara lain: TXT, CSv, Excel, SPSS, SAS, dan STATA. Pada bagian ini akan dijelaskan pula bagaimana melakukan import data menggunakan library readr serta kelebihan dari metode import data yang digunakan. Berikut adalah cara mengimport data berbagai format pada R. Note: Pastikan kita telah mengatur lokasi working directory pada tempat dimana lokasi file yang akan kita baca berada untuk mempermudah dalam melakukan import file. 3.1.1 Import File Menggunakan Fungsi Bawaan R Fungsi bawaan R secara umum hanya dapat membaca data dengan format TXT dan CSV. Pada RStudio fungsi ini bertambah dengan adanya library tambahan yang telah terinstall di RStudio untuk membaca file dengan format EXCEL, SPSS, SAS dan STATA. Secara umum fungsi yang digunakan untuk membaca data dengan format tabel seperti TXT dan CSV adalah fungsiread.table(). Berikut adalah list fungsi dasar lainnya untuk membaca file dengan format TXT dan CSV pada R: read.csv(): untuk membaca file dengan format comma separated value(“.csv”). read.csv2(): varian yang digunakan jika pada file “.csv” yang akan dibaca mengandung koma (“,”) sebagai desimal dan semicolon (“;”) sebagai pemisah antar variabel atau kolom. read.delim(): untuk membaca file dengan format tab-separated value(“.txt”). read.delim2(): membaca file dengan format “.txt” dengan tanda koma (“,”) sebagai penujuk bilangan desimal. Masing-masing fungsi diatas dapat dituliskan kedalam R dengan format sebagai berikut: # Membaca tabular data pada R read.table(file, header = FALSE, sep = &quot;&quot;, dec = &quot;.&quot;) # Membaca&quot;comma separated value&quot; files (&quot;.csv&quot;) read.csv(file, header = TRUE, sep = &quot;,&quot;, dec = &quot;.&quot;, ...) # atau gunakan read.csv2 jika tanda desimal pada data adalah &quot;,&quot; dan pemisah kolom adalah &quot;;&quot; read.csv2(file, header = TRUE, sep = &quot;;&quot;, dec = &quot;,&quot;, ...) # MembacaTAB delimited files read.delim(file, header = TRUE, sep = &quot;\\t&quot;, dec = &quot;.&quot;, ...) read.delim2(file, header = TRUE, sep = &quot;\\t&quot;, dec = &quot;,&quot;, ...) Note: file: nama file diakhiri dengan format file (misal: “nama_file.txt”) yang akan di import ke dalam file. Dapat pula diisi lokasi file tersebut berada, misal:(C:/Users/My PC/Documents/nama_file.txt atau .csv) sep: pemisah antar kolom. “” digunakan untuk tab-delimited file. header: nilai logik. jika TRUE, maka read.table() akan menganggap bahwa file yang akan dibaca pada baris pertama file merupakan header data. dec: karakter yang digunakan sebagai penunjuk desimal pada data. Untuk info lebih lanjut terkait fungsi-fungsi tersebut dan contoh bagaimana menggunakannya, pembaca dapat mengakses fitur batuan dari fungsi tersebut menggunakan sintaks berikut: # mengakses menu bantuan ?read.table ?read.csv ?read.csv2 ?read.delim ?read.delim2 Misalkan penulis memiliki data pada file bernama “mtcars.csv” dengan desimal berupa titik pada datanya. Penulsi ingin membaca file tersebut, maka penulis akan menuliskan sintaks berikut: data &lt;- read.csv(&quot;mtcars.csv&quot;) Secara default perintah tersebut akan membaca baris pertama data sebagai header serta data berupa karakter menjadi factor. Untuk mencegah agar data berupa karakter menjadi faktor, perintah tersebut dapat ditambahkan parameter stringAsFactor = FALSE. Kita juga dapat memilih file yang akan kita baca secara interakti. Misal pada working directory terdapat beberapa file yang akan kita baca. Kita ingin melihat file dengan format tertentu yang hendak kita baca, namun kita malas mengecek file explorer pada windows. Untuk mengatasi masalah tersebut, kita dapat menggunakan fungsi file.choose() pada R. Fungsi tersebut akan menampilkan jendela windows explores sehingga kita dapat memilih file apa yang hendak dibaca. Berikut adalah contoh penerapannya: data &lt;- read.csv(file.choose()) Note: pastikan format file yang dibaca sama dengan fungsi import yang digunakan. Kita juga dapat membaca file dari internet. Untuk melakukannya kit hanya perlu meng-copy url file tersebut. Berikut adalah contoh file yang dibaca dari internet: # Membaca file dari internet data &lt;- read.delim(&quot;http://www.sthda.com/upload/boxplot_format.txt&quot;) # mengecek 6 observasi awal head(data) ## Nom variable Group ## 1 IND1 10 A ## 2 IND2 7 A ## 3 IND3 20 A ## 4 IND4 14 A ## 5 IND5 14 A ## 6 IND6 12 A 3.1.2 Membaca File CSV dan TXT Menggunakan Library readr Pada bagian sebelumnya kita telah belajar bagaimana cara membaca file dengan format CSV dan TXT menggunakan paket dasar R. Pada bagian ini penulis akan menjelaskan bagaimana cara membaca file dengan format TXT dan CSV pada R menggunakan paket readr. readr dikembangkan oleh Hadley Wickham. paket readr memberikan solusi cepat dan ramah untuk membaca delimited file ke dalam R. Dibandingkan dengan paket dasar R, readr memiliki kelebihan sebagai berikut: Mampu membaca file 10x lebih cepat dibandingkan pada paket bawaan R. Menampilkan progress bar yang bermanfaat jika proses pemuatan berlangsung agak lama. semua fungsi bekerja dengan cara yang persis sama dengan paket bawaan R. Untuk dapat menggunakan readr, kita perlu menginstall paketnya terlebih dahulu. Untuk melakukannya jalankan sintaks berikut: # Menginstall paket install.packages(&quot;readr&quot;) # Memuat paket library(readr) Berikut adalah format bebrapa fungsi yang dapat digunakan: # Fungsi umum (membaca TXT dan CSV) dapat juga membaca flat file dan tsv read_delim(file, delim, col_names = TRUE) # Membaca comma (&quot;,&quot;) separated values read_csv(file, col_names = TRUE) # Membaca semicolon (&quot;;&quot;) separated values read_csv2(file, col_names = TRUE) # Membaca tab separated values read_tsv(file, col_names = TRUE) Note: file: path file, koneksi atau raw vector. File yang berakhiran .gz, .bz2, .xz, atau .zip akan secara otomatis tidak terkompresi. File yang dimulai dengan “http: //”, “https: //”, “ftp: //”, atau “ftps: //” akan diunduh secara otomatis. File gz jarak jauh juga dapat diunduh &amp; didekompresi secara otomatis. delim: karakter yang membatasi tiap nilai pada file. col_names: nilai logik. Jika TRUE, maka baris pertama akan menjadi header. Berikut adalah contoh bagaimana cara membaca file menggunakan fungsi pada paket readr: # Membaca file lokal data &lt;- read_csv(&quot;mtcars.csv&quot;) # atau data &lt;- read_csv(file.choose()) # Membaca dari internet data &lt;- read_tsv(&quot;http://www.sthda.com/upload/boxplot_format.txt&quot;) Kita juga dapat menspesifikasi jenis data pada kolom yang akan dibaca. Keuntungan dari penentuan jenis kolom (tipe data) akan memastikan data yang telah dibaca tidak salah berdasarkan jenis data pada masing-masing kolom. Beberapa format jenis kolom yang tersedia pada readr adalah sebagi berikut: col_integer(): untuk menentukan integer (alias = “i”). col_double(): untuk menentukan kolom sebagai jenis data double (alias = “d”). col_logical(): untuk menentukan variabel logis (alias = “l”). col_character(): meninggalkan string apa adanya.Tidak mengonversinya menjadi faktor (alias = “c”). col_factor(): untuk menentukan variabel faktor (atau pengelompokan) (alias = “f”) col_skip(): untuk mengabaikan kolom (alias = “-” atau “_“) col_date() (alias = “D”), col_datetime() (alias = “T”) dan col_time() (“t”) untuk menentukan tanggal, waktu tanggal, dan waktu. Berikut adalah contoh penerapannya: data &lt;- read_csv(&quot;my_file.csv&quot;, col_types = cols( x = &quot;i&quot;, # kolom integer treatment = &quot;c&quot; # kolom karakter/string )) 3.1.3 Import File Excel Pada R Keunggulan penggunaan excel sebagai format penyimpan data adalah kita dapat menyimpan banyak data dan memisahkannya pada lembar (sheet) yang berbeda sebagai suatu data yang independen dibandingkan pembacaan pada file csv yang hanya berisikan satu tabel data saja tiap file. Pada R kita dapat melakukan pembacaan file menggunakan berbagai macam cara seperti menggunakan paket bawaan R maupun menggunakan library yang perlu kita install. Berikut adalah beberapa cara membaca file excel pada R. Mengkonversi terlebih dahulu satu sheet excel yang akan kita baca menjadi format “.csv” maupun “.txt” sehingga dapat dibaca seperti pada sub-bab 3.1.1. Menyalin data dari excel dan mengimport data pada R. Cara ini sedikit mirip dengan cara sebelumnya, dimana kita perlu membuka file excel dan melakukan select dan copy (ctrl+c) tabel data yang hendak dibaca. Data tersebut selanjutnya akan tersimpan pada clipboard. Data yang telah tersalin selanjutnya diimport ke R dengan mengetikkan sintaks berikut: data &lt;- read.table(file= &quot;clipboard&quot;, sep = &quot;\\t&quot;, header = TRUE) Cara ini merupakan cara yang paling sering penulis gunakan. Kelemahan penggunaan cara ini adalah ketika kita melakukan proses select dan copy (ctrl+c) tabel yang jumlahnya sangat banyak dan terdapat teks-teks penjelasan terkait tabel data pada lembar kerja excel yang tidak ingin kita sertakan akan memakan waktu yang lebih lama pada proses select. Mengimport data menggunakan library readxl. Paket readxl, yang dikembangkan oleh Hadley Wickham, dapat digunakan untuk dengan mudah mengimpor file Excel (xls | xlsx) ke R tanpa ada ketergantungan eksternal. Untuk dapat menggunakan library readxl kita harus menginstallnya terlebih dahulu menggunakan sintaks berikut: # Instal paket install.packages(&quot;readxl&quot;) # memuat paket library(readxl) Berikut adalah contoh cara mengimport data dengan format xls atau xlsx pada R. # Tentukan sheet dengan nama sheet pada file data &lt;- read_excel(&quot;my_file.xlsx&quot;, sheet = &quot;data&quot;) # Tentukan sheet berdasarkan indeks sheet data &lt;- read_excel(&quot;my_file.xlsx&quot;, sheet = 2) # membaca sheet ke-2 Mengimport data menggunakan library xlsx Paket xlsx, solusi berbasis java, adalah salah satu paket R yang ampuh untuk membaca, menulis, dan memformat file Excel. Untuk dapat menggunakannya kita harus menginstall dan memuatnya terlebih dahulu. Berikut sintaks yang digunakan: # Menginstall paket install.packages(&quot;xlsx&quot;) # Memuat paket library(xlsx) Terdapat dua buah fungsi yang disediakan pada paket tersebut yaitu read.xlsx() dan read.xlsx2(). Perbedaan keduanya adalah read.xlsx2() digunakan pada file data dengan ukuran yang besar serta proses pembacaan data yang lebih cepat dibandingkan dengan read.xlsx(). Fromat yang digunakan untuk kedua fungsi tersebut disajikan sebagai berikut: read.xlsx(file, sheetIndex, header=TRUE) read.xlsx2(file, sheetIndex, header=TRUE) Note: file: nama atau lokasi file berada sheetIndex: Indeks dari sheet yang hendak dibaca header: nilai logik. Jika bernilai TRUE, maka baris pertama dari sheet menjadi header. Berikut adalah contoh penggunaanya: data &lt;- read.xlsx(file.choose(), 1) # membaca sheet 1 Note: kita juga dapat membaca file dari internet seperti pada sub-bab 3.1.1. 3.1.4 Membaca File Dari Format Aplikasi Statistik Untuk membaca file yang berasal dari format aplikasi statistik seperti SPSS, SAS, dan STATA kita perlu menginstal dan memuat paket-paket yang dibutuhkan sesuai dengan file yang akan kita install. Berikut adalah sintaks bagaimana cara mengimport file dari berbagai format aplikasi statistik. # membaca file SPSS install.packages(&quot;Hmisc&quot;) # menginstall paket library(Hmisc) # memuat paket # simpan SPSS dataset pada transport format get file=&#39;c:\\mydata.sav&#39;. export outfile=&#39;c:\\mydata.por&#39;. data &lt;- spss.get(&quot;c:\\mydata.por&quot;, use.value.labels= TRUE) # use.value.labels digunakan untuk mengubah label menjadi factor # membaca file SAS install.packages(&quot;Hmisc&quot;) # menginstall paket library(Hmisc) # memuat paket # simpan SAS dataset pada transport format libname out xport &#39;c:/mydata.xpt&#39;; data out.mydata; set sasuser.mydata; run; data &lt;- sasxport.get(&quot;c:/mydata.xpt&quot;) # Variabel yang berupa karakter akan dikonversi menjadi factor # membaca file STATA install.packages(&quot;foreign&quot;) # menginstall paket library(foreign) # memuat paket data &lt;- read.dta(&quot;c:/mydata.dta&quot;) 3.2 Eksport File Setelah kita melakukan analisa dan telah memperoleh hasil yang kita inginkan dan memperoleh data frame berupa hasil prediksi suatu model atau data yang telah dibersihakan, kita ingin melakukan pelaporan dalam bentuk file dengan format seperti EXCEL, CSV atau TXT. Untuk melakukannya kita perlu melakukan eksport data yang telah dihasilkan. Pada bagian ini penulis akan menjelaskan bagaimana cara mengeksport data dari R kedalam format TXT, CSV, maupun EXCEL. Sebenarnya R memungkinkan untuk melakukan eksport dalam format lain seperti RDA maupun RDS yang tidak dibahas dalam buku ini karena berada diluar lingkup buku ini. 3.2.1 Eksport Data Menjadi Format TXT dan CSV Terdapat dua cara untuk melakukan ekport data dari R menjadi format TXT atau CSV, yaitu melalui paket dasar R maupun menggunakan library readr. Kedua cara tersebut memiliki sejumlah kemiripan dari segi fungsi, namun berbeda dari segi kecepatan eksport. Fungsi dasar yang digunakan pada R untuk melakukan eksport file kedalam format TXT dan CSv adalah write.tabel(). Format umum yang digunakan adalah sebagai berikut: write.table(x, file, sep= &quot; &quot;, dec = &quot;,&quot;, row.names = TRUE, col.names = TRUE) Note: x: matriks atau data frame yang akan ditulis. file: karakter yang menentukan nama file yang dihasilkan. sep: string pemisah bidang atau kolom, mis., sep = “ t” (untuk nilai yang dipisahkan tab). dec: string yang akan digunakan sebagai pemisah desimal. Standarnya adalah “.”. row.names: nilai logik yang menunjukkan apakah nama baris x harus ditulis bersama dengan x, atau vektor karakter nama baris yang akan ditulis. col.names: baik nilai logik yang menunjukkan apakah nama kolom x harus ditulis bersama dengan x, atau vektor karakter nama kolom yang akan ditulis. Jika col.names = NA dan row.names = TRUE ditambahkan nama kolom kosong, yang merupakan konvensi yang digunakan untuk file CSV untuk dibaca oleh spreadsheet. Selain menggunakan fungsi tersebut, untuk eksport ke dalam format CSV juga dapa menggunakan fungsi write.csv() atau write.csv2(). Berikut adalah format yang digunakan: write.csv(data, file=&quot;data.csv&quot;) write.csv2(data, file=&quot;data.csv&quot;) Secara penampakan kedua fungsi tersebut pada dasarnya sama dengan fungsi write.table(), bedanya adalah kedua fungsi tersebut spesifik digunakan untuk eksport file kedalam format CSV. Note: write.csv() menggunakan “.” sebagai titik desimal serta “,” sebagai pemisah antar kolom data. write.csv2() menggunakan “,” sebagai titik desimal serta “;” sebagai pemisah antar kolom data. Misalkan kita ingin melakukan eksport data objek mtcars kedalam format CSV. Untuk melakukannya dapat dilakukan dengan sintaks berikut: write.csv(mtcars, file=&quot;mtcars.csv&quot;, row.names = FALSE) Note: Hasil ekspoet ditampilkan pada working directory Kita juga dapat menggunakan fungsi write_delim() dari library readr untuk melakukan eksport data kedalam format CSV atau TXT. Berdasarkan format file yang hendak dihasilkan kita juga dapat menggunakan fungsi write_csv() atau write_tsv(). Berikut adalah penjelasan terkait kedua fungsi tersebut: write_csv(): untuk mengeksport kedalam format CSV. write_tsv(): untuk mengeksport kedalam format TXT. Format sederhana ketiga fungsi fungsi tersebut adalah sebagai berikut: # Fungsi umum write_delim(x, path, delim = &quot; &quot;) # Write comma (&quot;,&quot;) separated value files write_csv(file, path) # Write tab (&quot;\\t&quot;) separated value files write_tsv(file, path) Note: x: data frame yang akan ditulis path: path ke file hasil (dapat berupa nama file disertai ekstensi file yang akan dibuat) delim: Delimiter digunakan untuk memisahkan nilai. Harus karakter tunggal. Berikut adalah contoh penerapan dari fungsi tersebut: # memuat mtcars data data(mtcars) library(readr) # eksport mtcars menjadi tsv atau txt write_tsv(mtcars, path = &quot;mtcars.txt&quot;) # eksport mycars menjadi csv write_csv(mtcars, path = &quot;mtcars.csv&quot;) 3.2.2 Eksport Data Menjadi Format Excel Untuk mengeksport data menjadi format EXCEL (“.xls” atau “.xlsx”) kita dapat menggunakan fungsi write.xlsx() dan write.xlsx2() dari library xlsx. Berikut adalah format sederhana yanga digunakan: write.xlsx(x, file, sheetName = &quot;Sheet1&quot;, col.names = TRUE, row.names = TRUE, append = FALSE) write.xlsx2(x, file, sheetName = &quot;Sheet1&quot;, col.names = TRUE, row.names = TRUE, append = FALSE) Note: x: sebuah data frame untuk ditulis ke dalam worksheet. file: path ke file output. sheetName: string karakter yang digunakan untuk nama sheet. col.names, row.names: nilai logik yang menentukan apakah nama kolom / nama baris x akan ditulis ke file. append: nilai logis yang menunjukkan apakah x harus ditambahkan ke file yang ada. Berikut adalah contoh penerapannya: library(&quot;xlsx&quot;) # Menuliskan dataset pertama pada workbook write.xlsx(USArrests, file = &quot;myworkbook.xlsx&quot;, sheetName = &quot;USA-ARRESTS&quot;, append = FALSE) # Menambahkan dataset kedua pada workbook write.xlsx(mtcars, file = &quot;myworkbook.xlsx&quot;, sheetName=&quot;MTCARS&quot;, append=TRUE) # Menambahkan dataset kedua pada workbook write.xlsx(iris, file = &quot;myworkbook.xlsx&quot;, sheetName=&quot;IRIS&quot;, append=TRUE) 3.3 Tibble Data Format Tibble adalah data frame yang menyediakan metode print yang lebih bagus, berguna saat bekerja dengan kumpulan data besar. Pada bagian ini penulis akan menjelaskan penggunaan tibble sebagai alternatif kita dalam berinteraksi dengan data frame. Untuk membuat tibble kita perlu menginstall dan memuat library tibble yang dikembangkan oleh Hadley Wichham. Berikut adalah sintaks yang digunakan: # menginstall paket install.packages(&quot;tibble&quot;) # memuat paket library(tibble) 3.3.1 Membuat Tibble Untuk dapat membuat tibble kita dapat melakukan konversi data frame yang sudah ada menjadi tibble menggunakan fungsi as_tibble(). Berikut adalah contoh bagaimana membuat tibble mengunakan data iris: # memuat data mtcars data(&quot;iris&quot;) # print head(iris, 10) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3.0 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5.0 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 ## 7 4.6 3.4 1.4 0.3 ## 8 5.0 3.4 1.5 0.2 ## 9 4.4 2.9 1.4 0.2 ## 10 4.9 3.1 1.5 0.1 ## Species ## 1 setosa ## 2 setosa ## 3 setosa ## 4 setosa ## 5 setosa ## 6 setosa ## 7 setosa ## 8 setosa ## 9 setosa ## 10 setosa # konversi mtcars menjadi tibble iris_tbl &lt;- as_tibble(iris) # print iris_tbl ## # A tibble: 150 x 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 ## 7 4.6 3.4 1.4 0.3 ## 8 5 3.4 1.5 0.2 ## 9 4.4 2.9 1.4 0.2 ## 10 4.9 3.1 1.5 0.1 ## # ... with 140 more rows, and 1 more variable: ## # Species &lt;fct&gt; Note: Kita dapat mengkonversi tibble menjadi data frame menggunakan fungsi as.data.frame() Secara default saat kita print tibble, maka akan dimunculkan 10 observasi pertama. Pada data frame biasa jika kita print data tersebut maka seluruh observasi akan ditampilkan. Penggunaan tibble ini cenderung menguntungkan saat kita bekerja dengan jumlah data yang besar dan ingin mengecek observasi yang ada. Hal ini berbeda dengan data frame biasa dimana untuk mengecek observasi awal kita perlu menggunakan fungsi head() agar seluruh data tidak ditampilkan. Sehingga penggunaan tibble cenderung membuat proses analisa menjadi lebih rapi. Kita juga dapat membuat tibble dari kumpulan sejumlah vektor menggunakan fungsi tibble(). tibble() akan secara otomatis mendaur ulang input dengan panjang 1 (variabel y), dan memungkinkan kita untuk merujuk ke variabel yang baru saja kita buat, seperti yang ditunjukkan pada sintaks berikut: tibble( x = 1:20, y = 1, z = 2*x+5*y ) ## # A tibble: 20 x 3 ## x y z ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 7 ## 2 2 1 9 ## 3 3 1 11 ## 4 4 1 13 ## 5 5 1 15 ## 6 6 1 17 ## 7 7 1 19 ## 8 8 1 21 ## 9 9 1 23 ## 10 10 1 25 ## 11 11 1 27 ## 12 12 1 29 ## 13 13 1 31 ## 14 14 1 33 ## 15 15 1 35 ## 16 16 1 37 ## 17 17 1 39 ## 18 18 1 41 ## 19 19 1 43 ## 20 20 1 45 Jika pembaca telah mulai familiar dengan fungsi data.frame(), perlu diingat bahwa tibble() melakukan lebih sedikit: tidak pernah mengubah jenis input (mis., tidak pernah mengubah string menjadi faktor!), tidak pernah mengubah nama variabel, dan tidak pernah membuat nama baris seperti yang biasa terjadi saat kita menggunakan fungsi data.frame(). Cara lain yang dapat digunakan untuk membuat tibble adalah dengan menggunakan fungsi tribble() yang merupakan singkatan dari transposed tibble. tribble() dikustomisasi untuk entri data dalam kode: judul kolom didefinisikan oleh rumus (yaitu, mereka mulai dengan ~), dan entri dipisahkan oleh koma. Hal ini memungkinkan untuk menata sejumlah kecil data dalam bentuk yang mudah dibaca. Berikut adalah contoh penerapannya: tribble( ~x, ~y, ~z, #--/--/---- &quot;a&quot;, 2, 5, &quot;b&quot;, 5, 7 ) ## # A tibble: 2 x 3 ## x y z ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 a 2 5 ## 2 b 5 7 Penambahahan komen (#–/–/—-) dilakukan untuk memperjelas posisi dari header sehingga meminimalisir kesalahan dalam input data. 3.3.2 Tibble vs Data Frame terdapat dua buah perbedaan utama antara tibble dan data frame , yaitu: printing dan subsetting. Printing Tibbles memiliki metode print halus yang hanya menampilkan 10 baris pertama observasi, dan semua kolom yang sesuai dengan lebar layar. Ini membuatnya lebih mudah untuk bekerja dengan data besar. Selain namanya, setiap kolom melaporkan jenis datanya, fitur bagus yang dipinjam dari fungsi str(). Berikut adalah contohnya: tribble( ~x, ~y, ~z, #--/---/-------- &quot;a&quot;, 2.1, FALSE, &quot;b&quot;, 5.5, TRUE ) ## # A tibble: 2 x 3 ## x y z ## &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; ## 1 a 2.1 FALSE ## 2 b 5.5 TRUE Tibbles dirancang agar kita tidak secara sengaja menampilkan data yang sangat banyak saat melakukan perintah print(). Tetapi terkadang kita membutuhkan lebih banyak output daripada tampilan default. Ada beberapa opsi yang dapat membantu. Pertama, kita dapat secara eksplisit melakukan print data frame dan mengontrol jumlah baris (n) dan lebar tampilan. width = Inf akan menampilkan semua kolom. Berikut adalah contoh penerapannya print(iris_tbl, n=15, width=Inf) ## # A tibble: 150 x 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 ## 7 4.6 3.4 1.4 0.3 ## 8 5 3.4 1.5 0.2 ## 9 4.4 2.9 1.4 0.2 ## 10 4.9 3.1 1.5 0.1 ## 11 5.4 3.7 1.5 0.2 ## 12 4.8 3.4 1.6 0.2 ## 13 4.8 3 1.4 0.1 ## 14 4.3 3 1.1 0.1 ## 15 5.8 4 1.2 0.2 ## Species ## &lt;fct&gt; ## 1 setosa ## 2 setosa ## 3 setosa ## 4 setosa ## 5 setosa ## 6 setosa ## 7 setosa ## 8 setosa ## 9 setosa ## 10 setosa ## 11 setosa ## 12 setosa ## 13 setosa ## 14 setosa ## 15 setosa ## # ... with 135 more rows Kita juga dapat mengontrol print default dengan melakukan pengaturan menggunakan fungsi options(). Berikut adalah contoh penerapannya: options(tibble.print_max= n, tibble.print_min= m): jika terdapat lebih dari “m” baris, print hanya sejumlah “n” baris. options(dplyr.print_min = Inf): untuk selalu menampilkan seluruh baris. Perlu diingat fungsi ini dapat digunakan saat kita telah memuat library dplyr. options(tibble.width = Inf): menampilkan seluruh kolom tanpa mempedulikan lebar tampilan layar. Cara terakhir untuk menampilkan seluruh observasi adalh dengan fungsi view(). Berikut adalah contoh penerapannya pada data iris_tbl: view(iris_tbl) Subsetting Sejauh ini semua alat yang kita pelajari telah bekerja dengan data frame yang lengkap. Jika kita ingin mengeluarkan variabel tunggal, kita memerlukan beberapa alat baru, dollar sign ($) dan [[. [[dapat mengekstraksi berdasarkan nama atau posisi; $ hanya mengekstraksi berdasarkan nama. Berikut adalah contoh penerapannya: # print tibble iris_tbl ## # A tibble: 150 x 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 ## 7 4.6 3.4 1.4 0.3 ## 8 5 3.4 1.5 0.2 ## 9 4.4 2.9 1.4 0.2 ## 10 4.9 3.1 1.5 0.1 ## # ... with 140 more rows, and 1 more variable: ## # Species &lt;fct&gt; # subset berdasarkan nama kolom iris_tbl$Sepal.Length ## [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 ## [13] 4.8 4.3 5.8 5.7 5.4 5.1 5.7 5.1 5.4 5.1 4.6 5.1 ## [25] 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 ## [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 ## [49] 5.3 5.0 7.0 6.4 6.9 5.5 6.5 5.7 6.3 4.9 6.6 5.2 ## [61] 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 ## [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 ## [85] 5.4 6.0 6.7 6.3 5.6 5.5 5.5 6.1 5.8 5.0 5.6 5.7 ## [97] 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 ## [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 ## [121] 6.9 5.6 7.7 6.3 6.7 7.2 6.2 6.1 6.4 7.2 7.4 7.9 ## [133] 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 ## [145] 6.7 6.7 6.3 6.5 6.2 5.9 #subset berdasarkan posisi iris_tbl[[1]] ## [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 ## [13] 4.8 4.3 5.8 5.7 5.4 5.1 5.7 5.1 5.4 5.1 4.6 5.1 ## [25] 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 ## [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 ## [49] 5.3 5.0 7.0 6.4 6.9 5.5 6.5 5.7 6.3 4.9 6.6 5.2 ## [61] 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 ## [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 ## [85] 5.4 6.0 6.7 6.3 5.6 5.5 5.5 6.1 5.8 5.0 5.6 5.7 ## [97] 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 ## [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 ## [121] 6.9 5.6 7.7 6.3 6.7 7.2 6.2 6.1 6.4 7.2 7.4 7.9 ## [133] 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 ## [145] 6.7 6.7 6.3 6.5 6.2 5.9 Dibandingkan dengan data frame, tibble lebih ketat: tibble tidak pernah melakukan partial matching, dan mereka akan menghasilkan peringatan jika kolom yang kita coba akses tidak ada. 3.4 Merapikan Data Sebelum memulai analisa terhadap data yang kita miliki, umumnya kita akan merapikan data yang akan kita gunakan. Tujuannya adalah agar data yang akan digunakan sudah siap untuk dilakukan analisa dengan software tertentu seperti R, dimana pada dataset perlu jelas antara variabel dan nilai (value), serta untuk mempermudah dalah memperoleh informasi pada data. Berikut adalah beberapa contoh dataset yang dapat pembaca cermati terkait manakah data yang telah rapi (tidy data) dan mana yang belum (messy data): # Install paket dataset EDAWR # install.packages(&quot;devtools&quot;) # devtools::install_github(&quot;rstudio/EDAWR&quot;) # hilangkan tanda # jika pembaca belum menginstall library(EDAWR) ## ## Attaching package: &#39;EDAWR&#39; ## The following objects are masked _by_ &#39;.GlobalEnv&#39;: ## ## a, b, y, z # memuat dataset storms &lt;- EDAWR::storms cases ## country 2011 2012 2013 ## 1 FR 7000 6900 7000 ## 2 DE 5800 6000 6200 ## 3 US 15000 14000 13000 pollution ## city size amount ## 1 New York large 23 ## 2 New York small 14 ## 3 London large 22 ## 4 London small 16 ## 5 Beijing large 121 ## 6 Beijing small 56 Sebelum kita melakukan analisa di dataset tersebut, kita harus tahu terlebih dahulu apa saja syarat suatu dataset dikatakan rapi (tidy). Berikut adalah syaratnya: Setiap variabel harus memiliki kolomnya sendiri Setiap observasi harus memiliki barisnya sendiri Setiap nilai berada pada sel tersendiri Ketiga syarat tersebut saling berhubungan sehingga jika salah satu syarat tersebut tidak terpenuhi, maka dataset belum bisa dikatakan tidy. Ketiga syarat tersebut dapat divisualisasikan melalui Gambar 3.1 Gambar 3.1: Visualisasi 3 rule tidy data Pada dataset storms terdapat 4 buah kolom dan 6 buah baris. Masing-masing kolom menyatakan variabel pada masing-masing observasi seperti nama badai , kecepatan angin, tekanan dan waktu . Ketiga syarat kerapihan data sudah terpenuhi pada data tersebut sehingga kita bisa melakukan analisa terhadap data tersebut, misalnya kecepatan angin dan tekanan pada masing-masing badai. Selain itu kita juga dapat dengan mudah menginput variabel baru pada dataset tersebut, misal: rasio (kecepatan angin/tekanan). Berikut adalah contoh bagaimana kita dapat dengan mudah menarik nilai variabel pada masing-masing kolom dan membentuk variabel baru pada dataset tersebut: # subset variabel storms$storm ## [1] &quot;Alberto&quot; &quot;Alex&quot; &quot;Allison&quot; &quot;Ana&quot; &quot;Arlene&quot; ## [6] &quot;Arthur&quot; storms$wind ## [1] 110 45 65 40 50 45 storms$pressure ## [1] 1007 1009 1005 1013 1010 1010 storms$date ## [1] &quot;2000-08-03&quot; &quot;1998-07-27&quot; &quot;1995-06-03&quot; &quot;1997-06-30&quot; ## [5] &quot;1999-06-11&quot; &quot;1996-06-17&quot; # membuat variabel baru storms_new &lt;- storms storms_new$ratio &lt;- storms_new$wind/storms_new$pressure storms_new ## storm wind pressure date ratio ## 1 Alberto 110 1007 2000-08-03 0.10924 ## 2 Alex 45 1009 1998-07-27 0.04460 ## 3 Allison 65 1005 1995-06-03 0.06468 ## 4 Ana 40 1013 1997-06-30 0.03949 ## 5 Arlene 50 1010 1999-06-11 0.04950 ## 6 Arthur 45 1010 1996-06-17 0.04455 Pada dataset cases terdapat 3 buah kolom dan 3 baris. Pada kolom pertama berupa kode Negara, sedangkan kolom sisanya merupakan tahun. Jika kita perhatikan dengan seksama dataset tersebut merupakan sebuah contingency table dimana tabel tersebut menyatakan frekuensi kejadian pada tahun tertentu dan negara tertentu. Dataset tersebut belum dapat dikatan tidy karena kolom 2011 sampai 2013 merupakan sebuah nilai dari observasi dan bukan sebuah variabel sehingga dataset tersebut masih tergolong dataset messy. Selain itu sangat sulit untuk dilakukan penarikan terhadap nilai pada setiap kolom serta pembentukan variabel baru sebagai pendukung analisa juga sulit dilakukan. Berikut adalah contoh melakukan penarikan nilai / subset pada masing variabel: cases$country ## [1] &quot;FR&quot; &quot;DE&quot; &quot;US&quot; names(cases[-1]) ## [1] &quot;2011&quot; &quot;2012&quot; &quot;2013&quot; unlist(cases[1:3, 2:4]) ## 20111 20112 20113 20121 20122 20123 20131 20132 20133 ## 7000 5800 15000 6900 6000 14000 7000 6200 13000 Pada dataset pollutionterdapat 3 buah kolom dan 6 baris. Masing-masing kolom menyatakan lokasi berupa nama kota, keterangan ukuran partikel, serta nilai dari ukuran partikel. Beberapa dari kita mungkin menganggap dataset ini telah memenuhi syarat kerapihan data. Namun, coba kita cermati jika mita ingin membuat variabel baru terkait dengan berapa rentang ukuran partikel (range ukuran partikel) pada masing-masing kota. Hal tersebut tentu sangat sulit dilakukan pada dataset tersebut, namun dataset tersebut memungkinkan kita dengan mudah mengambil nilai dari masing-masing variabelnya seperti contoh berikut: pollution$city ## [1] &quot;New York&quot; &quot;New York&quot; &quot;London&quot; &quot;London&quot; ## [5] &quot;Beijing&quot; &quot;Beijing&quot; pollution$size ## [1] &quot;large&quot; &quot;small&quot; &quot;large&quot; &quot;small&quot; &quot;large&quot; &quot;small&quot; pollution$amount ## [1] 23 14 22 16 121 56 Berdasarkan contoh-contoh tersebut pada pembahasan kali ini penulis akan menjelaskan bagaiman cara melakukan perapihan data menggunakan library tidyr. Sebelum kita melakukannya berikut adalah sintaks untuk menginstall library tersebut: # memasang paket install.packages(&quot;tidyr&quot;) # memuat paket library(tidyr) ## Warning: package &#39;tidyr&#39; was built under R version ## 3.5.3 3.4.1 Gather Pada dataset cases kolom 2011 sampai 2013 perlu dijadikan satu variabel yaitu tahun. untuk melakukannya kita dapat menggunakan fungsi gather(). Secara sederhana fungsi tersebut dapat dituliskan dengan format sebagai berikut: gather(data, key, value, ...) Note: data: data frame key, value: nama kunci dan kolom nilai yang akan dibuat di output …: Spesifikasi kolom untuk dikumpulkan. Nilai yang diizinkan adalah: nama variabel jika kita ingin memilih semua variabel antara a dan e, gunakan a:e jika kita ingin mengecualikan nama kolom y gunakan -y untuk opsi lainnya, lihat: dplyr::select() Berikut adalah contoh penerapannya pada dataset cases: # Ubah dataset cases menjadi tibble simpan sebagai objek cases_new library(tibble) cases_tbl &lt;- as_tibble(cases) # print cases_tbl ## # A tibble: 3 x 4 ## country `2011` `2012` `2013` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 FR 7000 6900 7000 ## 2 DE 5800 6000 6200 ## 3 US 15000 14000 13000 # gather cases_new &lt;- gather(cases_tbl, # variabel kunci key = &quot;year&quot;, # nilai variabel value = &quot;frequency&quot;, # kecualikan kolom country -country) # print cases_new ## # A tibble: 9 x 3 ## country year frequency ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 FR 2011 7000 ## 2 DE 2011 5800 ## 3 US 2011 15000 ## 4 FR 2012 6900 ## 5 DE 2012 6000 ## 6 US 2012 14000 ## 7 FR 2013 7000 ## 8 DE 2013 6200 ## 9 US 2013 13000 Berdasarkan hasil yang diperoleh terlihat bahwa variabel tahun memiliki jenis data karakter. Jenis data ini masih belum sesuai sehingga perlu dikonversi agar menjadi jenis data numerik (dbl = double). Untuk melakukannya jalankan sintaks berikut: # Ubah jenis variabel tahun menjadi numerik cases_new$year &lt;- as.numeric(cases_new$year) cases_new ## # A tibble: 9 x 3 ## country year frequency ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 FR 2011 7000 ## 2 DE 2011 5800 ## 3 US 2011 15000 ## 4 FR 2012 6900 ## 5 DE 2012 6000 ## 6 US 2012 14000 ## 7 FR 2013 7000 ## 8 DE 2013 6200 ## 9 US 2013 13000 Data yang diperoleh sekaran telah rapi (tidy), sehingga sudah siap untuk dilakukan analisa data. 3.4.2 Spread Fungsi spread() berkebalikan dengan gather(). Fungsi gather() menggabungkan beberapa kolom menjadi 2 buah kolom kolom kunci sedangkan spread() merubah dua kolom menjadi beberapa kolom. Format sederhanya adalah sebagai berikut: Note: data: data frame key: nama kolom yang akan dijadikan heading pada kolom baru value: nama kolom yang nilainya akan mengisi setiap sel Pada contoh kasus pada data pollution, kita dapat memisahkan kolom 2 menjadi kolom baru yaitu kolom big size dan small size. Untuk melakukannya jalankan sintaks berikut: # merubah objek pollution menjadi tibble pollution_tbl &lt;- as_tibble(pollution) # print pollution_tbl ## # A tibble: 6 x 3 ## city size amount ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 New York large 23 ## 2 New York small 14 ## 3 London large 22 ## 4 London small 16 ## 5 Beijing large 121 ## 6 Beijing small 56 # spread pollution_new &lt;- spread(pollution_tbl, key = size, value = amount) #print pollution_new ## # A tibble: 3 x 3 ## city large small ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Beijing 121 56 ## 2 London 22 16 ## 3 New York 23 14 Terlihat bahwa data pollution tampak memnuhi syarat kerapihan data (tidy). Kita sekarang dapat menginput variabel baru dan melakukan analisa terhadap data tersebut. Berikut adalah contoh penerapannya: # input variabel range (large-small) pollution_new$range &lt;- pollution_new$large - pollution_new$small # print pollution_new ## # A tibble: 3 x 4 ## city large small range ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Beijing 121 56 65 ## 2 London 22 16 6 ## 3 New York 23 14 9 Berdasarkan hasil yang diperoleh diketahui bahwa nilai range ukuran partikel terbesar berada di Kota Beijing. 3.4.3 Separate Fungsi separate() merupakan fungsi yang digunakan untuk memisahkan sejumlah nilai pada sebuah kolom menjadi beberapa kolom berdasarkan karakter pemisah yang ada di dalam nilai suatu kolom. Fungsi ini berbeda dengan fungsi sebelumnya seperti gather() dan spread() yang menggabung atau memisahkan 2 atau beberapa kolom. Format sederhana fungsi separate() adalah sebagai berikut: separate(data, col, into, sep = &quot;[^[:alnum:]]+&quot;, convert= TRUE) Note: data: data frame. col: Nama kolom yang tidak dikutip. into: Vektor karakter menentukan nama variabel baru yang akan dibuat. sep: Pemisah antar kolom: Jika karakter, diartikan sebagai ekspresi reguler. Jika numerik, diartikan sebagai posisi untuk dibelah. Nilai-nilai positif mulai dari 1 di ujung kiri string; nilai negatif mulai dari -1 di ujung kanan string. convert: nilai logik. Jika bernilai TRUE maka kolom baru yang akan diperoleh akan dikonversi berdasarkan jenis data yang seharusnya. Pada dataset storms kita ingin memisahkan kolom date menjadi beberapa kolom seperti year, month, dan day, Kita dapat menggunakan fungsi separate() untuk memisahkan nilai pada kolom tersebut berdasarkan karakter pemisah pada nilai kolom tersebut dalam hal ini adalah “-”. Berikut adalah cara melakukannya: # merubah storms menjadi tibble storms_tbl &lt;- as_tibble(storms) # print storms_tbl ## # A tibble: 6 x 4 ## storm wind pressure date ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;date&gt; ## 1 Alberto 110 1007 2000-08-03 ## 2 Alex 45 1009 1998-07-27 ## 3 Allison 65 1005 1995-06-03 ## 4 Ana 40 1013 1997-06-30 ## 5 Arlene 50 1010 1999-06-11 ## 6 Arthur 45 1010 1996-06-17 # separate storms_new &lt;- separate(storms_tbl, col = date, into = c(&quot;year&quot;,&quot;month&quot;,&quot;days&quot;), sep = &quot;-&quot;, convert = TRUE) # print storms_new ## # A tibble: 6 x 6 ## storm wind pressure year month days ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 Alberto 110 1007 2000 8 3 ## 2 Alex 45 1009 1998 7 27 ## 3 Allison 65 1005 1995 6 3 ## 4 Ana 40 1013 1997 6 30 ## 5 Arlene 50 1010 1999 6 11 ## 6 Arthur 45 1010 1996 6 17 Berdasarkan hasil yang diperoleh terlihat bahwa data telah terpisah dengan benar yang ditunjukkan dari nilai yang terpisah dan jenis data yang dihasilkan. 3.4.4 Unite Fungsi unite() merupakan kebalikan dari fungsi separate(), dimana fungsi ini menggabungkan sejumlah kolom menjadi 1 kolom. Format sederhana untuk melakukanya disajikan sebagai berikut: unite(data, col, ..., sep = &quot;_&quot;) Note: data: data frame. col: nama kolom baru (tanpa tanda kutip) untuk ditambahkan. sep: pemisah yang akan digunakan pada antar nilai. Pada dataset storms_new kita ingin menggabungkan kembali kolom year, month, dan days dengan karakter pemisah “/”. Berikut adalah cara melakukannya: # unite storms_old &lt;- unite(storms_new, col = &quot;date&quot;, year, month, days, sep = &quot;-&quot;) # print storms_old ## # A tibble: 6 x 4 ## storm wind pressure date ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; ## 1 Alberto 110 1007 2000-8-3 ## 2 Alex 45 1009 1998-7-27 ## 3 Allison 65 1005 1995-6-3 ## 4 Ana 40 1013 1997-6-30 ## 5 Arlene 50 1010 1999-6-11 ## 6 Arthur 45 1010 1996-6-17 # ubah jenis kolom menjadi date storms_old$date &lt;- as.Date(storms_old$date) # print storms_old ## # A tibble: 6 x 4 ## storm wind pressure date ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;date&gt; ## 1 Alberto 110 1007 2000-08-03 ## 2 Alex 45 1009 1998-07-27 ## 3 Allison 65 1005 1995-06-03 ## 4 Ana 40 1013 1997-06-30 ## 5 Arlene 50 1010 1999-06-11 ## 6 Arthur 45 1010 1996-06-17 3.5 Transformasi Data Data frame merupakan struktur data utama dalam statistik dan dalam R. Struktur dasar data frame ialah ada satu observasi tiap baris dan setiap kolom mewakili variabel, ukuran, fitur, atau karakteristik pengamatan itu yang telah dijelaskan pada bagian sebelumya. R memiliki implementasi internal data frame yang kemungkinan besar akan kita gunakan paling sering. Namun, ada paket di CRAN yang mengimplementasikan data frame layaknya basis data relasional yang memungkinkan kita untuk beroperasi pada data frame yang sangat besar. Mengingat pentingnya mengelola dat frame, penting bagi kita untuk memiliki alat yang baik untuk melakukannya. R memiliki beberapa paket seperti fungsi subset() dan penggunaan operator “[” dan “$” untuk mengekstrak himpunan bagian dari frame data. Namun, operasi lain, seperti pemfilteran, pengurutan, dan pengelompokan data, seringkali dapat menjadi operasi yang membosankan di R yang sintaksisnya tidak terlalu intuitif. Paket dplyr dirancang untuk mengurangi banyak masalah ini dan menyediakan serangkaian rutinitas yang dioptimalkan secara khusus untuk menangani data frame. 3.5.1 Paket dplyr Paket dplyr dikembangkan oleh Hadley Wickham dari RStudio dan merupakan versi yang dioptimalkan dari paket plyr-nya. Paket dplyr tidak menyediakan fungsionalitas baru untuk R sendiri, dalam arti bahwa semua yang dilakukan dplyr sudah dapat dilakukan dengan fungsi basis R, tetapi sangat menyederhanakan fungsi yang ada di R. Salah satu kontribusi penting dari paket dplyr adalah ia menyediakan “grammar” (khususnya, kata kerja) untuk manipulasi data dan untuk beroperasi pada data frame. Melalui grammar ini, kita dapat berkomunikasi dengan masuk akal apa yang telah kita lakukan terhadap data frame dapat pula dipahami orang lain (dengan asumsi mereka juga tahu grammar-nya). Hal ini berguna karena memberikan abstraksi untuk manipulasi data yang sebelumnya tidak ada. Kontribusi lain yang bermanfaat adalah bahwa fungsi dplyr sangat cepat, karena banyak operasi utama dikodekan dalam C++. Pada bagian ini pembaca akan belajar 6 fungsi utama yang ada pada paket dplyr. Fungsi tersebut antara lain: Mengambil sejumlah observasi berdasarkan nilainya (filter()). Mengurutkan kembali baris data frame berdasarkan nilai pada sebuah atau beberapa variabel (arrange()). Mengambil atau subset terhadap sebuah atau beberapa variabel berdasarkan nama variabel/kolom (select()). Membuat variabel baru atau menambahkan kolom baru (mutate()). Membuat ringkasan terhadap data frame (summarize()) Mengelompokkan operasi berdasarkan grup data (group_by()). Keseluruhan fungsi tersebut format fungsi yang seragam, yaitu: Argumen pertama adalah data frame. Argumen selanjutnya adalah deskripsi yang akan dilakukan terhadap data frame (filter, pengurutan kembali, membuat ringkasan, dll) menggunakan nama variabel (tanpa tanda kutip). Hasil operasi yang diperoleh adalah data frame baru. Untuk menginstall dan memuat paket dplyr jalankan sintaks berikut: # Memasang paket install.packages(&quot;dplyr&quot;) # memuat paket library(dplyr) 3.5.2 filter() Fungsi filter() digunakan untuk mengekstrak himpunan bagian (subset) baris dari data frame. Fungsi ini mirip dengan fungsi subset() yang ada di R. Secara sederhana format fungsi filter() dapat dituliskan sebagai berikut: filter(data, ....) Note: data : data frame …. : Predikat logis didefinisikan dalam istilah variabel dalam data. Beberapa kondisi digabungkan dengan &amp; (lihat Chapter 2 opeator relasi dan operator logika. Hanya baris tempat kondisi bernilai TRUE disimpan. Misalkan kita akan melakukan melakukan filter terhadap data frame pollution_tbl terhadap variabel size dengan kriteria large dan amount &gt; 12. Berikut adalah sintaks yang digunakan: filter(pollution_tbl, size==&quot;large&quot; &amp; amount &gt; 12) ## # A tibble: 3 x 3 ## city size amount ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 New York large 23 ## 2 London large 22 ## 3 Beijing large 121 Jika menggunakan paket dasar R: subset(pollution_tbl,size==&quot;large&quot; &amp; amount &gt; 12) ## # A tibble: 3 x 3 ## city size amount ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 New York large 23 ## 2 London large 22 ## 3 Beijing large 121 Operator “&gt;” merupakan operator relasi (lihat chapter 2: operator relasi). Operator tersebut banyak digunakan untuk melakukan filter terhadap variabel/kolom yang mengandung nilai numerik. Operator “==” merupakan operator logika (lihat chapter 2: operator logika). Operator tersebut digunakan untuk melakukan filter terhadap sejumlah syarat atau kondisi yang kita tetapkan. Jika nilai yang dihasilkan TRUE, maka hanya observasi tersebut yang akan ditampilkan. Untuk lebih memahami penerapan masing-masing operator logika pada proses filter perhatikan Gambar 3.2 berikut: Gambar 3.2: Diagram operasi Boolean Note: Bagian yang di arsir adalah observasi yang akan ditampilkan pada output. Salah satu bagian terpenting dan paling sering penulis gunakan pada fungsi ini memfilter missing value (melihat observasi yang mengandung missing value atau tidak melibatkan missing value). Berikut adalah contoh filter terhadap data pada pollution_tbl yang tidak mengandung missing value dan nilai amount&gt;0. filter(pollution_tbl,!(is.na(amount)|amount&lt;=0)) ## # A tibble: 6 x 3 ## city size amount ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 New York large 23 ## 2 New York small 14 ## 3 London large 22 ## 4 London small 16 ## 5 Beijing large 121 ## 6 Beijing small 56 Berdasarkan hasil yang diperoleh seluruh data tidak ada yang di drop sehingga dapat disimpulkan bahwa data tersebut tidak mengandung missing value dan nol. 3.5.3 arrange() Fungsi arrange() bekerja mirip dengan fungsi filter() kecuali bahwa alih-alih memilih baris, fungsi ini mengubah urutan observasinya (mengurutkan dari yang terbesar atau sebaliknya). Dibutuhkan data frame dan sekumpulan nama kolom (atau ekspresi yang lebih rumit) untuk dipesan. Jika kita memberikan lebih dari satu nama kolom pada fungsi, setiap kolom tambahan akan digunakan untuk menentukan urutan nilai yang sama berdasarkan nilai kolom sebelumnya. Fungsi arrange() mirip dengan fungsi order() pada paket dasar R. Format sederhana fungsi ini adalah sebagai berikut: arrange(data, ....) Note: data : data frame …. : daftar nama variabel yang tidak dikutip yang dipisahkan tanda koma, atau ekspresi yang melibatkan nama variabel. Gunakan desc() untuk mengurutkan variabel dalam urutan menurun. Misalkan kita ingin melihat urutan mobil pada data mtcars berdasarkan penggunaan bahan bakar (mpg) dan bobot mobil (wt) tersebut. Berikut adalah sintaks yang digunakan: data(&quot;mtcars&quot;) # Ubah mtcars menjadi tibble mtcars&lt;- as_tibble(mtcars) arrange(mtcars, mpg, wt) ## # A tibble: 32 x 11 ## mpg cyl disp hp drat wt qsec vs ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 10.4 8 472 205 2.93 5.25 18.0 0 ## 2 10.4 8 460 215 3 5.42 17.8 0 ## 3 13.3 8 350 245 3.73 3.84 15.4 0 ## 4 14.3 8 360 245 3.21 3.57 15.8 0 ## 5 14.7 8 440 230 3.23 5.34 17.4 0 ## 6 15 8 301 335 3.54 3.57 14.6 0 ## 7 15.2 8 304 150 3.15 3.44 17.3 0 ## 8 15.2 8 276. 180 3.07 3.78 18 0 ## 9 15.5 8 318 150 2.76 3.52 16.9 0 ## 10 15.8 8 351 264 4.22 3.17 14.5 0 ## # ... with 22 more rows, and 3 more variables: ## # am &lt;dbl&gt;, gear &lt;dbl&gt;, carb &lt;dbl&gt; Jika ingin urutan yang digunakan adalah dari yang terbesar ke terkecil untuk kedua variabel tersebut jalankan sintaks berikut: arrange(mtcars, desc(mpg), desc(wt)) ## # A tibble: 32 x 11 ## mpg cyl disp hp drat wt qsec vs ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 33.9 4 71.1 65 4.22 1.84 19.9 1 ## 2 32.4 4 78.7 66 4.08 2.2 19.5 1 ## 3 30.4 4 75.7 52 4.93 1.62 18.5 1 ## 4 30.4 4 95.1 113 3.77 1.51 16.9 1 ## 5 27.3 4 79 66 4.08 1.94 18.9 1 ## 6 26 4 120. 91 4.43 2.14 16.7 0 ## 7 24.4 4 147. 62 3.69 3.19 20 1 ## 8 22.8 4 141. 95 3.92 3.15 22.9 1 ## 9 22.8 4 108 93 3.85 2.32 18.6 1 ## 10 21.5 4 120. 97 3.7 2.46 20.0 1 ## # ... with 22 more rows, and 3 more variables: ## # am &lt;dbl&gt;, gear &lt;dbl&gt;, carb &lt;dbl&gt; Jika menggunakan fungsi order(): attach(mtcars) # urutan dari kecil ke besar mtcars[order(mpg, wt), ] ## # A tibble: 32 x 11 ## mpg cyl disp hp drat wt qsec vs ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 10.4 8 472 205 2.93 5.25 18.0 0 ## 2 10.4 8 460 215 3 5.42 17.8 0 ## 3 13.3 8 350 245 3.73 3.84 15.4 0 ## 4 14.3 8 360 245 3.21 3.57 15.8 0 ## 5 14.7 8 440 230 3.23 5.34 17.4 0 ## 6 15 8 301 335 3.54 3.57 14.6 0 ## 7 15.2 8 304 150 3.15 3.44 17.3 0 ## 8 15.2 8 276. 180 3.07 3.78 18 0 ## 9 15.5 8 318 150 2.76 3.52 16.9 0 ## 10 15.8 8 351 264 4.22 3.17 14.5 0 ## # ... with 22 more rows, and 3 more variables: ## # am &lt;dbl&gt;, gear &lt;dbl&gt;, carb &lt;dbl&gt; # urutan dari besar ke kecil mtcars[order(-mpg, -wt), ] ## # A tibble: 32 x 11 ## mpg cyl disp hp drat wt qsec vs ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 33.9 4 71.1 65 4.22 1.84 19.9 1 ## 2 32.4 4 78.7 66 4.08 2.2 19.5 1 ## 3 30.4 4 75.7 52 4.93 1.62 18.5 1 ## 4 30.4 4 95.1 113 3.77 1.51 16.9 1 ## 5 27.3 4 79 66 4.08 1.94 18.9 1 ## 6 26 4 120. 91 4.43 2.14 16.7 0 ## 7 24.4 4 147. 62 3.69 3.19 20 1 ## 8 22.8 4 141. 95 3.92 3.15 22.9 1 ## 9 22.8 4 108 93 3.85 2.32 18.6 1 ## 10 21.5 4 120. 97 3.7 2.46 20.0 1 ## # ... with 22 more rows, and 3 more variables: ## # am &lt;dbl&gt;, gear &lt;dbl&gt;, carb &lt;dbl&gt; Note: missing value akan selalu diurutkan pada observasi terakhir baik menggunakan urutan dari terbesar ke terkecil maupun sebaliknya. 3.5.4 select() Fungsi select() dapat digunakan untuk memilih kolom dari data frame yang ingin kita fokuskan. Seringkali kita memiliki data frame yang besar yang berisi semua data, tetapi setiap analisis yang diberikan hanya menggunakan subset variabel atau pengamatan. Fungsi select() memungkinkan kita untuk mendapatkan beberapa kolom yang mungkin kita butuhkan. Fungsi select() memiliki kesamaan dengan subset menggunakan tanda “[” dan “$”. Perbedaanya adalah kita dapat melakukan hal lebih melalui fungsi ini seperti memilih berdasarkan kriteria tertentu menggunakan fungsi bantuan sebagai berikut: starts_with(&quot;abcd&quot;), pilih kolom yang memiliki awalan “abcd”. end_with(&quot;abcd&quot;), pilih kolom yang memiliki akhiran “abcd”. contains(&quot;abcd&quot;), pilih kolom yang mengandung nama “abcd” matches(&quot;(.)\\\\1&quot;), pilih variabel yang mengandung regular expression. Fungsi ini memilih variabel yang mengandung perulangan karakter. num_range(&quot;x&quot;, 1:3), cocokkan berdasarkan kolom dengan nama x1,x2,x3. Berdasarkan fungsi bantuan tersebut, fungsi select() lebih powerfull dibandingkan dengan cara subset biasa serta lebih mudah dalam melakukannya. Berikut adalah format dari fungsi select(): select(data, ....) Note: data : data frame …. : Satu atau lebih ekspresi kutip yang dipisahkan oleh koma. kita dapat memperlakukan nama variabel seperti posisi, sehingga kita dapat menggunakan ekspresi seperti x: y untuk memilih rentang variabel.Nilai positif pilih variabel; nilai negatif drop variabel. Jika ekspresi pertama negatif, select() akan secara otomatis dimulai dengan semua variabel. Gunakan argumen bernama, mis. new_name = old_name, untuk mengganti nama variabel yang dipilih. Berikut adalah contoh penerapan selct() pada data frame flights. # memasang paket # install.packages(&quot;nycflights13&quot;) # memuat data frame library(nycflights13) ## Warning: package &#39;nycflights13&#39; was built under R ## version 3.5.3 # data flights ## # A tibble: 336,776 x 19 ## year month day dep_time sched_dep_time dep_delay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 544 545 -1 ## 5 2013 1 1 554 600 -6 ## 6 2013 1 1 554 558 -4 ## 7 2013 1 1 555 600 -5 ## 8 2013 1 1 557 600 -3 ## 9 2013 1 1 557 600 -3 ## 10 2013 1 1 558 600 -2 ## # ... with 336,766 more rows, and 13 more variables: ## # arr_time &lt;int&gt;, sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, ## # tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, ## # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; # pilih kolom berdasarkan nama kolom select(flights, year, month, day) ## # A tibble: 336,776 x 3 ## year month day ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 ## 2 2013 1 1 ## 3 2013 1 1 ## 4 2013 1 1 ## 5 2013 1 1 ## 6 2013 1 1 ## 7 2013 1 1 ## 8 2013 1 1 ## 9 2013 1 1 ## 10 2013 1 1 ## # ... with 336,766 more rows # pilih seluruh kolom dari year sampai day select(flights, year:day) ## # A tibble: 336,776 x 3 ## year month day ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 ## 2 2013 1 1 ## 3 2013 1 1 ## 4 2013 1 1 ## 5 2013 1 1 ## 6 2013 1 1 ## 7 2013 1 1 ## 8 2013 1 1 ## 9 2013 1 1 ## 10 2013 1 1 ## # ... with 336,766 more rows # drop kolom dari year sampai day select(flights, -(year:day)) ## # A tibble: 336,776 x 16 ## dep_time sched_dep_time dep_delay arr_time ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 517 515 2 830 ## 2 533 529 4 850 ## 3 542 540 2 923 ## 4 544 545 -1 1004 ## 5 554 600 -6 812 ## 6 554 558 -4 740 ## 7 555 600 -5 913 ## 8 557 600 -3 709 ## 9 557 600 -3 838 ## 10 558 600 -2 753 ## # ... with 336,766 more rows, and 12 more variables: ## # sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, ## # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, ## # distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, ## # time_hour &lt;dttm&gt; # pilih kolom dengan akhiran time select(flights, ends_with(&quot;time&quot;)) ## # A tibble: 336,776 x 5 ## dep_time sched_dep_time arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 517 515 830 819 ## 2 533 529 850 830 ## 3 542 540 923 850 ## 4 544 545 1004 1022 ## 5 554 600 812 837 ## 6 554 558 740 728 ## 7 555 600 913 854 ## 8 557 600 709 723 ## 9 557 600 838 846 ## 10 558 600 753 745 ## # ... with 336,766 more rows, and 1 more variable: ## # air_time &lt;dbl&gt; # pilih kolom yang mengandung karakter &quot;arr&quot; select(flights, contains(&quot;arr&quot;)) ## # A tibble: 336,776 x 4 ## arr_time sched_arr_time arr_delay carrier ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 830 819 11 UA ## 2 850 830 20 UA ## 3 923 850 33 AA ## 4 1004 1022 -18 B6 ## 5 812 837 -25 DL ## 6 740 728 12 UA ## 7 913 854 19 B6 ## 8 709 723 -14 EV ## 9 838 846 -8 B6 ## 10 753 745 8 AA ## # ... with 336,766 more rows Kita juga dapat menggunakan fungsi tambahan everithing() yang berguna jika kita ingin memindahkan variabel yang menjadi fokus kita ke awal data frame tanpa melakukan drop variabel. Berikut adalah contoh sintaksnya: # pindahkan kolom yang mengandung time di awal select(flights, contains(&quot;time&quot;), everything()) ## # A tibble: 336,776 x 19 ## dep_time sched_dep_time arr_time sched_arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 517 515 830 819 ## 2 533 529 850 830 ## 3 542 540 923 850 ## 4 544 545 1004 1022 ## 5 554 600 812 837 ## 6 554 558 740 728 ## 7 555 600 913 854 ## 8 557 600 709 723 ## 9 557 600 838 846 ## 10 558 600 753 745 ## # ... with 336,766 more rows, and 15 more variables: ## # air_time &lt;dbl&gt;, time_hour &lt;dttm&gt;, year &lt;int&gt;, ## # month &lt;int&gt;, day &lt;int&gt;, dep_delay &lt;dbl&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, ## # tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt; 3.5.5 mutate() Fungsi mutate() ada untuk menghitung transformasi variabel dalam data frame. Seringkali, kita ingin membuat variabel baru yang berasal dari variabel yang ada dan fungsi mutate() menyediakan antarmuka yang bersih untuk melakukan itu. Format yang digunakan adalah sebagai berikut: mutate(data, ....) Note: data : data frame …. : Pasangan nama-nilai ekspresi, masing-masing dengan panjang 1 atau panjang yang sama dengan jumlah baris dalam grup (jika menggunakan group_by ()) atau di seluruh input (jika tidak menggunakan grup). Nama setiap argumen akan menjadi nama variabel baru, dan nilainya akan menjadi nilai yang sesuai. Gunakan nilai NULL dalam mutasi untuk menjatuhkan drop variabel lama, sehingga variabel baru menimpa variabel yang ada dengan nama yang sama. # subset data frame flights_sml &lt;- select(flights, year:day, ends_with(&quot;delay&quot;), distance, air_time ) # mutate() mutate(flights_sml, gain = arr_delay - dep_delay, hours = air_time / 60, gain_per_hour = gain / hours ) ## # A tibble: 336,776 x 10 ## year month day dep_delay arr_delay distance ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2013 1 1 2 11 1400 ## 2 2013 1 1 4 20 1416 ## 3 2013 1 1 2 33 1089 ## 4 2013 1 1 -1 -18 1576 ## 5 2013 1 1 -6 -25 762 ## 6 2013 1 1 -4 12 719 ## 7 2013 1 1 -5 19 1065 ## 8 2013 1 1 -3 -14 229 ## 9 2013 1 1 -3 -8 944 ## 10 2013 1 1 -2 8 733 ## # ... with 336,766 more rows, and 4 more variables: ## # air_time &lt;dbl&gt;, gain &lt;dbl&gt;, hours &lt;dbl&gt;, ## # gain_per_hour &lt;dbl&gt; Jika hanya ingin menyisakan variabel output fungsi mutate() pada data frame (variabel lain di drop), kita dapat menggunakan fungsi transmute(). Berikut adalah contoh sintaks yang digunakan: transmute(flights, gain = arr_delay - dep_delay, hours = air_time / 60, gain_per_hour = gain / hours ) ## # A tibble: 336,776 x 3 ## gain hours gain_per_hour ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 9 3.78 2.38 ## 2 16 3.78 4.23 ## 3 31 2.67 11.6 ## 4 -17 3.05 -5.57 ## 5 -19 1.93 -9.83 ## 6 16 2.5 6.4 ## 7 24 2.63 9.11 ## 8 -11 0.883 -12.5 ## 9 -5 2.33 -2.14 ## 10 10 2.3 4.35 ## # ... with 336,766 more rows Adapaun fungsi-fungsi dan operator yang dapat digunakan pada mutate() untuk membuat variabel baru adalah sebagai berikut: Operator aritmatik (+,-,*,/,^, %/%, %%). operator aritmetik seperti %/% dan %% sangat berguna dalam memecah integer menjadi beberapa bagian seperti hasil bagi tanpa sisa (%/%) dan sisa hasil bagi (%%). Berikut adalah contoh penerapannya: transmute(flights, dep_time, hour = dep_time %/% 100, minute = dep_time %% 100 ) ## # A tibble: 336,776 x 3 ## dep_time hour minute ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 517 5 17 ## 2 533 5 33 ## 3 542 5 42 ## 4 544 5 44 ## 5 554 5 54 ## 6 554 5 54 ## 7 555 5 55 ## 8 557 5 57 ## 9 557 5 57 ## 10 558 5 58 ## # ... with 336,766 more rows Fungsi aritmetik (log(),sin(),cos(),dll) Fungsi Offsets (lead()dan lag()). memungkinkan kita untuk merujuk pada nilai-nilai memimpin atau tertinggal. Berikut adalah contoh penerapannya: (x &lt;- 1:10) ## [1] 1 2 3 4 5 6 7 8 9 10 lag(x) ## [1] NA 1 2 3 4 5 6 7 8 9 lead(x) ## [1] 2 3 4 5 6 7 8 9 10 NA Fungsi kumulatif (cumsum(),cumprod(),cummin(),cummax(), dan cummean()). Jika kita membutuhkan agregat bergulir (mis., Jumlah yang dihitung di atas jendela bergulir). Berikut adalah contoh penerapannya: x ## [1] 1 2 3 4 5 6 7 8 9 10 cumsum(x) ## [1] 1 3 6 10 15 21 28 36 45 55 cummean(x) ## [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 Operator logik (&lt;, &lt;=, &gt;, &gt;=, !=). Jika kita melakukan urutan operasi logis yang kompleks, seringkali ide yang baik untuk menyimpan nilai sementara dalam variabel baru sehingga kita dapat memeriksa bahwa setiap langkah berfungsi seperti yang diharapkan. Rangking (min_rank(), row_number(), dense_rank(), percent_rank(), cume_dist()dan ntile()). 3.5.6 summarize() dan group_by() Kita dapat membuat ringkasan data menggunakan fungsi summarize(). Fungsi tersebut akan merubah data frame menjadi sebuah baris berisi ringkasan data yang kita inginkan. Berikut adalh contoh penerapannya: summarize(flights, delay = mean(dep_delay, na.rm = TRUE)) ## # A tibble: 1 x 1 ## delay ## &lt;dbl&gt; ## 1 12.6 FUngsi ini akan lebih berguna saat digunakan dengan fungsi group_by() sehingga dapat diperoleh ringkasan data pada setiap grup. berikut adalah contoh penerapannya: by_day &lt;- group_by(flights, year, month, day) summarize(by_day, delay = mean(dep_delay, na.rm = TRUE)) ## # A tibble: 365 x 4 ## # Groups: year, month [12] ## year month day delay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 11.5 ## 2 2013 1 2 13.9 ## 3 2013 1 3 11.0 ## 4 2013 1 4 8.95 ## 5 2013 1 5 5.73 ## 6 2013 1 6 7.15 ## 7 2013 1 7 5.42 ## 8 2013 1 8 2.55 ## 9 2013 1 9 2.28 ## 10 2013 1 10 2.84 ## # ... with 355 more rows 3.5.7 Mengkombinasikan Beberapa Operasi Menggunakan Operator Pipe (%&gt;%) Operator pipa (%&gt;%) sangat berguna untuk merangkai bersama beberapa fungsi dplyr dalam suatu urutan operasi. Perhatikan contoh sebelumnya dimana setiap kali kita ingin menerapkan lebih dari satu fungsi, urutannya akan dimulai dalam urutan panggilan fungsi bersarang yang sulit dibaca. Secara ringkas dapat kita tulis sebagai berikut: third(second(first(x))) Jika dituliskan menggunakan operator pipa akan menghasilkan sintak berikut: x %&gt;% first() %&gt;% second() %&gt;% third() Dengan menuliskannya melalui cara tersebut kita dapat membacanya lebih mudah. Misal kita ingin mengetahui hubungan antara variabel jarak (dist) terhadap rata-rata delay (arr_delay). Langkah-langkah untuk melakukannya dengan menggunakan operator pipa adalah sebagai berikut: Kelompokkan penerbangan berdasarkan destinasinya (group_by()). Hitung ringkasan data berdasarkan jarak, rata-rata delay, dan jumlah penerbangan. Lakukan filter untuk membuang noisy point (jika diperlukan). Dalam hal ini jumlah penerbangan &gt; 20 dan tujuan penerbangan Honolulu (“HNL”) adalah outlier atau noisy point. Berikut adalah sintaks untuk melakukannya: # Tanpa pipe operator by_dest &lt;- group_by(flights, dest) delay &lt;- summarize(by_dest, count = n(), dist = mean(distance, na.rm = TRUE), delay = mean(arr_delay, na.rm = TRUE) ) delay &lt;- filter(delay, count &gt; 20, dest != &quot;HNL&quot;) # Dengan pipe operator library(magrittr) ## ## Attaching package: &#39;magrittr&#39; ## The following object is masked from &#39;package:tidyr&#39;: ## ## extract delays &lt;- flights %&gt;% group_by(dest) %&gt;% summarize( count = n(), dist = mean(distance, na.rm = TRUE), delay = mean(arr_delay, na.rm = TRUE) ) %&gt;% filter(count &gt; 20, dest != &quot;HNL&quot;) # Print delays ## # A tibble: 96 x 4 ## dest count dist delay ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ABQ 254 1826 4.38 ## 2 ACK 265 199 4.85 ## 3 ALB 439 143 14.4 ## 4 ATL 17215 757. 11.3 ## 5 AUS 2439 1514. 6.02 ## 6 AVL 275 584. 8.00 ## 7 BDL 443 116 7.05 ## 8 BGR 375 378 8.03 ## 9 BHM 297 866. 16.9 ## 10 BNA 6333 758. 11.8 ## # ... with 86 more rows ## ## Attaching package: &#39;ggplot2&#39; ## The following object is masked from &#39;mtcars&#39;: ## ## mpg ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; Gambar 3.3: Jarak vs rata-rata delay Berdasarkan Gambar 3.3, rata-rata delay meningkat seiring dengan pertambahan jarak penerbangan. 3.6 Referensi Wickham, H. Grolemund G. 2016. R For Data Science: Import, Tidy, Transform, Visualize, And Model Data. O’Reilly Media, Inc. Peng, R.D. 2015. Exploratory Data Analysis with R. Leanpub book. Dplyr Documentation. https://dplyr.tidyverse.org/ Quick-R. Data Input. https://www.statmethods.net/input/index.html Quick-R. Data Management. https://www.statmethods.net/management/index.html STHDA. Importing Data Into R . http://www.sthda.com/english/wiki/importing-data-into-r STHDA. Exporting Data From R. http://www.sthda.com/english/wiki/exporting-data-from-r "],
["visualisasi-data-menggunakan-fungsi-dasar-r.html", "Chapter 4 Visualisasi Data Menggunakan Fungsi Dasar R 4.1 Visualisasi Data Menggunakan Fungsi plot() 4.2 Matriks Scatterplot 4.3 Box plot 4.4 Bar Plot 4.5 Line Plot 4.6 Pie Chart 4.7 Histogram dan Density Plot 4.8 QQ Plot 4.9 Dot Chart 4.10 Kustomisasi Parameter Grafik 4.11 Alternatif Library Dasar Lain 4.12 Referensi", " Chapter 4 Visualisasi Data Menggunakan Fungsi Dasar R Visualisasi data merupakan bagian yang sangat penting untuk mengkomunikasikan hasil analisa yang telah kita lakukan. Selain itu, komunikasi juga membantu kita untuk memperoleh gambaran terkait data selama proses analisa data sehingga membantu kita dalam memutuskan metode analisa apa yang dapat kita terapkan pada data tersebut. R memiliki library visualisasi yang sangat beragam, baik yang merupakan fungsi dasar pada R maupun dari sumber lain seperti ggplot dan lattice. Seluruh library visualisasi tersebut memiliki kelebihan dan kekurangannya masing-masing. Pada chapter ini kita tidak akan membahas seluruh library tersebut. Kita akab berfokus pada fungsi visualisasi dasar bawaan dari R. kita akan mempelajari mengenai jenis visualisasi data sampai dengan melakukan kustomisasi pada parameter grafik yang kita buat. 4.1 Visualisasi Data Menggunakan Fungsi plot() Fungsi plot() merupakan fungsi umum yang digunakan untuk membuat plot pada R. Format dasarnya adalah sebagai berikut: plot(x, y, type=&quot;p&quot;) Note: x dan y: titik koordinat plot Berupa variabel dengan panjang atau jumlah observasi yang sama. type: jenis grafik yang hendak dibuat. Nilai yang dapat dimasukkan antara lain: type=“p” : membuat plot titik atau scatterplot. Nilai ini merupakan default pada fungsi plot(). type=“l” : membuat plot garis. type=“b” : membuat plot titik yang terhubung dengan garis. type=“o” : membuat plot titik yang ditimpa oleh garis. type=“h” : membuat plot garis vertikal dari titik ke garis y=0. type=“s” : membuat fungsi tangga. type=“n” : tidak membuat grafik plot sama sekali, kecuali plot dari axis. Dapat digunakan untuk mengatur tampilan suatu plot utama yang diikuti oleh sekelompok plot tambahan. Untuk lebih memahaminya berikut penulis akan sajikan contoh untuk masing-masing grafik tersebut. Berikut adalah contoh sintaks dan hasil plot yang disajikan pada Gambar 4.1: # membuat vektor data x &lt;- c(1:10); y &lt;- x^2 # membagi jendela grafik menajdi 4 baris dan 2 kolom par(mfrow=c(3,3)) # loop type &lt;- c(&quot;p&quot;,&quot;l&quot;,&quot;b&quot;,&quot;o&quot;,&quot;h&quot;,&quot;s&quot;,&quot;n&quot;) for (i in type){ plot(x,y, type= i, main= paste(&quot;type=&quot;, i)) } Gambar 4.1: Plot berbagai jenis setting type Pada contoh selanjutnya akan dilakukan plot terhadap dataset trees. Untuk memuatnya jalankan sintaks berikut: library(tibble) # memuat dataset trees &lt;- as_tibble(trees) # print trees ## # A tibble: 31 x 3 ## Girth Height Volume ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 8.3 70 10.3 ## 2 8.6 65 10.3 ## 3 8.8 63 10.2 ## 4 10.5 72 16.4 ## 5 10.7 81 18.8 ## 6 10.8 83 19.7 ## 7 11 66 15.6 ## 8 11 75 18.2 ## 9 11.1 80 22.6 ## 10 11.2 75 19.9 ## # ... with 21 more rows Pada dataset tersebut kita ingin membuat scatterplot untuk melihat korelasi antara variabel Height dan Volume. Untuk melakukannya jalankan sintaks berikut: plot(trees$Height, trees$Volume) # atau with(trees, plot(Height, Volume)) Gambar 4.2: Scatterplot Height vs Volume Kita juga dapat menggunakan formula untuk membuat scatterplot pada Gambar 4.2. Berikut adalah contoh sintaks yang digunakan: x &lt;- trees$Height y &lt;- trees$Volume plot(y~x) Fungsi plot() juga dapat digunakan untuk membentuk matriks scatterplot. Untuk membuatnya kita hanya perlu memasukkan seluruh dataset kedalam fungsi plot(). Berikut adalah sintaks dan output yang dihasilkan berupa Gambar 4.3: plot(trees) Gambar 4.3: Matriks scatterplot dataset trees Selain itu jika kita memasukkan objek lm() yang merupakan fungsi untuk melakukan operasi regresi linier pada fungsi plot(), output yang dihasilkan berupa plot diagnostik yang berguna untuk menguji asumsi model regresi linier. Berikut adalah contoh sintaks dan output yang dihasilkan pada Gambar 4.4: # membagi jendela grafik menjadi 2 baris dan 2 kolom par(mfrow=c(2,2)) # plot plot(lm(Volume~Height, data=trees)) Gambar 4.4: Plot diagnostik regresi linier Selain objek-objek tersebut, fungsi plot() akan banyak digunakan dalam analisis statistika kita pada chapter lainnya. 4.2 Matriks Scatterplot Pada bagian sebelumnya kita telah belajar bagaimana membuat matriks scatterplot mengggunakan fungsi plot(). Pada bagian ini kita akan belajar cara membuat matriks scatterplot menggunakan fungsi pairs(). Secara umum format fungsi dituliskan sebagai berikut: pairs(data, lower.panel=NULL) Note: data: data frame lower.panel: menampilkan atau tidak menampilkan panel bawah Untuk lebih memahami penggunaan fungsi tersebut, berikut akan disajikan contoh penggunaannya pada dataset iris. Sebelum melakukannya jalankan sintaks berikut untuk memuat dataset: # memuat dataset irir iris &lt;- as_tibble(iris) # print iris ## # A tibble: 150 x 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 ## 7 4.6 3.4 1.4 0.3 ## 8 5 3.4 1.5 0.2 ## 9 4.4 2.9 1.4 0.2 ## 10 4.9 3.1 1.5 0.1 ## # ... with 140 more rows, and 1 more variable: ## # Species &lt;fct&gt; Untuk membuat matriks scatterplot kita hanya perlu memasukkan objek iris kedalam fungsi pairs(). Berikut adalah sintaks yang digunakan dan output yang dihasilkan pada Gambar 4.5: pairs(iris) Gambar 4.5: Matriks scatterplot iris Kita dapat melakukan drop terhadap panel bawah grafik tersebut. Untuk melakukannya kita perlu memasukkan parameter lower.panel=NULL. Output yang dihasilkan akan tampak seperti pada Gambar 4.6. pairs(iris, lower.panel=NULL) Gambar 4.6: Matriks scatterplot iris tanpa panel bawah Kita dapat merubah warna titik berdasarkan factor Species. Langkah pertama yang perlu dilakukan adalah melakukan drop variabel Species pada dataset dan memasukkan objek baru tanpa variabel tersebut kedalam fungsi pairs(). Warna berdasarkan grup diberikan dengan menambahkan parameter col= pada fungsi pairs(). Berikut adalah contoh penerapannya dan output yang dihasilkan pada Gambar 4.7: # drop variabel Species # simpan dataset baru pada objek iris2 iris2 &lt;- iris[ ,1:4] # print iris2 ## # A tibble: 150 x 4 ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 ## 7 4.6 3.4 1.4 0.3 ## 8 5 3.4 1.5 0.2 ## 9 4.4 2.9 1.4 0.2 ## 10 4.9 3.1 1.5 0.1 ## # ... with 140 more rows # spesifikasi vaktor warna titik berdasarkan spesies my_col &lt;- c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;) # plot pairs(iris2, lower.panel=NULL, # spesifikasi warna col= my_col[iris$Species]) Gambar 4.7: Matriks scatterplot iris tanpa panel bawah Kita juga dapat mengganti panel bawah menjadi nilai korelasi antar variabel. Untuk melakukannya kita perlu mendefinisikan sebuah fungsi untuk panel bawah dan panel atas (jika ingin warna titik berdasarkan factor). Setelah fungsi panel bawah dan atas didefinisikan, langkah selanjutnya adalah melakukan memasukkan nilainya kedalam fungsi pairs(). Berikut adalah sintaks yang digunakan serta output yang dihasilkan pada Gambar 4.8: # membuat fungsi untuk menghitung # nilai korelasi yang ditempatkan pada panel bawah panel.cor &lt;- function(x, y){ # definisi parameter grafik usr &lt;- par(&quot;usr&quot;); on.exit(par(usr)) par(usr = c(0, 1, 0, 1)) # menghitung koefisien korelas r &lt;- round(cor(x, y), digits=2) # menambahkan text berdasarkan koefisien korelasi txt &lt;- paste0(&quot;R = &quot;, r) # mengatur besar text sesuai besarnya nilai korelasi cex.cor &lt;- 0.8/strwidth(txt) text(0.5, 0.5, txt, cex = cex.cor * abs(r)) } # kustomisasi panel atas agar # warna titik berdasarkan factor my_col &lt;- c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;) upper.panel&lt;-function(x, y){ points(x,y, col = my_col[iris$Species]) } pairs(iris2, lower.panel= panel.cor, upper.panel= upper.panel) Gambar 4.8: Matriks scatterplot iris dengan koefisien korelasi Jika kita tidak ingin nilai korelasi ditampilkan di panel bawah, kita dapat merubahnya sehingga dapat tampil pada panel atas bersamaan dengan scatterplot. Untuk melakukannya kita perlu mendefinisikan fungsi pada panel atas dan memasukkannya pada parameter upper.panel=. Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 4.9: # kustomisasi panel atas upper.panel&lt;-function(x, y){ points(x,y, col=c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;)[iris$Species]) r &lt;- round(cor(x, y), digits=2) txt &lt;- paste0(&quot;R = &quot;, r) usr &lt;- par(&quot;usr&quot;); on.exit(par(usr)) par(usr = c(0, 1, 0, 1)) text(0.5, 0.9, txt) } # plot pairs(iris2, lower.panel = NULL, upper.panel = upper.panel) Gambar 4.9: Matriks scatterplot iris dengan koefisien korelasi di panel atas 4.3 Box plot Box plot pada R dapat dibuat menggunakan fungsi boxplot(). Berikut adalah sintaks untuk membuat boxplot variabel Sepal.Lenght pada dataset iris dan output yang dihasilkan pada Gambar 4.10: boxplot(iris$Sepal.Length) Gambar 4.10: Boxplot variabel Sepal.Length Boxplot juga dapat dibuat berdasarkan variabel factor. Hal ini berguna untuk melihat perbedaan ditribusi data pada masing-masing grup. Pada sintaks berikut dibuat boxplot berdasarkan variabel Species. Output yang dihasilkan disajikan pada Gambar 4.11: boxplot(iris$Sepal.Length~iris$Species) Gambar 4.11: Boxplot berdasarkan variabel species Kita juga dapat mengubah warna outline dan box pada boxplot. Berikut adalah contoh sintaks yang digunakan untuk melakukannya dan output yang dihasilkan disajikan pada Gambar 4.12: boxplot(iris$Sepal.Length~iris$Species, # ubah warna outline menjadi steelblue border = &quot;steelblue&quot;, # ubah warna box berdasarkan grup col= c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;)) Gambar 4.12: Boxplot dengan warna berdasarkan spesies Kita juga dapat membuat boxplot pada multiple group. Data yang digunakan untuk contoh tersebut adalah dataset ToothGrowth. Berikut adalah sintaks untuk memuat dataset tersebut: # memuat dataset sebagai tibble ToothGrowth &lt;- as_tibble(ToothGrowth) # print ToothGrowth ## # A tibble: 60 x 3 ## len supp dose ## &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 4.2 VC 0.5 ## 2 11.5 VC 0.5 ## 3 7.3 VC 0.5 ## 4 5.8 VC 0.5 ## 5 6.4 VC 0.5 ## 6 10 VC 0.5 ## 7 11.2 VC 0.5 ## 8 11.2 VC 0.5 ## 9 5.2 VC 0.5 ## 10 7 VC 0.5 ## # ... with 50 more rows # ubah variable dose menjadi factor ToothGrowth$dose &lt;- as.factor(ToothGrowth$dose) # print ToothGrowth ## # A tibble: 60 x 3 ## len supp dose ## &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 4.2 VC 0.5 ## 2 11.5 VC 0.5 ## 3 7.3 VC 0.5 ## 4 5.8 VC 0.5 ## 5 6.4 VC 0.5 ## 6 10 VC 0.5 ## 7 11.2 VC 0.5 ## 8 11.2 VC 0.5 ## 9 5.2 VC 0.5 ## 10 7 VC 0.5 ## # ... with 50 more rows Contoh sintaks dan output boxplot multiple group disajikan pada Gambar 4.13: boxplot(len ~ supp*dose, data = ToothGrowth, col = c(&quot;white&quot;, &quot;steelblue&quot;)) Gambar 4.13: Boxplot multiple group 4.4 Bar Plot Barplot pada R dapat dibuat menggunakan fungsi barplot(). Untuk lebih memahaminya berikut disajikan contoh barplot menggunakan dataset VADeaths. Untuk memuatnya jalankan sintaks berikut: VADeaths ## Rural Male Rural Female Urban Male Urban Female ## 50-54 11.7 8.7 15.4 8.4 ## 55-59 18.1 11.7 24.3 13.6 ## 60-64 26.9 20.3 37.0 19.3 ## 65-69 41.0 30.9 54.6 35.1 ## 70-74 66.0 54.3 71.1 50.0 Contoh bar plot untuk variabel Rural Male disajikan pada Gambar 4.14: par(mfrow=c(1,2)) barplot(VADeaths[, &quot;Rural Male&quot;], main=&quot;a&quot;) barplot(VADeaths[, &quot;Rural Male&quot;], main=&quot;b&quot;, horiz=TRUE) Gambar 4.14: a. bar plot vertikal; b. bar plot horizontal par(mfrow=c(1,1)) Kita dapat mengubah warna pada masing-masing bar, baik outline bar maupun box pada bar. Selain itu kita juga dapat mengubah nama grup yang telah dihasilkan sebelumnya. Berikut sintaks untuk melakukannya dan output yang dihasilkan pada Gambar 4.15: barplot(VADeaths[, &quot;Rural Male&quot;], # ubah warna ouline menjadi steelblue border=&quot;steelblue&quot;, # ubah wana box col= c(&quot;grey&quot;, &quot;yellow&quot;, &quot;steelblue&quot;, &quot;green&quot;, &quot;orange&quot;), # ubah nama grup dari A sampai E names.arg = LETTERS[1:5], # ubah orientasi menajadi horizontal horiz=TRUE) Gambar 4.15: Kustomisasi bar plot Untuk bar plot dengan multiple group, tersedia dua pengaturan posisi yaitu stacked bar plot(menunjukkan proporsi penyusun pada masing-masing grup) dan grouped bar plot(melihat perbedaan individual pada masing-masing grup). Pada Gambar 4.16 dan Gambar 4.17 , disajikan kedua jenis bar plot tersebut. # staked barplot(VADeaths, col = c(&quot;lightblue&quot;, &quot;mistyrose&quot;, &quot;lightcyan&quot;, &quot;lavender&quot;, &quot;cornsilk&quot;), legend = rownames(VADeaths)) Gambar 4.16: Stacked bar plot # grouped barplot(VADeaths, col = c(&quot;lightblue&quot;, &quot;mistyrose&quot;, &quot;lightcyan&quot;, &quot;lavender&quot;, &quot;cornsilk&quot;), legend = rownames(VADeaths), beside = TRUE) Gambar 4.17: Grouped bar plot 4.5 Line Plot Line plot pada R dapat dibentuk menggunakan fungsi plot(). Selain itu fungsi lines() dapat pula digunakan untuk menambahkan line plot pada grafik. Berikut adalah sintaks untuk membuat line plot dan outputnya pada Gambar 4.18: # Membuat vektor data x &lt;- c(1:20) y &lt;- 2*x z &lt;- x^2 # Membuat line plot x vs y plot(y~x, type=&quot;b&quot;, lty=1, col=&quot;blue&quot;) # Menambahkan line plot x vs z lines(z~x, type=&quot;o&quot;, lty=2, col=&quot;red&quot;) # Menambahkan legend legend(&quot;topleft&quot;, legend=c(&quot;Line 1&quot;, &quot;Line 2&quot;), col=c(&quot;red&quot;, &quot;blue&quot;), lty = 1:2, cex=0.8) Gambar 4.18: Line plot 4.6 Pie Chart Pie chart digunakan untuk membuat visualisasi proporsi pada sebuah data. Pie chart pada R dibuat menggunakan fungsi pie(). Berikut adalah sintaks untuk membuat pie chart dan output yang dihasilkan pada Gambar 4.19: par(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(&#39;Sky&#39;, &#39;Sunny side of pyramid&#39;, &#39;Shady side of pyramid&#39;), col = c(&#39;#0292D8&#39;, &#39;#F7EA39&#39;, &#39;#C4B632&#39;), init.angle = -50, border = NA ) Gambar 4.19: Pie chart 4.7 Histogram dan Density Plot Fungsi hist() dapat digunakan untuk membuat histogram pada R. Secara sederhana fungsi tersebut didefinisikan sebagai berikut: hist(x, breaks=&quot;Sturges&quot;) Note: x: vektor numerik breaks: breakpoints antar sel histogram. Pada dataset trees akan dibuat histogram variabel Height. Untuk melakukannya jalankan sintaks berikut: hist(trees$Height) Output yang dihasilkan disajikan pada Gambar 4.20: Gambar 4.20: Histogram Density plot pada R dapat dibuat menggunakan fungsi density(). Berbeda dengan fungsi hist(), fungsi ini tidak langsung menghasilkan grafik densitas. Fungsi density() hanya menghitung kernel densitas pada data. Densitas yang telah dihitung selanjutnya diplotkan menggunakan fungsi plot(). Berikut adalah sintaks dan output yang dihasilkan pada Gambar 4.21: # menghitung kernel density dens &lt;- density(trees$Height) # plot densitas dengan outline merah plot(dens,col=&quot;red&quot;) Gambar 4.21: Density plot Kita juga dapat menambahkan grafik densitas pada histogram sehingga mempermudah pembacaan pada histogram. Untuk melakukannya kita perlu mengubah kernel histigram dari frekuensi menjadi density dengan menambahkan argumen freq=FALSE pada fungsi hist(). Selanjutnya tambahkan fungsi polygon() untuk memplotkan grafik densitas. Berikut adalah sintak dan output yang dihasilkan pada Gambar 4.22: # menghitung kernel density dens &lt;- density(trees$Height) # histogram hist(trees$Height, freq=FALSE, col=&quot;steelblue&quot;) # tambahkan density plot polygon(dens, border=&quot;red&quot;) Gambar 4.22: Density plot dan histogram 4.8 QQ Plot QQ plot digunakan untuk mengecek distribusi suatu data apakah berdistribusi normal atau tidak. Pada R QQ plot dibuat menggunakan 2 fungsi yaitu: qqnorm() dan qqline(). Fungsi qqnorm() digunakan untuk memproduksi normal QQ plot suatu variabel. Sedangkan fungsi qqline() digunakan untuk membuat garis referensi distiribusi normal. Suatu distribusi dikatan normal jika titik observasi yang dihasilkan mengikuti garis referensi tersebut. Berikut adalah cara membuat QQ plot menggunakan variabel Volume pada dataset trees. Output yang dihasilkan disajikan pada Gambar 4.23. qqnorm(trees$Volume) qqline(trees$Volume, col=&quot;red&quot;) Gambar 4.23: QQ plot 4.9 Dot Chart Fungsi dotchart() pada R digunakan untuk membuat dot chart. Format yang digunakan adalah sebagai berikut: dotchart(x, labels = NULL, groups = NULL, gcolor = par(&quot;fg&quot;), color = par(&quot;fg&quot;)) Note: x: vektor atau matriks numerik. labels: vektor label untuk tiap titik. groups: grouping variabel yang mengindikasikan bagaimana x dikelompokkan. gcolor: warna yang digunakan pada label grup dan nilai observasi. color: warna yang digunakan untuk titik dan label. Pada contoh berikut disajikan cara membuat dot chart pada dataset mtcars untuk melihat mobil yang paling hemat bahan bakar berdasarkan variabel mpg dan jumlah silinder (cyl). Berikut sintaks yang digunakan dan output yang dihasilkan pada Gambar 4.24: # mengurutkan dataset mtcars berdasarkan variabel mpg mtcars &lt;- mtcars[order(mtcars$mpg), ] # mengubah variabel cyl menjadi factor grps &lt;- as.factor(mtcars$cyl) # membuat vektor warna berdasarkan jumlah grup my_cols &lt;- c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;) # plot dotchart(mtcars$mpg, labels = row.names(mtcars), groups = grps, gcolor = my_cols, color = my_cols[grps], cex = 0.6, pch = 19, xlab = &quot;mpg&quot;) Gambar 4.24: Dot chart 4.10 Kustomisasi Parameter Grafik Pada bagian ini penulis akan menjelaskan cara untuk kustomisasi parameter grafik seperti: menambahkan judul, legend, teks, axis, dan garis. mengubah skala axis, simbol plot, jenis garis, dan warna. 4.10.1 Menambahkan Judul Pada grafik di R, kita dapat menambahkan judul dengan dua cara, yaitu: pada plot melalui parameter dan melalui fungsi plot(). Kedua cara tersebut tidak berbeda satu sama lain pada parameter input. Untuk menambahkan judul pada plot secara langsung, kita dapat menggunakan argumen tambahan sebagai berikut: main: teks untuk judul. xlab: teks untuk keterangan axis X. ylab: teks untuk keterangan axis y. sub: teks untuk sub-judul. Berikut contoh sintaks penerapan masing-masing argumen tersebut beserta dengan output yang dihasilkan pada Gambar 4.25: # menambahkan judul barplot(c(2,5), main=&quot;Main title&quot;, xlab=&quot;X axis title&quot;, ylab=&quot;Y axis title&quot;, sub=&quot;Sub-title&quot;) Gambar 4.25: Menambahkan Judul kita juga dapat melakukan kustomisasi pada warna, font style, dan ukuran font judul. Untuk melakukan kustomisasi pada warna pada judul, kita dapat menambahkan argumen sebagai berikut: col.main: warna untuk judul. col.lab: warna untuk keterangan axis. col.sub: warna untuk sub-judul Untuk kustomisasi font judul, kita dapat menambahkan argumen berikut: font.main: font style untuk judul. font.lab: font style untuk keterangan axis. font.sub: font style untuk sub-judul. Note: Nilai yang dapat dimasukkan antara lain: 1: untuk teks normal. 2: untuk teks cetak tebal. 3: untuk teks cetak miring. 4: untuk teks cetak tebal dan miring. 5: untuk font simbol. Sedangkan untuk ukuran font, kita dapat menambahkan variabel berikut: cex.main: ukuran teks judul. cex.lab: ukuran teks keterangan axis. cex.sub: ukuran teks sub-judul. Berikut sintaks penerapan seluruh argumen tersebut beserta output yang dihasilkan pada Gambar 4.26: # menambahkan judul barplot(c(2,5), # menambahkan judul main=&quot;Main title&quot;, xlab=&quot;X axis title&quot;, ylab=&quot;Y axis title&quot;, sub=&quot;Sub-title&quot;, # kustomisasi warna font col.main=&quot;red&quot;, col.lab=&quot;blue&quot;, col.sub=&quot;black&quot;, # kustomisasi font style font.main=4, font.lab=4, font.sub=4, # kustomisasi ukuran font cex.main=2, cex.lab=1.7, cex.sub=1.2) Gambar 4.26: Menambahkan Judul (2) Kita telah belajar bagaimana menambahkan judul langsung pada fungsi plot. Selain cara tersebut, telah penulis jelaskan bahwa kita dapat menambahkan judul melalui fungsi title(). argumen yang dimasukkan pada dasarnya tidak berbeda dengan ketika kita menambahkan judul secara langsung pada plot. Berikut adalah contoh sintaks dan output yang dihasilkan pada Gambar 4.27: # menambahkan judul barplot(c(2,5,8)) # menambahkan judul title(main=&quot;Main title&quot;, xlab=&quot;X axis title&quot;, ylab=&quot;Y axis title&quot;, sub=&quot;Sub-title&quot;, # kustomisasi warna font col.main=&quot;red&quot;, col.lab=&quot;blue&quot;, col.sub=&quot;black&quot;, # kustomisasi font style font.main=4, font.lab=4, font.sub=4, # kustomisasi ukuran font cex.main=2, cex.lab=1.7, cex.sub=1.2) Gambar 4.27: Menambahkan Judul (3) 4.10.2 Menambahkan Legend Fungsi legend() pada R dapat digunakan untuk menambahkan legend pada grafik. Format sederhananya adalah sebagai berikut: legend(x, y=NULL, legend, fill, col, bg) Note: x dan y: koordinat yang digunakan untuk posisi legend. legend: teks pada legend fill: warna yang digunakan untuk mengisi box disamping teks legend. col: warna garis dan titik disamping teks legend. bg: warna latar belakang legend box. Berikut adalah contoh sintaks dan ouput penerapan argumen disajikan pada Gambar 4.28: # membuat vektor numerik x &lt;- c(1:10) y &lt;- x^2 z &lt;- x*2 # membuat line plot plot(x,y, type=&quot;o&quot;, col=&quot;red&quot;, lty=1) # menambahkan line plot lines(x,z, type=&quot;o&quot;, col=&quot;blue&quot;, lty=2) # menambahkan legend legend(1, 95, legend=c(&quot;Line 1&quot;, &quot;Line 2&quot;), col=c(&quot;red&quot;, &quot;blue&quot;), lty=1:2, cex=0.8) Gambar 4.28: Menambahkan legend Kita dapat menambahkan judul, merubah font, dan merubah warna backgroud pada legend. Argumen yang ditambahkan pada legend adalah sebagai berikut: title: Judul legend text.font: integer yang menunjukkan font style pada teks legend. Nilai yang dapat dimasukkan adalah sebagai berikut: 1: normal 2: cetak tebal 3: cetak miring 4: cetak tebal dan miring. bg: warna background legend box. Berikut adalah penerapan sintaks dan output yang dihasilkan pada Gambar 4.29: # membuat line plot plot(x,y, type=&quot;o&quot;, col=&quot;red&quot;, lty=1) # menambahkan line plot lines(x,z, type=&quot;o&quot;, col=&quot;blue&quot;, lty=2) # menambahkan legend legend(1, 95, legend=c(&quot;Line 1&quot;, &quot;Line 2&quot;), col=c(&quot;red&quot;, &quot;blue&quot;), lty=1:2, cex=0.8, title=&quot;Line types&quot;, text.font=4, bg=&#39;lightblue&#39;) Gambar 4.29: Menambahkan legend (2) Kita dapat melakukan kustomisasi pada border dari legend melalui argumen box.lty=(jenis garis), box.lwd=(ukuran garis), dan box.col=(warna box). Berikut adalah penerapan argumen tersebut beserta output yang dihasilkan pada Gambar 4.30: # membuat line plot plot(x,y, type=&quot;o&quot;, col=&quot;red&quot;, lty=1) # menambahkan line plot lines(x,z, type=&quot;o&quot;, col=&quot;blue&quot;, lty=2) # menambahkan legend legend(1, 95, legend=c(&quot;Line 1&quot;, &quot;Line 2&quot;), col=c(&quot;red&quot;, &quot;blue&quot;), lty=1:2, cex=0.8, title=&quot;Line types&quot;, text.font=4, bg=&#39;white&#39;, box.lty=2, box.lwd=2, box.col=&quot;steelblue&quot;) Gambar 4.30: Menambahkan legend (3) Selain menggunakan koordinat, kita juga dapat melakukan kustomisasi posisi legend menggunakan keyword seperti: bottomright“,”bottom“,”bottomleft“,”left“,”topleft“,”top“,”topright“,”right&quot; and “center”. Sejumlah kustomisasi legend berdasarkan keyword disajikan pada Gambar 4.31: # plot plot(x,y, type = &quot;n&quot;) # posisi kiri atas, inset =0.05 legend(&quot;topleft&quot;, legend = &quot;(x,y)&quot;, title = &quot;topleft, inset = .05&quot;, inset = 0.05) # posisi atas legend(&quot;top&quot;, legend = &quot;(x,y)&quot;, title = &quot;top&quot;) # posisi kanan atas inset = .02 legend(&quot;topright&quot;, legend = &quot;(x,y)&quot;, title = &quot;topright, inset = .02&quot;, inset = 0.02) # posisi kiri legend(&quot;left&quot;, legend = &quot;(x,y)&quot;, title = &quot;left&quot;) # posisi tengah legend(&quot;center&quot;, legend = &quot;(x,y)&quot;, title = &quot;center&quot;) # posisi kanan legend(&quot;right&quot;, legend = &quot;(x,y)&quot;, title = &quot;right&quot;) # posisi kiri bawah legend(&quot;bottomleft&quot;, legend = &quot;(x,y)&quot;, title = &quot;bottomleft&quot;) # posisi bawah legend(&quot;bottom&quot;, legend = &quot;(x,y)&quot;, title = &quot;bottom&quot;) # posisi kanan bawah legend(&quot;bottomright&quot;, legend = &quot;(x,y)&quot;, title = &quot;bottomright&quot;) Gambar 4.31: Kustomisasi posisi legend 4.10.3 Menambahkan Teks Pada Grafik Teks pada grafik dapat kita tambahkan baik sebagai keterangan yang menunjukkan label suatu observasi, keterangan tambahan disekitar bingkai grafik, maupun sebuah persamaan yang ada pada bidang grafik. Untuk menambahkannya kita dapat menggunakan dua buah fungsi yaitu: text() dan mtext(). FUngsi text() berguna untuk menambahkan teks di dalam bidang grafik seperti label titik observasi dan persamaan di dalam bidang grafik. Format yang digunakan adalah sebagai berikut: text(x, y, labels) Note: x dan y: vektor numerik yang menunjukkan koordinat posisi teks. labels: vektor karakter yang menunjukkan teks yang hendak ditulis. Berikut adalah contoh sintaks untuk memberi label pada sejumlah data yang memiliki kriteria yang kita inginkan dan output yang dihasilkan pada Gambar 4.32: # tandai observasi yang memiliki nilai # mpg &lt; 15 dan wt &gt; 5 d &lt;- mtcars[mtcars$wt &gt;= 5 &amp; mtcars$mpg &lt;= 15, ] # plot plot(mtcars$wt, mtcars$mpg, main=&quot;Milage vs. Car Weight&quot;, xlab=&quot;Weight&quot;, ylab=&quot;Miles/(US) gallon&quot;) # menambahkan text text(d$wt, d$mpg, row.names(d), cex=0.65, pos=3,col=&quot;red&quot;) Gambar 4.32: Menambahkan teks Sedangkan sintaks berikut adalah contoh bagaimana menambahkan persamaan kedalam bidang grafik dan output yang dihasilkan pada Gambar 4.33: plot(1:10, 1:10, main=&quot;text(...) examples\\n~~~~~~~~~~~&quot;) text(4, 9, expression(hat(beta) == (X^t * X)^{-1} * X^t * y)) text(7, 4, expression(bar(x) == sum(frac(x[i], n), i==1, n))) Gambar 4.33: Menambahkan teks (2) Fungsi mtext() berguna untuk menambahkan teks pada frame sekitar bidang grafik. Format yang digunakan adalah sebagai berikut: mtext(text, side=3) Note: text: teks yang akan ditulis. side: integer yang menunjukkan lokasi teks yang akan ditulis. Nilai yang dapat dimasukkan antara lain: 1: bawah 2: kiri 3: atas 4: kanan. Berikut adalah contoh penerapan dan output yang dihasilkan pada Gambar 4.34: plot(1:10, 1:10, main=&quot;mtext(...) examples\\n~~~~~~~~~~~&quot;) mtext(&quot;Magic function&quot;, side=3) Gambar 4.34: Menambahkan teks (3) 4.10.4 Menambahkan Garis Pada Plot Fungsi abline() dapat digunakan untuk menamabahkan garis pada plot. Garis yang ditambahkan dapat berupa garis vertikal, horizontal, maupun garis regresi. Format yang digunakan adalah sebagi berikut: abline(v=y) Berikut adalah contoh sintaks bagaimana menambahkan garis pada sebuah plot dan output yang dihasilkan disajikan pada Gambar 4.35: # membuat plot plot(mtcars$wt, mtcars$mpg, main=&quot;Milage vs. Car Weight&quot;, xlab=&quot;Weight&quot;, ylab=&quot;Miles/(US) gallon&quot;) # menambahkan garis vertikal di titik rata-rata weight abline(v=mean(mtcars$wt), col=&quot;red&quot;, lwd=3, lty=2) # menambahkan garis horizontal di titik rata-rata mpg abline(h=mean(mtcars$mpg), col=&quot;blue&quot;, lwd=3, lty=3) # menambahkan garis regresi abline(lm(mpg~wt, data=mtcars), lwd=4, lty=4) Gambar 4.35: Menambahkan garis 4.10.5 Merubah Simbol plot dan Jenis Garis Simbol plot (jenis titik) dapat diubah dengan menambahkan argumen pch= pada plot. Nilai yang dimasukkan pada argumen tersebut adalah integer dengan kemungkinan nilai sebagai berikut: pch = 0,square pch = 1,circle (default) pch = 2,triangle point up pch = 3,plus pch = 4,cross pch = 5,diamond pch = 6,triangle point down pch = 7,square cross pch = 8,star pch = 9,diamond plus pch = 10,circle plus pch = 11,triangles up and down pch = 12,square plus pch = 13,circle cross pch = 14,square and triangle down pch = 15, filled square pch = 16, filled circle pch = 17, filled triangle point-up pch = 18, filled diamond pch = 19, solid circle pch = 20,bullet (smaller circle) pch = 21, filled circle blue pch = 22, filled square blue pch = 23, filled diamond blue pch = 24, filled triangle point-up blue pch = 25, filled triangle point down blue Untuk lebih memahami bentuk simbol tersebut, penulis akan menyajikan sintaks yang menampilkan seluruh simbol tersebut pada satu grafik. Output yang dihasilkan disajikan pada Gambar 4.36: generateRPointShapes&lt;-function(){ # menentukan parameter plot oldPar&lt;-par() par(font=2, mar=c(0.5,0,0,0)) # produksi titik axis y=rev(c(rep(1,6),rep(2,5), rep(3,5), rep(4,5), rep(5,5))) x=c(rep(1:5,5),6) # plot seluruh titik dan label plot(x, y, pch = 0:25, cex=1.5, ylim=c(1,5.5), xlim=c(1,6.5), axes=FALSE, xlab=&quot;&quot;, ylab=&quot;&quot;, bg=&quot;blue&quot;) text(x, y, labels=0:25, pos=3) par(mar=oldPar$mar,font=oldPar$font ) } # Print generateRPointShapes() Gambar 4.36: Symbol plot Pada R kita juga dapat mengatur jenis garis yang akan ditampilkan pada plot dengan menambahkan argumen lty= (line type) pada fungsi plot. Nilai yang dapat dimasukkan adalah nilai integer. Keterangan masing-masing nilai tersebut adalah sebagai berikut: lty = 0, blank lty = 1, solid (default) lty = 2, dashed lty = 3, dotted lty = 4, dotdash lty = 5, longdash lty = 6, twodash Untuk lebih memahaminya, pada sintaks berikut disajikan plot seluruh jenis garis tersebut beserta output yang dihasilkannya pada Gambar 4.37: generateRLineTypes&lt;-function(){ oldPar&lt;-par() par(font=2, mar=c(0,0,0,0)) plot(1, pch=&quot;&quot;, ylim=c(0,6), xlim=c(0,0.7), axes = FALSE ,xlab=&quot;&quot;, ylab=&quot;&quot;) for(i in 0:6) lines(c(0.3,0.7), c(i,i), lty=i, lwd=3) text(rep(0.1,6), 0:6, labels=c(&quot;0.&#39;blank&#39;&quot;, &quot;1.&#39;solid&#39;&quot;, &quot;2.&#39;dashed&#39;&quot;, &quot;3.&#39;dotted&#39;&quot;, &quot;4.&#39;dotdash&#39;&quot;, &quot;5.&#39;longdash&#39;&quot;, &quot;6.&#39;twodash&#39;&quot;)) par(mar=oldPar$mar,font=oldPar$font ) } generateRLineTypes() Gambar 4.37: Line type 4.10.6 Mengatur Axis Plot Kita dapat melakukan pengaturan lebih jauh terhadap axis, seperti: menambahkan axis tambahan pada atas dan bawah frame, mengubah rentang nilai axis, serta kustomisasi tick mark pada nilai axis. Hal ini diperlukan karena fungsi grafik dasar R tidak dapat mengatur axis secara otomatis saat plot baru ditambahkan pada plot pertama dan rentang nilai plot baru lebih besar dibanding plot pertama, sehingga sebagian nilai plot baru tidak ditampilkan pada hasil akhir. Untuk menambahkan axis pada R kita dapat menambahkan fungsi axis() setelah plot dilakukan. Format yang digunakan adalah sebagai berikut: axis(side, at=NULL, labels=TRUE) Note: side: nilai integer yang mengidikasikan posisi axix yang hendak ditambahkan. Nilai yang dapat dimasukkan adalah sebagai berikut: 1: bawah 2: kiri 3: atas 4: kanan. at: titik dimana tick-mark hendak digambarkan. Nilai yang dapat dimasukkan sama dengan side. labels: Teks label tick-mark. Dapat juga secara logis menentukan apakah anotasi harus dibuat pada tick mark. Berikut contoh sintaks penerapan fungsi tersebut dan output yang dihasilkan pada Gambar 4.38: # membuat vektor numerik x &lt;- c(1:4) y &lt;- x^2 # plot plot(x, y, pch=18, col=&quot;red&quot;, type=&quot;b&quot;, frame=FALSE, xaxt=&quot;n&quot;) # Remove x axis # menambahkan axis # bawah axis(1, 1:4, LETTERS[1:4], col.axis=&quot;blue&quot;) # atas axis(3, col = &quot;darkgreen&quot;, lty = 2, lwd = 0.5) # kanan axis(4, col = &quot;violet&quot;, col.axis = &quot;dark violet&quot;, lwd = 2) Gambar 4.38: Menambahkan axis Kita dapat mengubah rentang nilai pada axis menggunakan fungsi xlim() dan ylim() yang menyatakan vektor nilai masimum dan minimum rentang. Selain itu kita dapat juga melakukan tranformasi baik pada sumbu x dan sumbu y. Berikut adalah argumen yang dapat ditambahkan pada fungsi grafik: xlim: limit nilai sumbu x dengan format: xlim(min, max). ylim: limit nilai sumbu x dengan format: ylim(min, max). Untuk transformasi skala log, kita dapat menambahkan argumen berikut: log=“x”: transformasi log sumbu x. log=“y”: transformasi log sumbu y. log=“xy”: transformasi log sumbu x dan y. Berikut adalah contoh sintaks penerapan argumen tersebut beserta output yang dihasilkan pada Gambar 4.39: # membagi jendela grafik menjadi 1 baris dan 3 kolom par(mfrow=c(1,3)) # membuat vektor numerik x&lt;-c(1:10); y&lt;-x*x # simple plot plot(x, y) # plot dengan pengaturan rentang skala plot(x, y, xlim=c(1,15), ylim=c(1,150)) # plot dengan transformasi skala log plot(x, y, log=&quot;y&quot;) Gambar 4.39: Mengubah rentang dan skala axis Kita dapat melakukan kustomisasi pada tick mark. Kustomisasi yang dapat dilakukan adalah merubah warna, font style, ukuran font, orientasi, serta menyembunyikan tick mark. Argumen yang ditambahkan adalah sebagai berikut: col.axis: warna tick mark. font.axis: integer yang menunjukkan font style. Sama dengan pengaturan judul. cex.axis: pengaturan ukuran tick mark. las: mengatur orientasi tick mark. Nilai yang dapat dimasukkan adalah sebagai berikut: 0: paralel terhadap posisi axis (default) 1: selalu horizontal 2: selalu perpendikular dengan posisi axis 3: selalu vertikal xaxt dan yaxt: karakter untuk menunjukkan apakah axis akan ditampilkan atau tidak. nilai dapat berupa “n”(sembunyika) dan “s”(tampilkan). Berikut adalah contoh penerapan argumen tersebut beserta output pada Gambar 4.40: # membuat vektor numerik x&lt;-c(1:10); y&lt;-x*x # plot plot(x,y, # warna col.axis=&quot;red&quot;, # font style font.axis=2, # ukuran cex=1.5, # orientasi las=3, # sembunyikan sumbu x xaxt=&quot;n&quot;) Gambar 4.40: Kustomisasi tick mark 4.10.7 Mengatur Warna Pada fungsi dasar R, warna dapat diatur dengan mengetikkan nama warna maupun kode hexadesimal. Selain itu kita juga dapat menamambahkan warna lain melalui library lain yang tidak dijelaskan pada chapter ini. Untuk penggunaan warna hexadesima kita perlu mengetikkan “#” yang diukuti oleh 6 kode warna. Untuk memperlajari kode-kode dan warna yang dihasilkan, silahkan pembaca mengunjungi situs http://www.visibone.com/. Pada sintaks berikut disajikan visualisasi nama-nama warna bawaan yang ada pada R. Output yang dihasilkan disajikan pada Gambar 4.41: showCols &lt;- function(cl=colors(), bg = &quot;grey&quot;, cex = 0.75, rot = 30) { m &lt;- ceiling(sqrt(n &lt;-length(cl))) length(cl) &lt;- m*m; cm &lt;- matrix(cl, m) require(&quot;grid&quot;) grid.newpage(); vp &lt;- viewport(w = .92, h = .92) grid.rect(gp=gpar(fill=bg)) grid.text(cm, x = col(cm)/m, y = rev(row(cm))/m, rot = rot, vp=vp, gp=gpar(cex = cex, col = cm)) } # print 60 nama warna pertama showCols(bg=&quot;gray20&quot;, cl=colors()[1:60], rot=30, cex=0.9) ## Loading required package: grid Gambar 4.41: Nama warna 4.11 Alternatif Library Dasar Lain Kita juga dapat melakukan visualisasi menggunakan library lain yang memiliki tampilan mirip dengan fungsi visualisasi dasar R. Bedanya adalah library-library ini memberikan fungsi tambahan sehingga visualisasi yang dihasilkan menjadi lebih praktis. 4.11.1 Scatterplot Menggunakan Library car Library car menyediakan alternatif lain visualisasi menggunakan scatterplot. Berikut adalah contoh sintaks dan output yang dihasilkan pada Gambar 4.42: # memasang paket # install.packages(&quot;car&quot;) # memuat paket library(car) ## Warning: package &#39;car&#39; was built under R version 3.5.3 # plot scatterplot(Volume~Height, data=trees) Gambar 4.42: Enhanced scatterplot Pada grafik tersebut terkandung beberapa elemen penting, yaitu: titik observasi garis regresi (garis lurus) non-parametric regression smooth (dashed line) garis smoothed conditional (point dashed line) box plot masing-masing variabel. 4.11.2 Matriks Scatterplot Menggunakan Library psych FUngsi pairs.panels() pada library psych dapat digunakan untuk membuat matriks scatterplot. Grafik yang dihasilkan juga lebih ringkas dan menampilkan fungsional lain pada bagian diagonal lain berupa histogram dan density plot yang dapat menunjukkan distribusi dari variabel yang ada. Selain itu pada fungsionalitas grafik juga dapat ditingkatkan dengan penambahan nilai korelasi antar variabel yang secara default ditambahkan pada panel atas. Berikut adalah contoh sintaks dan output yang dihasilkan pada Gambar 4.43: # memasang paket # install.packages(&quot;psych&quot;) # memuat paket library(psych) ## Warning: package &#39;psych&#39; was built under R version ## 3.5.3 # plot pairs.panels(trees, method = &quot;pearson&quot;, # metode korelasi hist.col = &quot;grey&quot;, density = TRUE, # menampilkan plot densitas ellipses = FALSE, # menampilkancorrelation ellipses lm = TRUE # menampilkan garis regresi linier ) Gambar 4.43: Enhanced scatterplot matrices 4.11.3 Box Plot Menggunakan Library gplots Fungsi boxplot2() pada paket gplots memberikan fungsionalitas lebih dibandingkan box plot yang dihasilkan dari fungsi dasar R. Plot yang dihasilkan akan menampilkan jumlah observasi pada tiap box. Berikut adalah contoh sintask penerapan dan output yang dihasilkan pada Gambar 4.44: # memasang paket # install.packages(&quot;gplots&quot;) # memuat paket library(gplots) ## Warning: package &#39;gplots&#39; was built under R version ## 3.5.3 # plot boxplot2(len ~ dose, data = ToothGrowth) Gambar 4.44: Enhanced box plot 4.11.4 QQ Plot Menggunakan Library car Fungsi qqPlot() pada library car dapat pula digunakan untuk membuat qq plot. Kelebihannya adalah qqplot yang dihasilkan akan dilengkapi dengan garis referensi yang memudahkan dalam membaca apakah data masih dalam rentang distribusi normal atau tidak. Selain itu, untuk membuatnya juga hanya diperlukan satu perintah saja. Hal ini tentu berbeda ketika kita menggunakan fungsi dasar R. Berikut adalah contoh sintask penerapan dan output yang dihasilkan pada Gambar 4.45: # memasang paket # install.packages(&quot;car&quot;) # memuat paket library(car) # plot qqPlot(trees$Height) Gambar 4.45: Enhanced qq plot ## [1] 3 20 4.11.5 Plot Group Means Menggunakan Library gplots Plot ini akan sering kita gunakan saat melakukan analisis statistik menggunakan anova baik anova satu arah maupun dua arah. Plot ini berguna untuk melihat adanya interaksi antar faktor saat melakukan analisis anova dua arah. Berikut adalah contoh sintask penerapan dan output yang dihasilkan pada Gambar 4.46: # memasang paket # install.packages(&quot;gplots&quot;) # memuat paket library(gplots) # plot plotmeans(len ~ dose, data = ToothGrowth) Gambar 4.46: Plot group means 4.12 Referensi Maindonald, J.H. 2008. Using R for Data Analysis and Graphics Introduction, Code and Commentary. Centre for Mathematics and Its Applications Australian National University. Scherber, C. 2007. An introduction to statistical data analysis using R. R_Manual Goettingen. Venables, W.N. Smith D.M. and R Core Team. 2018. An Introduction to R. R Manuals. STHDA. R Base Graphs. http://www.sthda.com/english/wiki/r-base-graphs "],
["visualisasi-data-menggunakan-ggplot.html", "Chapter 5 Visualisasi Data Menggunakan GGPLOT 5.1 Scatterplot 5.2 Box Plot dan Violin Plot 5.3 Bar Plot 5.4 Line Plot 5.5 Pie Chart 5.6 Histogram dan Desity Plot 5.7 QQ Plot 5.8 Dot Plot 5.9 ECDF Plot 5.10 Parameter Grafik 5.11 Referensi", " Chapter 5 Visualisasi Data Menggunakan GGPLOT Library ggplot2 merupakan implementasi dari The Grammar of Graphics yang ditulis oleh Leland Wilkinson. ggplot2 merupakan library yang dikembangkan oleh Hadley Wicham ketika ia sedang menempuh kuliah di Lowa State Universuty dan masih dikembangkan hingga sekarang. ggplot2 merupakan paket visualisasi yang powerfull. Kita dapat menggunakannya bersamaan dengan piping operator yang disediakan oleh paket dplyr sehingga menambah kemudahan kita dalam melakukan analisis data. Grafik ggplot2 terdiri dari sejumlah komponen kunci. Berikut adalah sejumlah komponen kunci yang membentuk grafik ggplot2. data frame: menyimpan semua data yang akan ditampilkan di plot. aesthetic mapping: menggambarkan bagaimana data dipetakan ke warna, ukuran, bentuk, lokasi. Dalam plot diberikan pada fungsi aes() geoms: objek geometris seperti titik, garis, bentuk. facets: menjelaskan bagaimana plot bersyarat / panel harus dibangun. stats: transformasi statistik seperti binning, quantiles, smoothing. scales: skala apa yang digunakan oleh aesthetic map (contoh: pria = merah, wanita = biru). coordinate system: menggambarkan sistem di mana lokasi geom akan digambarkan. Sebelum kita mulai memcoba melakukan visualisasi data menggunakan ggplot2, kita perlu menginstall dan memuat terlebih dahulu library ggplot2. Berikut adalah sintaks yang digunakan untuk menginstall dan memuat paket ggplot2: # memasang paket # install.packages(&#39;ggplot2&#39;) # memuat paket library(ggplot2) Dataset yang akan kita gunakan adalah dataset gapminder. Dataset ini berisi data demografi penduduk dari berbagai negara dan benua. Untuk dapat menggunakannya kita perlu menginstall dan memuatnya terlebih dahulu. Berikut adalah sintaks untuk menginstall dan memuat dataset tersebut: # memasang paket # install.packages(&quot;gapminder&quot;) # memuat paket library(gapminder) ## Warning: package &#39;gapminder&#39; was built under R version ## 3.5.3 # memuat paket dplyr dan tibble library(dplyr) library(tibble) # melihat struktur dataset glimpse(gapminder) ## Observations: 1,704 ## Variables: 6 ## $ country &lt;fct&gt; Afghanistan, Afghanistan, Afghan... ## $ continent &lt;fct&gt; Asia, Asia, Asia, Asia, Asia, As... ## $ year &lt;int&gt; 1952, 1957, 1962, 1967, 1972, 19... ## $ lifeExp &lt;dbl&gt; 28.80, 30.33, 32.00, 34.02, 36.0... ## $ pop &lt;int&gt; 8425333, 9240934, 10267083, 1153... ## $ gdpPercap &lt;dbl&gt; 779.4, 820.9, 853.1, 836.2, 740.... # melihat variabel year unique(gapminder$year) ## [1] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ## [11] 2002 2007 Dataset gapminder memiliki 6 variabel dan 1704 observasi. 20 observasi pertama dataset gapminder dapat dilihat pada Tabel 5.1 Tabel 5.1: 20 observasi pertama dataset gapminder country continent year lifeExp pop gdpPercap Afghanistan Asia 1952 28.80 8425333 779.4 Afghanistan Asia 1957 30.33 9240934 820.9 Afghanistan Asia 1962 32.00 10267083 853.1 Afghanistan Asia 1967 34.02 11537966 836.2 Afghanistan Asia 1972 36.09 13079460 740.0 Afghanistan Asia 1977 38.44 14880372 786.1 Afghanistan Asia 1982 39.85 12881816 978.0 Afghanistan Asia 1987 40.82 13867957 852.4 Afghanistan Asia 1992 41.67 16317921 649.3 Afghanistan Asia 1997 41.76 22227415 635.3 Afghanistan Asia 2002 42.13 25268405 726.7 Afghanistan Asia 2007 43.83 31889923 974.6 Albania Europe 1952 55.23 1282697 1601.1 Albania Europe 1957 59.28 1476505 1942.3 Albania Europe 1962 64.82 1728137 2312.9 Albania Europe 1967 66.22 1984060 2760.2 Albania Europe 1972 67.69 2263554 3313.4 Albania Europe 1977 68.93 2509048 3533.0 Albania Europe 1982 70.42 2780097 3630.9 Albania Europe 1987 72.00 3075321 3738.9 5.1 Scatterplot Scatterplot dapat dibuat pada ggplot2 menggunakan fungsi geom_point(). Format sederhananya dituliskan sebagai berikut: ggplot(data, aes(...))+ geom_point(size, color, shape) Berikut adalah contoh sederhana scatterplot variabel lifeExp terhadap variabel gdpPercap. Output yang dihasilkan disajikan pada Gambar 5.1: ggplot(gapminder, aes(gdpPercap, lifeExp))+ geom_point() Gambar 5.1: Scatterplot lifeExp vs gdpPercap Kita dapat mengubah warna, jenis, dan ukuran titik pada scatterplot. Pengubahan warna dan jenis titik berguna untuk menunjukkan grup data pada grafik. Sedangkan perubahan ukuran titik sangat berguna untuk menunjukkan nilai variabel lain khususnya variabel kontinyu pada sebuah titik. Berikut adalah contoh penerapannya. Output yang dihasilkan disajikan pada Gambar 5.2 sampai dengan Gambar 5.4: ggplot(gapminder, aes(gdpPercap,lifeExp, color=continent))+ geom_point()+ # merubah sumbu x kedalam fungsi log scale_x_log10() Gambar 5.2: Scatterplot lifeExp vs gdpPercap tiap benua (1) ggplot(gapminder, aes(gdpPercap,lifeExp, shape=continent))+ geom_point()+ # merubah sumbu x kedalam fungsi log scale_x_log10() Gambar 5.3: Scatterplot lifeExp vs gdpPercap tiap benua (2) ggplot(gapminder, aes(gdpPercap,lifeExp, size=pop, color=continent))+ geom_point()+ # merubah sumbu x kedalam fungsi log scale_x_log10() Gambar 5.4: Scatterplot lifeExp vs gdpPercap dan populasi tiap negara dan benua Untuk menujukkan asosiasi antara dua variabel kontinyu kita juga dapat menambahkan garis regresi dan confidence interval garis regresinya. Fungsi yang digunakan adalah geom_smooth(). Secara default fungsi tersebut akan membuat garis loess regression pada grafik. Agar dapat membuat garis regresi linier kita perlu menambahkan argumen method=&quot;lm&quot;. Selain itu, jika kita tidak ingin menampilkan garis confidence interval kita dapat menambahkan argumen se=FALSE. Format sederhananya disajikan pada sintaks berikut: geom_smooth(method=&quot;auto&quot;, se=TRUE, fullrange=FALSE, level=0.95) Note: method: metode penghalusan yang digunakan. Nilai yang dapat dimasukkan adalah lm, glm, gam, loess, rlm. method=“loess”: merupakan nilai default pada fungsi dan menghasilkan metode penghalusan loess regression. method=“lm”: menghasilkan metode penghalusan regresi linier. Kita juga dapat melakukan spesifikasi terhadap fungsi persamaan regresi yang digunakan dengan menambahkan argumen formula=y~x…. se: nilai logis. Jika TRUE garis confidence interval akan ditampilkan sepanjang garis penghalusan. fullrange: nilai logis. Jika TRUE kecocokan mencakup seluruh plot. level: level confidence interal yang digunakan. Secara default bernilai 0.95. Berikut adalah contoh sintaks penerapan pada variabel gdpPercap dan lifeExp. Output yang dihasilkan disajikan pada Gambar 5.5: ggplot(gapminder, aes(gdpPercap,lifeExp))+ geom_point()+ # merubah sumbu x kedalam fungsi log scale_x_log10()+ # menambahkan smoothing method geom_smooth(method=&quot;lm&quot;, level=0.99) Gambar 5.5: Scatterplot lifeExp vs gdpPercap dengan garis penghalusan regresi linier 5.2 Box Plot dan Violin Plot Box plot merupakan visualisasi yang powerful dalam menggambarkan distribusi data, melihat adanya outlier, serta membandingkan distribusi antar data. Format visualisasi dapat dituliskan sebagai berikut: ggplot(data, aes(...))+ geom_boxplot(geom_boxplot(outlier.colour=&quot;black&quot;, outlier.shape=16, outlier.size=2, notch=FALSE)) Note: outlier.colour, outlier.shape, outlier.size: Warna, bentuk dan ukuran untuk titik-titik outlier. notch: nilai logis. Jika TRUE, buat notched box plot. Notch menunjukkan confidence interval di sekitar median yang biasanya didasarkan pada median \\(\\pm1,58\\cdot\\frac{\\left(IQR\\right)}{\\sqrt{\\left(n\\right)}}\\). Notch digunakan untuk membandingkan kelompok; jika takik dua kotak tidak tumpang tindih, ini adalah bukti kuat bahwa median berbeda. Berikut merupakan contoh visualisasi variabel lifeExp pada dataset gapminder. Output yang dihasilkan disajikan pada Gambar 5.6: ggplot(gapminder, aes(&quot;&quot;, lifeExp))+ geom_boxplot() Gambar 5.6: Box plot variabel lifeExp Kita dapat melakukan visualisasi bagi setiap kelompok data. Pada sintaks berikut visualisasi dilakukan untuk variabel lifeExp pada tiap continent. Pada contoh berikut akan ditampilkan cara menmabahkan titik rata-rata dan warna pada masing-masing grup. Output yang dihasilkan disajikan pada Gambar 5.7: ggplot(gapminder, aes(continent, lifeExp, color=continent))+ geom_boxplot()+ stat_summary(fun.y=mean, geom=&quot;point&quot;, shape=23, size=3, color=&quot;red&quot;) Gambar 5.7: Box plot variabel lifeExp pada tiap continent Misalkan kita ingin mengetahui perubahan distribusi dari variabel lifeExp pada masing-masing continet pada tahun 1952 dan 2007. Untuk melakukannya kita perlu melakukan subset pada dataset gapminder untuk memfilter data pada tahun 1952 dan 2007. Data selanjutnya dilakukan input kedalam fungsi ggplot(). Berikut adalah contoh sintaks yang digunakan. Output yang dihasilkan disajikan pada Gambar 5.8: gapminder %&gt;% filter(year==1952 | year==2007) %&gt;% ggplot(aes(continent, lifeExp, fill=factor(year)))+ geom_boxplot(notch=TRUE) Gambar 5.8: Box plot variabel lifeExp pada tiap continent (1952 dan 2007) Berdasarkan Gambar 5.8 terlihat bahwa usia harapan hidup pada tiap benua meningkat sejak tahun 1952 sampai 2007. Selain itu, peningkatan tersebut bersifat signifikan yang ditunjukkan dari tidak adanya notch yang saling overlap pada masing-masing benua. Untuk lebih detailnya kita akan coba melakukan visualisasi pada benua Asia untuk melihat perubahan variabel lifeExp. Berikut adalah sintaks yang digunakan dan output yang dihasilkan disajikan pada Gambar 5.9: gapminder %&gt;% filter(continent==&quot;Asia&quot;) %&gt;% ggplot(aes(factor(year), lifeExp))+ geom_boxplot() Gambar 5.9: Box plot variabel lifeExp Benua Asia Violin plot memiliki kesamaan dengan box plot. Perbedaanya terletak pada violin plot tidak hanya menyajikan data titik-titikkuartil data, namun violin plot juga menampilkan kernel probabilitas distibusi data. Fungsi yang digunakan untuk membuatnya adalah geom_violin(). Pada dataset gapminder kita ingin meisualisasikan distribusi lifeExp pada masing-masing continent. Berikut adalah contoh sintaks untuk membuat visualisasi dasar violin plot. Output yang dihasilkan disajikan pada Gambar 5.10: gapminder %&gt;% ggplot(aes(continent, lifeExp, fill=continent))+ # violin plot geom_violin() Gambar 5.10: Violin plot variabel lifeExp pada masing-masing benua Kita juga dapat melakukan modifikasi terhadap violin plot tersebut seperti penambahan titik kuartil, titik mean dan modifikasi terhadap warna tampilaknnya. COntoh sintaksnya dan output disajikan pada Gambar 5.11: gapminder %&gt;% ggplot(aes(continent, lifeExp, fill=continent))+ # violin plot geom_violin()+ # menambahkan boxplot dengan lebar 0.1 geom_boxplot(width=0.1, fill=&quot;white&quot;)+ # menambahkan titik mean stat_summary(fun.y=mean, geom=&quot;point&quot;, # ukuran dan jenis titik size=1, shape=23, # warna titik color=&quot;red&quot;, fill=&quot;white&quot;) Gambar 5.11: Violin plot variabel lifeExp pada masing-masing benua (2) 5.3 Bar Plot Pada ggplot2 bar plot dapat dibuat menggunakan fungsi geom_bar(). Untuk membuat bar plot, langkah pertama yang perlu dilakukan adalah membuat tabulasi data variabel terlebih dahulu. Berikut adalah contoh sintaks untuk membuat bar plot dari rata-rata lifeExp pada masing-masing continent. Output yang dihasilkan disajikan pada Gambar 5.12: gapminder %&gt;% # kelompokkan berdasarkan continet group_by(continent)%&gt;% # membuat ringkasan data summarize(mean_lifeExp=mean(lifeExp))%&gt;% # urutkan dari yang terbesar arrange(desc(mean_lifeExp))%&gt;% # plot ggplot(aes(continent, mean_lifeExp))+ # membuat bar plot berdasarkan nilai observasi geom_bar(stat=&quot;identity&quot;) Gambar 5.12: Bar plot rata-rata lifeExp masing-masing benua Kita juga dapat membuat bar plot dengan garis confidence interval. Untuk melakukannya kita perlu terlebih dahulu menghitung standard error dari data. Standard error selanjutnya digunakan untuk menghitung nilai atas dan bawah dari nilai rata-rata. Berikut adalah contoh visualisasi bar plot dengan confidence interval (Gambar 5.13): gapminder %&gt;% # kelompokkan berdasarkan continet group_by(continent)%&gt;% # membuat ringkasan data summarize(mean_lifeExp=mean(lifeExp), n=n(), sd=sd(lifeExp), se=sd/sqrt(n))%&gt;% # plot ggplot(aes(continent, mean_lifeExp))+ # membuat bar plot geom_bar(stat=&quot;identity&quot;, color=&quot;white&quot;)+ # menambahkan error bar geom_errorbar(aes(ymin=mean_lifeExp-se, ymax=mean_lifeExp+se), width=0.2) Gambar 5.13: Bar plot rata-rata lifeExp masing-masing benua dengan confidence interval Kita juga dapat melakukannya pada visualisasi data beberapa grup. Berikut adalah contoh sintaks dan output (Gambar 5.14) bar plot dengan beberapa grup: gapminder %&gt;% # filter data tahun 1952 dan 2007 filter(year==1952|year==2007)%&gt;% # Ubah year menjadi factor mutate(year=as.factor(year))%&gt;% # kelompokkan berdasarkan continet group_by(continent,year)%&gt;% # membuat ringkasan data summarize(mean_lifeExp=mean(lifeExp), n=n(), sd=sd(lifeExp), se=sd/sqrt(n))%&gt;% # plot ggplot(aes(continent, mean_lifeExp, fill=year))+ # membuat bar plot geom_bar(stat=&quot;identity&quot;, position=position_dodge())+ # menambahkan error bar geom_errorbar(aes(ymin=mean_lifeExp-se, ymax=mean_lifeExp+se), width=0.2, position=position_dodge(0.9)) Gambar 5.14: Bar plot rata-rata lifeExp masing-masing benua (1952 dan 2007) dengan confidence interval 5.4 Line Plot Line plot dapat digunakan untuk menunjukkan adanya perubahan pada selang waktu tertentu. Pada ggplot2, line plot dapat dibuat menggunakan fungsi geom_line(). Berikut adalah contoh sintaks dan grafik (Gambar 5.15) untuk membuat line plot: gapminder%&gt;% # kelompokkan data berdasarkan year dan continent group_by(year,continent)%&gt;% # ringkasan data summarize(mean_lifeExp=mean(lifeExp))%&gt;% # plot ggplot(aes(year, mean_lifeExp, linetype=continent))+ # membuat line plot geom_line()+ # menambahkan point geom_point() Gambar 5.15: Line plot lifeExp masing-masing benua Kita juga dapat menambahkan error bar pada line plot. Berikut adalah contoh sintak dan grafik (Gambar 5.16) yang dihasilkan: gapminder%&gt;% # filter benua asia filter(continent==&quot;Asia&quot;)%&gt;% # kelompokkan data berdasarkan year dan continent group_by(year)%&gt;% # ringkasan data summarize(mean_lifeExp=mean(lifeExp), sd=sd(lifeExp))%&gt;% # plot ggplot(aes(year, mean_lifeExp))+ # membuat line plot geom_line()+ # menambahkan point geom_point(size=2)+ # menambahkan error bar geom_errorbar(aes(ymin=mean_lifeExp-sd, ymax=mean_lifeExp+sd), width=0.2, color=&quot;red&quot;) Gambar 5.16: Histogram lifeExp 5.5 Pie Chart Pie chart pada ggplot2 dapat dibuat menggunakan fungsi geom_bar() dan coord_polar().Berikut adalah contoh sintaks yang digunakan dan output (Gambar 5.17) yang dihasilkan: total &lt;- sum(gapminder$pop) gapminder%&gt;% # kelompokkan berdasarkan continent group_by(continent)%&gt;% # ringkasan data summarize(pop=sum(as.numeric(pop)), percent=(pop/total)*100)%&gt;% ggplot(aes(x=&quot;&quot;, percent, fill=continent))+ geom_bar(stat=&quot;identity&quot;)+ coord_polar(&quot;y&quot;, start=0) Gambar 5.17: Pie chart pop 5.6 Histogram dan Desity Plot Histogram pada ggplot2 dapat dibuat dengan fungsi geom_histogram(). Berikut adalah sintaks untuk membuat hitogram pada variabel lifeExp. Output yang dihasilkan disajikan pada Gambar 5.18: gapminder %&gt;% ggplot(aes(lifeExp))+ geom_histogram() Gambar 5.18: Histogram lifeExp Kita dapat membuat grafik histogram berdasarkan grup data. Pada contoh sebelumnya dibuat histogram berdasarkan variabel continent. Berikut adalah sintaks dan output yang dihasilkan pada Gambar 5.19: gapminder %&gt;% ggplot(aes(lifeExp, fill=continent))+ geom_histogram(alpha=0.5, # atur posisi agar sesuai grup position=&quot;identity&quot;, color=&quot;black&quot;) Gambar 5.19: Histogram lifeExp berdasarkan benua Density plot dapat dibuat dengan menggunakan fungsi geom_density(). Berikut adalah contoh sintaks untuk membuat density plot variabel lifeExp. Output yang dihasilkan disajikan pada Gambar 5.20: gapminder %&gt;% ggplot(aes(lifeExp))+ geom_density() Gambar 5.20: Density plot lifeExp Kita juga dapat membuat grafik density berdasarkan grup data. Pada contoh sebelumnya dibuat density plot berdasarkan variabel continent. Berikut adalah sintaks dan output yang dihasilkan pada Gambar 5.21: gapminder %&gt;% ggplot(aes(lifeExp, fill=continent))+ geom_density(alpha=0.5, # atur posisi agar sesuai grup position=&quot;identity&quot;, color=&quot;black&quot;) Gambar 5.21: Density plot lifeExp berdasarkan benua Jika dinginkan kita juga dapat menambahkan density plot pada histogram. Pada Gambar 4.20 ditambahkan density plot sehingga dihasilkan output seperti Gambar 5.22. gapminder %&gt;% ggplot(aes(lifeExp))+ geom_histogram(aes(y=..density..), # spesifikasi warna bar color=&quot;black&quot;, fill=&quot;white&quot;)+ geom_density(fill=&quot;red&quot;, alpha=0.3) Gambar 5.22: histogram dan density plot lifeExp 5.7 QQ Plot QQ plot pada paket ggplot2 dapat dibuat dengan menggunakan fungsi stat_qq(). Berikut adalah contoh sintaks untuk melakukannya. Output yang dihasilkan disajikna pada Gambar 5.23. ggplot(gapminder, aes(sample=lifeExp))+ # qq plot stat_qq()+ # garis referensi stat_qq_line() Gambar 5.23: QQ plot variabel lifeExp 5.8 Dot Plot Dot plot dapat dibuat menggunakan fungsi geom_dotplot atau geom_jitter(). Perbedaan keduanya adalah geom_jitter() menambahkan noise pada plot sehingga mencegah terjadinya overplotting. Berikut adalah contoh sintaks untuk membuat dotplot pada multiple group dan output yang dihasilkan pada Gambar 5.24: gapminder %&gt;% filter(year==1952 | year==2007) %&gt;% ggplot(aes(continent, lifeExp, fill=factor(year)))+ geom_dotplot(binaxis=&quot;y&quot;, # spesifikasi posisi plot stackdir=&quot;center&quot;, position=position_dodge(0.8), size=0.1) ## Warning: Ignoring unknown parameters: size Gambar 5.24: Dot plot variabel lifeExp masing-masing benua (1952-2007) Kita juga dapat menambahkan plot dari dari plot yang sudah ada seperti box plot atau violin plot. Berikut adalah contoh sintaks dan output yang dihasilkan pada Gambar 5.25: gapminder %&gt;% filter(year==1952 | year==2007) %&gt;% ggplot(aes(continent, lifeExp, fill=factor(year)))+ # box plot dibawah geom_boxplot(position=position_dodge(0.8))+ # dot plot diatas geom_dotplot(binaxis=&quot;y&quot;, # spesifikasi posisi plot stackdir=&quot;center&quot;, position=position_dodge(0.8)) Gambar 5.25: Dot plot variabel lifeExp masing-masing benua (1952-2007) (2) 5.9 ECDF Plot Empirical Cumulative Density FUnction (ECDF) plot merupakan grafik yang digunakan untuk menggambarkan ditribusi suatu data. Dari grafik ini kita dapat mengetahui faraksi suatu data baik yang terendah maupun yang tertinggi. ECDF pada ggplot2 dapat dibuat dengan dua cara yaitu dengan geom_line() dan stat_ecdf(). Jika menggunakan fungsi geom_line() kita perlu membuat fraksi kumulatif dari variabel yang akan kita plotkan. Sedangkan dengan menggunakan stat_ecdf(), kita tidak perlu melakukannya karena fungsi tersebut akan secara otomatis memproses data kita. Berikut adalah sintaks dan output (Gambar 5.26) contoh ecdf: ggplot(gapminder, aes(lifeExp))+ stat_ecdf(geom=&quot;line&quot;) Gambar 5.26: ECDF plot variabel lifeExp 5.10 Parameter Grafik Pada bagian ini penulis akan menjelaskan bagaimana cara mengatur parameter grafik seperti judul grafik, legend, warna, tema, dll. Pengaturan parameter grafik pada ggplot2 sebenarnya jauh lebih sederhana dibandingkan dengan fungsi dasar visualisasi R. Selain itu, kita dapat membuat tampilan grafik kita jauh lebih menarik dengan membuat tema kustom pada grafik kita. 5.10.1 Merubah Judul Grafik, Keterangan Axis dan Legend Untuk merubah judul grafik dan keterangan axis kita dapat melakukannya melalui dua cara. Cara pertama adalah dengan memasukkan mengubahnya satu persatu menggunakan fungsi ggtitle() (judul grafik), xlab() (keterangan sumbu x), dan ylab() (keterangan pada sumbu y). Cara kedua adalah dengan menggunakan fungsi labs() dimana selain dapat mengubah judul grafik dan keterangan axis fungsi tersebut dapat juga digunakan untuk mengubah keterangan legend. Pada sintaks berikut penulis akan memberikan contoh bagaimana mengubah judul grafik dan keterangan axis menggunakan dua cara tersebut. Output yang dihasilkan disajikan pada Gambar 5.27. # Cara 1 ggplot(gapminder, aes(continent, gdpPercap, fill=continent))+ # membuat box plot geom_boxplot()+ # menambahkan judul ggtitle(&quot;GDP Per Capita Tiap Benua&quot;)+ # mengubah keterangan axis xlab(&quot;Benua&quot;)+ ylab(&quot;GDP Per Kapita&quot;) # cara 2 ggplot(gapminder, aes(continent, gdpPercap, fill=continent))+ # membuat box plot geom_boxplot()+ # kustomisasi judul dan keterangan axis labs(title=&quot;GDP Per Capita Tiap Benua&quot;, x=&quot;Benua&quot;, y=&quot;GDP Per Kapita&quot;) Gambar 5.27: Mengubah judul grafik dan keterangan axis Pada Gambar 5.27 kita belum mengubah keterangan legend. Berikut adalah sintaks untuk mengubah keterangan legend pada grafik tersebut beserta output yang disajikan pada Gambar 5.28. # cara 2 ggplot(gapminder, aes(continent, gdpPercap, # warna box berdasarkan benua fill=continent))+ # membuat box plot geom_boxplot()+ # kustomisasi judul dan keterangan axis labs(title=&quot;GDP Per Capita Tiap Benua&quot;, x=&quot;Benua&quot;, y=&quot;GDP Per Kapita&quot;, # mengubah keterangan legend fill=&quot;Benua&quot;) Gambar 5.28: Mengubah keterangan legend pada grafik Judul, keterangan axis, dan keterangan legend dapat dikustomisasi menggunakan fungsi theme() dan element_text(). Berikut adalah format yang digunakan: # Judul &lt;ggplot&gt; + theme(plot.title = element_text(family, face, colour, size)) # keterangan sumbu x &lt;ggplot&gt; + theme(axis.title.x = element_text(family, face, colour, size)) # keterangan sumbu y &lt;ggplot&gt; + theme(axis.title.y = element_text(family, face, colour, size)) # keterangan legend &lt;ggplot&gt; + theme(axis.title.y = element_text(family, face, colour, size)) Note: family: font family. face: tampilan font. Nilai yang dapat digunakan antara lain: “plain”, “italic”, “bold” dan “bold.italic”. colour: warna teks. size: ukuran teks Berikut adalah contoh penerapan fungsi tersebut pada grafik Gambar 5.28. Output yang dihasilkan disajikan pada Gambar 5.29. # cara 2 ggplot(gapminder, aes(continent, gdpPercap, # warna box berdasarkan benua fill=continent))+ # membuat box plot geom_boxplot()+ # kustomisasi judul dan keterangan axis labs(title=&quot;GDP Per Capita Tiap Benua&quot;, x=&quot;Benua&quot;, y=&quot;GDP Per Kapita&quot;, # mengubah keterangan legend fill=&quot;Benua&quot;)+ theme( plot.title = element_text(color=&quot;red&quot;, size=14, face=&quot;bold.italic&quot;), axis.title.x = element_text(color=&quot;blue&quot;, size=14, face=&quot;bold&quot;), axis.title.y = element_text(color=&quot;#993333&quot;, size=14, face=&quot;bold&quot;), legend.text = element_text(colour=&quot;blue&quot;, size=10, face=&quot;bold&quot;) ) Gambar 5.29: Kustomisasi judul grafik dan keterangan axis 5.10.2 Merubah Tampilan dan Posisi Legend Posisi legend dapat diubah dengan menambahkan argumen legend.position pada fungsi theme(). Posisi legend dapat diubah dengan memasukkan nilai berupa karakter seperti “left”,“top”, “right”, dan “bottom”. Selain itu, posisi legend dapat dispesifikasi menggunakan vektor numerik c(x,Y). Nilai x dan y berkisar antara 0 sampai 1. Nilai c(0,0) menandakan posisi legend pada bagian kiri bawah dan c(0,1) menyatakan kiri atas. Penggunaan karakter dan vektor numerik akan menghasilkan output posisi legend yang berbeda. Jika menggunakan karakter posisi legend akan diubah diluar bidang plot. Sedangkan vektor numerik akan mengubah posisi legend menjadi ada pada bidang plot. Untuk lebih memahaminya berikut disajikan dua buah gambar. Gambar 5.30 menyajikan pengaturan legend menggunakan karakter, sedangkan Gambar 5.31 menyajikan pengaturan legend menggunakan vektor numerik. # cara 2 ggplot(gapminder, aes(continent, gdpPercap, # warna box berdasarkan benua fill=continent))+ # membuat box plot geom_boxplot()+ # kustomisasi judul dan keterangan axis labs(title=&quot;GDP Per Capita Tiap Benua&quot;, x=&quot;Benua&quot;, y=&quot;GDP Per Kapita&quot;, # mengubah keterangan legend fill=&quot;Benua&quot;)+ theme(legend.position=&quot;top&quot;) Gambar 5.30: Kustomisasi posisi legend berdasarkan karakter # cara 2 ggplot(gapminder, aes(continent, gdpPercap, # warna box berdasarkan benua fill=continent))+ # membuat box plot geom_boxplot()+ # kustomisasi judul dan keterangan axis labs(title=&quot;GDP Per Capita Tiap Benua&quot;, x=&quot;Benua&quot;, y=&quot;GDP Per Kapita&quot;, # mengubah keterangan legend fill=&quot;Benua&quot;)+ theme(legend.position=c(0.9,0.75)) Gambar 5.31: Kustomisasi posisi legend berdasarkan vektor numerik Pada fungsi theme() kita juga dapat merubah backgroud dari legend box menggunakan argumen legend.bacground dan element_rect. Selain itu kita juga dapat mengubah orientasi dari legend yang semula vertikal menjadi horizontal dengan menambahkan argumen legend.box. Berikut adalah contoh sintaks penerapannya. Output yang dihasilkan disajikan pada Gambar 5.32. # cara 2 ggplot(gapminder, aes(continent, gdpPercap, # warna box berdasarkan benua fill=continent, # warna outline berdasarkan benua color=continent))+ # membuat box plot geom_boxplot()+ # kustomisasi judul dan keterangan axis labs(title=&quot;GDP Per Capita Tiap Benua&quot;, x=&quot;Benua&quot;, y=&quot;GDP Per Kapita&quot;, # mengubah keterangan legend fill=&quot;Benua (fill)&quot;, color=&quot;Benua (outline)&quot;)+ theme(legend.position=&quot;bottom&quot;, # mengubah tampilan legend box legend.background = element_rect(fill=&quot;lightblue&quot;, size=0.5, linetype=&quot;solid&quot;, colour =&quot;darkblue&quot;), # mengubah orientasi legend legend.box= &quot;horizontal&quot;) Gambar 5.32: Kustomisasi tampilan legend Kita dapat juga menghilangkan legend baik seluruh legend maupun legend spesifik. Pada Gambar 5.33 dan Gambar 5.34 disajikan contoh cara menghilangkan seluruh legend maupun sebagian legend. # Menghilangkan seluruh legend ggplot(gapminder, aes(continent, gdpPercap, # warna box berdasarkan benua fill=continent, # warna outline berdasarkan benua color=continent))+ # membuat box plot geom_boxplot()+ # kustomisasi judul dan keterangan axis labs(title=&quot;GDP Per Capita Tiap Benua&quot;, x=&quot;Benua&quot;, y=&quot;GDP Per Kapita&quot;, # mengubah keterangan legend fill=&quot;Benua&quot;)+ theme(legend.position=&quot;none&quot;) Gambar 5.33: Menghilangkan seluruh legend # Menghilangkan seluruh legend ggplot(gapminder, aes(continent, gdpPercap, # warna box berdasarkan benua fill=continent, # warna outline berdasarkan benua color=continent))+ # membuat box plot geom_boxplot()+ # kustomisasi judul dan keterangan axis labs(title=&quot;GDP Per Capita Tiap Benua&quot;, x=&quot;Benua&quot;, y=&quot;GDP Per Kapita&quot;, # mengubah keterangan legend fill=&quot;Benua (fill)&quot;, color=&quot;Benua (outline)&quot;)+ theme(legend.position=&quot;bottom&quot;, # mengubah tampilan legend box legend.background = element_rect(fill=&quot;lightblue&quot;, size=0.5, linetype=&quot;solid&quot;, colour =&quot;darkblue&quot;))+ # Menghilangkan legend Benua (outline) guides(color=FALSE) Gambar 5.34: Menghilangkan sebagian legend legend 5.10.3 Merubah Warana Pada Grafik Secara Otomatis dan Manual Kita dapat merubah warna grafik baik secara otomatis dan manual. Secara otomatis warna dapat diubah dengan memasukkan nama variabel kedalam argumen fill dan color. Namun, jika kita inginkan kita dapat memasukkan kode warna untuk memperoleh warna yang seragam pada seluruh kelompok data. Pada contoh sintaks berikut diberikan contoh bagaimana merubah warna pada seluruh grup data dengan satu warna yang seragam. Output yang dihasilkan disajikan pada Gambar 5.35: ggplot(gapminder, aes(continent, lifeExp))+ # spesifikasi warna tunggal geom_boxplot(color=&quot;darkred&quot;,fill=&quot;#A4A4A4&quot;) Gambar 5.35: Merubah warna grup berdasarkan satu warna Selain itu, kita dapat mengubah warna berdasarkan grup baik secara otomatis maupun manual. Berikut adalah contoh sintaks warna berdasarkan grup secara otomatis. Output yang dihasilkan disajikan pada Gambar 5.36. ggplot(gapminder, aes(continent, gdpPercap, # warna berdasarkan grup fill=continent))+ geom_boxplot() Gambar 5.36: Merubah warna grup secara otomatis Kita dapat mengatur pecahayaan (l) dan intensitas warna (c) dari warna yang kita tampilkan menggunakan fungsi scale_fill_hue(). Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.37. ggplot(gapminder, aes(continent, gdpPercap, # warna berdasarkan grup fill=continent))+ geom_boxplot()+ # merubah l dan c scale_color_hue(l=40, c=35) Gambar 5.37: Merubah pencahayaan dan intensitas warna Jika kita tidak menginginkan warna yang secara otomatis ditampilkan oleh ggplot2, kita dapat mengubahnya secara manual menggunakan fungsi scale_fill_manual() (untuk box plot, bar plot, dll) dan scale_color_manual() (untuk line plot, dot plot dan scatterplot). Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.38. ggplot(gapminder, aes(continent, gdpPercap, # warna berdasarkan grup fill=continent))+ geom_boxplot()+ # merubah warna secara manual scale_fill_manual(values=c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;, &quot;#B47846&quot;,&quot;#B4464B&quot;)) Gambar 5.38: Merubah warna secara manual JIka kita tidak hafal dengan kode hexadesimal warna tersebut kita dapat juga menggunakan palet warna. Contoh palet warna yang akan digunakan adalah dari library RColorBrewer. Berikut adalah contoh sintaks untuk menginstal dan memuat paket tersebut: # memasang paket # install.packages(&quot;RColorBrewer&quot;) # memuat paket library(RColorBrewer) Pada sintak berikut penulis akan menampilkan seluruh palet warna pada pekt tersebut. Output yang dihasilkan disajikan pada Gambar 5.39. display.brewer.all() Gambar 5.39: Palet warna RColorBrewer Pada Gambar 5.39 terdapat 3 jenis warna antara lain: Sequential palettes, digunakan untuk menunjukkan urutan dari rendah ke tinggi atau gradien. Nama palet yang ada antara lain: Blues, BuGn, BuPu, GnBu, Greens, Greys, Oranges, OrRd, PuBu, PuBuGn, PuRd, Purples, RdPu, Reds, YlGn, YlGnBu YlOrBr,dan YlOrRd. Diverging palettes, digunakan untuk menunjukkan perubahan pada data yang memiliki nilai positif dan negatif. Palet yang tersedia antara lain: BrBG, PiYG, PRGn, PuOr, RdBu, RdGy, RdYlBu, RdYlGn, dan Spectral. Qualitative palettes, digunakan untuk merepresentasikan variabel nominal atau kategori karena tidak menunjukkan besaran atau perbedaan nilai antar grup. Palete yang tersedia antara lain: Accent, Dark2, Paired, Pastel1, Pastel2, Set1, Set2, dan Set3. Pada contoh sintaks berikut disajikan contoh penerapan dan output yang dihasilkan pada Gambar 5.40. ggplot(gapminder, aes(continent, gdpPercap, # warna berdasarkan grup fill=continent))+ geom_boxplot()+ # merubah warna menggunakan palet scale_color_brewer(palette=&quot;Dark2&quot;) Gambar 5.40: Merubah warna menggunakan palet Jika kita tidak menginginkan warna-warna terang, kita dapat menggunakan fungsi scale_color_grey() (untuk line plot, dot plot, dan scatterplot) dan scale_fill_grey() (untuk bar plot, histogram, box plot, dll). Funsi tersebut akan memberikan warna palet gray pada plot. Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.41. ggplot(gapminder, aes(continent, gdpPercap, # warna berdasarkan grup fill=continent))+ geom_boxplot()+ # merubah warna menggunakan palet scale_fill_grey() Gambar 5.41: Merubah warna menggunakan palet gray 5.10.4 Kustomisasi Titik Untuk mengubah jenis titik pada scatterplot, outlier pada box plot, dan dot plot, kita dapat menambahkan argumen shape pada fungsi geometrinya. Nilai yang mungkin dimasukkan berupa nilai diskrit yang berkisar antara 0 sampai 25. Selain itu, ukuran dari titik dapat diinput dengan menambahkan argumen size. Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.42. ggplot(gapminder, aes(gdpPercap, lifeExp))+ # spesifikasi jenis, ukuran dan warna titik geom_point(shape=4, size=2, color=&quot;blue&quot;) Gambar 5.42: Kustomisasi jenis, ukuran dan warna titik Untuk data dengan multiple group, kita dapat mengubah jenis, ukuran dan warna secara otomatis dengan memasukkan nama variabel kedalam argumen shape, size dan color. Sedangkan secara manual kita dapat menambahkan fungsi scale_shape_manual() (jenis titik), scale_color_manual() (warna titik), dan scale_size_manual() (ukuran titik). Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.43 dan Gambar 5.44. # cara otomatis ggplot(gapminder, aes(gdpPercap, lifeExp, # spesifikasi jenis, ukuran dan warna shape=continent, color=continent, size=pop))+ geom_point() Gambar 5.43: Kustomisasi jenis, ukuran dan warna titik untuk multiple group secara otomatis # cara manual ggplot(gapminder, aes(gdpPercap, lifeExp, # spesifikasi jenis, ukuran dan warna shape=continent, color=continent, size=pop))+ geom_point()+ scale_shape_manual(values=c(1:5))+ scale_color_manual(values=c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;, &quot;#B47846&quot;,&quot;#B4464B&quot;)) Gambar 5.44: Kustomisasi jenis, ukuran dan warna titik untuk multiple group secara manual 5.10.5 Kustomisasi Jenis Garis Jenis, warna dan ukuran garis dapat diatur dengan menambahkan argumen linetype, size dan color. Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.45. gapminder%&gt;% filter(continent==&quot;Asia&quot;)%&gt;% group_by(year)%&gt;% summarize(mean_pop=mean(pop))%&gt;% # plot ggplot(aes(year, mean_pop))+ geom_line(linetype=&quot;dashed&quot;, color=&quot;blue&quot;, size=1)+ geom_point(shape=1, color=&quot;red&quot;) Gambar 5.45: Kustomisasi jenis, ukuran dan warna garis Untuk data dengan multiple group, kita dapat mengubah jenis garis, warna dan ukuran secara manual maupun secara otomatis. Secara otomatis kita dapat menginputkan nama variabel kedalam argumen linetype, size dan color. Secara manual, kita dapat mengubah jenis, warna dan ukuran menggunakan fungsi scale_linetype_manual() (jenis garis), scale_color_manual() (warna garis), dan scale_size_manual() (ukuran garis). Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.46 dan Gambar 5.47. # cara otomatis gapminder%&gt;% filter(continent %in% c(&quot;Asia&quot;,&quot;Africa&quot;))%&gt;% group_by(year, continent)%&gt;% summarize(mean_pop=mean(pop))%&gt;% # plot ggplot(aes(year, mean_pop, linetype=continent, color=continent))+ geom_line()+ geom_point(shape=1, color=&quot;red&quot;) Gambar 5.46: Kustomisasi jenis, ukuran dan warna garis untuk multiple group secara otomatis # cara manual gapminder%&gt;% filter(continent %in% c(&quot;Asia&quot;,&quot;Africa&quot;))%&gt;% group_by(year, continent)%&gt;% summarize(mean_pop=mean(pop))%&gt;% # plot ggplot(aes(year, mean_pop, linetype=continent, color=continent))+ geom_line()+ geom_point(shape=1, color=&quot;red&quot;)+ scale_linetype_manual(values=c(&quot;dotted&quot;, &quot;twodash&quot;))+ scale_color_manual(values=c(&quot;red&quot;,&quot;blue&quot;)) Gambar 5.47: Kustomisasi jenis, ukuran dan warna garis untuk multiple group secara manual 5.10.6 Menambahkan Label Pada Titik Observasi dan Bidang Plot Pada artikel ini penulis akan menjelaskan bagaimana kita dapat menambahkan teks pada plot. Fungsi-fungsi yang dapat digunakan antara lain: geom_text(): menambahkan teks secara langsung pada plot. geom_label(): menambahkan teks dengan kotak disekelilingnya. annotate(): menambahkan teks tertentu pada bagian tertentu bidang plot. annotation_custom(): menambahkan anotasi statik yang sama pada setiap panel. Misal kita akan membuat plot antara variabel pop vs gdpPercap seperti yang ditunjukkan pada Gambar 5.48 berikut: ggplot(gapminder, aes(gdpPercap, pop))+ geom_point() Gambar 5.48: Scatterplot variabel pop vs gdpPercap Misalkan kita ingin menandai negara yang memiliki gdpPercap &gt; 50000. Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.49. ggplot(gapminder, aes(gdpPercap, pop))+ geom_point(shape=1)+ geom_label( # subset data sesua kriteria data=subset(gapminder,gdpPercap&gt;50000), # label berdasarkan kriteria aes(label=country), # ukuran teks size = 3) Gambar 5.49: Scatterplot variabel pop vs gdpPercap dengan label Selain teks yang menunjukkan observasi, kita dapat menambahkan anotasi pada grafik. Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.50. ggplot(gapminder, aes(gdpPercap, pop))+ geom_point(shape=1)+ # menambahkan label sesuai kriteria data geom_label( # subset data sesua kriteria data=subset(gapminder,gdpPercap&gt;50000), # label berdasarkan kriteria aes(label=country), # ukuran teks size = 3)+ annotate(geom=&quot;text&quot;, x=90000, y=2e+08, label=&quot;outlier&quot;, color=&quot;red&quot;) Gambar 5.50: Scatterplot variabel pop vs gdpPercap dengan label dan notasi Kita dapat pula menambahkan teks statik yang sama pada setiap panel. Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.51. library(grid) # membuat teks d &lt;- grob &lt;- grobTree(textGrob(&quot;Scatter plot&quot;, x=0.1, y=0.95, hjust=0, gp=gpar(col=&quot;red&quot;, fontsize=13, fontface=&quot;italic&quot;))) # plot ggplot(gapminder, aes(gdpPercap, pop))+ geom_point(shape=1)+ # menambahkan anotasi annotation_custom(d)+ # membagi plot menjadi beberapa panel facet_wrap(~continent, scales=&quot;free&quot;) Gambar 5.51: Scatterplot variabel pop vs gdpPercap dengan label dan notasi pada tiap panel 5.10.7 Kustomisasi Tema Pada Plot Kita dapat melakukan kustomisasi tema plot untuk membuat tampilan plot kita lebih menarik. Pada bagian ini penulis akan membahas tema yang dapat digunakan serta cara untuk melakukan edit terhadap tema yang telah ada sebelumnya. Tema-tema yang telah terpasang secara defautl pada paket ggplot2 antara lain: theme_gray: backround dengan warna abu-abu dengan garis grid putih. theme_bw: background putih dan garis grid berwarna abu-abu. theme_linedraw: garis hitam di sekeliling bidang plot. theme_light: garis grid dan axis berwarna abu-abu terang. theme_minimal: tidak memiliki frame disekeliling bidang plot. theme_classic: tidak ada garis grid dan axis. theme_void: tema kosong theme_dark: background gelap. Pada contoh berikut disajikan sebagian contoh penerapan tema pada plot. Output yang dihasilkan pada Gambar 5.52. ggplot(gapminder, aes(gdpPercap, lifeExp))+ geom_point()+ theme_bw() Gambar 5.52: Scatterplot dengan tema black and white Kita juga dapat menggunakan tema kustom yang terdapat pada library ggthemes. Berikut adalah sintaks yang digunakan untuk menginstall dan memuat paket tersebut: # Memasang paket install.packages(&quot;ggthemes&quot;) # memuat paket library(ggthemes) ## Warning: package &#39;ggthemes&#39; was built under R version ## 3.5.3 tema-tema yang tersedia pada paket tersebut antara lain: theme_tufte: tema minimalis. theme_economist: tema yang digunakan pada majalah Economist. theme_stata: tema yang digunakan pada visualisasi progra stata. theme_wsj: tema yang digunakan pada Wall Street Journal. theme_cal: tema yang digunakan pada LibreOffice Calc dan Google Docs. theme_hc: tema yang didasarkan pada Highcharts JS. Pada contoh berikut disajikan sebagian contoh penerapan tema pada plot. Output yang dihasilkan pada Gambar 5.53. ggplot(gapminder, aes(gdpPercap, lifeExp, color=continent))+ geom_point()+ theme_wsj() Gambar 5.53: Scatterplot dengan tema Wall Street Journal Kita dapat juga membuat tema kustom berdasarkan tema yang telah ada. Untuk melakukannya kita hanya perlu merubah sejumlah argument default yang ada pada fungsi tema dan menamai tema sesuai dengan yang kita inginkan menggunakan user define function. Berikut adalah contoh argumen yang dapat diubah pada theme_wsj. theme_wsj ## function (base_size = 12, color = &quot;brown&quot;, base_family = &quot;sans&quot;, ## title_family = &quot;mono&quot;) ## { ## colorhex &lt;- ggthemes::ggthemes_data$wsj$bg[color] ## theme_foundation(base_size = base_size, base_family = base_family) + ## theme(line = element_line(linetype = 1, colour = &quot;black&quot;), ## rect = element_rect(fill = colorhex, linetype = 0, ## colour = NA), text = element_text(colour = &quot;black&quot;), ## title = element_text(family = title_family, size = rel(2)), ## axis.title = element_blank(), axis.text = element_text(face = &quot;bold&quot;, ## size = rel(1)), axis.text.x = element_text(colour = NULL), ## axis.text.y = element_text(colour = NULL), axis.ticks = element_line(colour = NULL), ## axis.ticks.y = element_blank(), axis.ticks.x = element_line(colour = NULL), ## axis.line = element_line(), axis.line.y = element_blank(), ## legend.background = element_rect(), legend.position = &quot;top&quot;, ## legend.direction = &quot;horizontal&quot;, legend.box = &quot;vertical&quot;, ## panel.grid = element_line(colour = NULL, linetype = 3), ## panel.grid.major = element_line(colour = &quot;black&quot;), ## panel.grid.major.x = element_blank(), panel.grid.minor = element_blank(), ## plot.title = element_text(hjust = 0, face = &quot;bold&quot;), ## plot.margin = unit(c(1, 1, 1, 1), &quot;lines&quot;), strip.background = element_rect()) ## } ## &lt;bytecode: 0x0000000018e5f998&gt; ## &lt;environment: namespace:ggthemes&gt; Berdasarkan output yang disajikan kita dapat merubah sejumlah argumen seperti base size, color, base_family, dll. 5.10.8 Penskalaan dan Transformasi Axis Pada bagian ini penulis akan menjelaskan bagaimana cara melakukan modifikasi terhadap sumbu x dan y seperti menetapkan limit nilai maksimum dan minimum axis serta melakukan transformasi pada tiap axis. Untuk mengatur rentang nilai axis, kita dapat melakukannya dengan fungsi sebagai berikut: xlim() dan ylim(): mengatur limit aksis sumbu x dan y. expand_limits(): mengatur limit sumbu x dan y sekaligus dapat mengatur intercept kedua sumbu tersebut. scale_x_continous() dan scale_y_continous(): megatur limit axis termasuk axis tick dan label. Pada contoh berikut akan disajikan cara mengatur limit axis dengan menggunakan xlim() dan ylim() serta menggunakan expand_limits(). Output yang dihasilkan disajikan pada Gambar 5.54. gapminder%&gt;% filter(continent==&quot;Europe&quot;)%&gt;% ggplot(aes(gdpPercap, lifeExp))+ geom_point()+ theme_wsj(base_size=7)+ labs(title=&quot;GDP per Capita vs Life Expectancy&quot;, y=&quot;Life Expectancy&quot;, x=&quot;GDP per Capita (US Dollar)&quot;)+ # mengatur limit axis expand_limits(x=c(0, 55000), y=c(0, 90)) # atau gapminder%&gt;% filter(continent==&quot;Europe&quot;)%&gt;% ggplot(aes(gdpPercap, lifeExp))+ geom_point()+ theme_wsj(base_size=7)+ labs(title=&quot;GDP per Capita vs Life Expectancy&quot;, y=&quot;Life Expectancy&quot;, x=&quot;GDP per Capita (US Dollar)&quot;)+ # mengatur limit axis xlim(0,55000)+ ylim(0,90) Gambar 5.54: Scatterplot dengan axis limits Kita juga dapat menggunakan fungsi scale_x_continuous() dan scale_y_continuous() untuk mengatur limit axis ,axis tick dan label. Format yang digunakan adalah sebagai berikut: scale_x_continuous(name, breaks, labels, limits, trans) scale_y_continuous(name, breaks, labels, limits, trans) Note: name: label axis sumbu x dan y. breaks: untuk mengontrol jeda dalam panduan (axis tick, garis grid, …). Di antara nilai-nilai yang mungkin, adalah sebagai berikut: NULL: menyembunyikan seluruh breaks. waiver(): komputasi break default. vektor numerik atau karakter untuk menspesifikasikan break yang akan ditampilkan. labels: label axis. Nilai yang dapat dimasukkan antara lain; NULL: tanpa label. waiver(): label default. vektor karakter yang digunakan untuk spesifikasi label break. limits: vektor numerik untuk spesifikasi limit sumbu x dan y. trans: transformasi axis. Nilai yang dapat digunakan adalah “log2”, “log10”, dll. Pada contoh berikut disajikan contoh mengatur limit axis dan label axis menggunakan fungsi scale_x_continous() dan scale_y_continous(). Grafik yang dihasilkan akan tampak seperti Gambar 5.55. # atau gapminder%&gt;% filter(continent==&quot;Asia&quot;)%&gt;% ggplot(aes(gdpPercap, lifeExp))+ geom_point()+ theme_wsj(base_size=7)+ ggtitle(&quot;GDP per Capita vs Life Expectancy&quot;)+ # spesifikasi limit dan label axis scale_x_continuous(name=&quot;GDP per Capita&quot;, limits=c(0, 125000))+ scale_y_continuous(name=&quot;Life Expectancy&quot;, limits=c(0,100)) Gambar 5.55: Scatterplot dengan axis limits (2) Tranformasi axis dapat dilakukan dengan fungsi bawaan dari ggplot2. Fungsi transformasi bawaan berupa transformasi log dan sqrt. Berikut adalah fungsi bawaan untuk transformasi tersebut: scale_x_log10() dan scale_y_log10(): transformasi log basis 10. scale_x_sqrt() dan scale_y_sqrt(): transformasi akar kuadrat. scale_x_reverse() dan scale_x_reverse(): membalikkan koordinat. coord_trans(x=“log10”, y=“log10”): memungkinkan transformasi untuk kedua axis sesuai fungsi yang diinputkan pada sumbu x dan sumbu y seperti “log2”, “log10”, “sqrt”, dll. scale_x_continuous(trans=“log2”) dan scale_y_continuous(trans=“log2”): nilai lain yang dapat diinputkan adalah “log10”. Pada contoh berikut disajikan contoh transformasi sumbu x menggunakan fungsi scale_x_log10(). Grafik yang dihasilkan akan tampak seperti Gambar 5.56. # atau gapminder%&gt;% filter(continent==&quot;Europe&quot;)%&gt;% ggplot(aes(gdpPercap, lifeExp))+ geom_point()+ theme_wsj(base_size=7)+ labs(title=&quot;log(GDP per Capita) vs Life Expectancy&quot;, y=&quot;Life Expectancy&quot;, x=&quot;GDP per Capita (US Dollar)&quot;)+ # transformasi sumbu x scale_x_log10() Gambar 5.56: Scatterplot dengan transformasi axis Tick mark pada axis juga dapat kita atur menggunakan fungsi scale_x_continous() dan scale_y_continous(). Untuk mengubah format dan label tick mark kita perlu menginstall dan memuat library scales yang berfungsi untuk mengakses fungsi pada argumen break. Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.57. # memasang paket # install.packages(&quot;scales&quot;) # memuat paket library(scales) ## Warning: package &#39;scales&#39; was built under R version ## 3.5.3 # plot ggplot(gapminder, aes(gdpPercap, lifeExp))+ geom_point()+ theme_bw()+ # kustomisasi tick mark sumbu y scale_y_continuous(trans= log2_trans(), breaks=trans_breaks(&quot;log2&quot;, function(x) 2^x), labels= trans_format(&quot;log2&quot;, math_format(2^.x)))+ # kustomisasi sumbu x scale_x_continuous(labels = dollar) Gambar 5.57: Scatterplot dengan transformasi tick mark axis 5.10.9 Kustomisasi Tick Mark Axis Pada bagian ini pembaca akan mempelajari bagaimana melakukan kustomisasi tampilan tick mark. Selain itu kita juga akan belajar bagaimana melakukan pengaturan pada garis axis. Warna, ukuran font, dan tampilan font (font style) pada tick mark dapat diubah menggunakan fungsi theme() dan element_text(). Format yang digunakan adalah sebagai berikut: # x axis tick mark labels &lt;plot&gt; + theme(axis.text.x= element_text(family, face, colour, size, angle)) # y axis tick mark labels &lt;plot&gt; + theme(axis.text.y = element_text(family, face, colour, size, angle)) Note: family: font family, seperti: “sans”,“times new roman”, dll. face: font face, nilai yang mungkin adalah “plain”, “italic”, “bold” dan “bold.italic”. color: warna teks. size: ukuran teks dalam satuan pts. angle: sudut kemiringan teks berkisar antara 0 sampai 360. Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.58. ggplot(gapminder, aes(continent, gdpPercap, fill=continent))+ geom_boxplot()+ theme_economist()+ scale_fill_economist()+ # kustomisasi tick mark theme(axis.text.x = element_text(face=&quot;bold&quot;, color=&quot;#993333&quot;, size=10, angle=30), axis.text.y = element_text(face=&quot;bold&quot;, color=&quot;#993333&quot;, size=10, angle=30)) Gambar 5.58: Mengubah tampilan dari tick mark Untuk menonaktifkan tick mark pada plot kita dapat menggunakan fungsi element_blank(). Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.59. ggplot(gapminder, aes(continent, gdpPercap, fill=continent))+ geom_boxplot()+ theme_stata()+ scale_fill_stata()+ # menyembunyikan tick mark dan tick mark label theme(axis.text.x=element_blank(), axis.text.y=element_blank(), axis.ticks=element_blank()) Gambar 5.59: Menyembunyikan tampilan dari tick mark Kita dapat melakukan pengaturan terhadap garis axis menggunakan argumen axis.lines dan fungsi element_line. Berikut adalah format yang digunakan: &lt;plot&gt; + theme(axis.line = element_line(color,size, linetype, lineend, color)) Note: color: warna garis. size: ukuran garis. linetype: jenis garis. lineend: akhir dari garis. Nilai yang dapat dimasukkan antara lain: “round”, “butt” atau “square”. Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.60. ggplot(gapminder, aes(continent, gdpPercap, fill=continent))+ geom_boxplot()+ theme_wsj()+ scale_fill_wsj()+ # kustomisasi garis axis theme(axis.line = element_line(colour = &quot;darkblue&quot;, size = 1, linetype = &quot;solid&quot;)) Gambar 5.60: Kustomisasi tampilan dari garis axis Kita dapat mengatur tick pada axis baik yang memiliki skala diskrit maupun kontinyu. Fungsi yang digunakan adalah scale_x_continous() dan scale_y_continous() untuk tick dengan nilai kontinyu dan scale_x_discrete() dan scale_y_discrete(). Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.61. ggplot(gapminder, aes(continent, lifeExp, fill=continent))+ geom_boxplot()+ theme_gdocs()+ scale_fill_gdocs()+ # kustomisasi tick mark scale_y_continuous( # nilai dari 0 sampai 100 tiap 10 tick breaks=seq(0,100,10)) Gambar 5.61: Kustomisasi tick mark 5.10.10 Menambahkan Garis Lurus Pada Plot Fungsi yang dapat digunakan untuk menambahkan garis lurus antara lain: geom_hline(): menambahkan garis horizontal. geom_abline(): menambahkan garis regresi. geom_vline(): menambahkan garis vertikal. geom_segment(): menambahkan garis segmen. Format yang digunakan untuk fungsi geom_hline() dan geom_vline() adalah sebagai berikut: geom_hline(yintercept, linetype, color, size) geom_vline(xintercept, linetype, color, size) Berikut adalah contoh penerapan kedua fungsi tersebut yang disajikan pada Gambar 5.62 dan Gambar 5.63: ggplot(gapminder, aes(lifeExp, fill=..count..))+ geom_histogram()+ theme_calc()+ # menambahkan garis vertikal geom_vline(xintercept=mean(gapminder$lifeExp), linetype=&quot;twodash&quot;, color=&quot;red&quot;, size=1.5) Gambar 5.62: Penerapan vline ggplot(gapminder, aes(continent, lifeExp, fill=continent))+ geom_boxplot()+ theme_calc()+ scale_fill_calc()+ # menambahkan garis horizontal geom_hline(yintercept=mean(gapminder$lifeExp), linetype=&quot;twodash&quot;, color=&quot;red&quot;, size=1.5) Gambar 5.63: Penerapan hline Selain menggunakan fungsi geom_smooth(), garis regresi dapat ditambahkan melalui fungsi `geom_abline(). Format yang digunakan adalah sebagai berikut: geom_abline(intercept, slope, linetype, color, size) Untuk membuat garis regresi kita perlu membuat model regresi terlebih dahulu menggunakn fungsi lm(). Berikut adalah contoh model yang dibuat beserta koefisien regresinya. # membuat model regresi mod &lt;- lm(lifeExp~gdpPercap, data=gapminder) # print model mod ## ## Call: ## lm(formula = lifeExp ~ gdpPercap, data = gapminder) ## ## Coefficients: ## (Intercept) gdpPercap ## 5.40e+01 7.65e-04 # koefisien regresi model coef &lt;- coefficients(mod) # print koefisien coef ## (Intercept) gdpPercap ## 5.396e+01 7.649e-04 Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.64 untuk membuat plot regresi linier. ggplot(gapminder, aes(gdpPercap, lifeExp))+ geom_point(shape=1, color=&quot;grey&quot;)+ theme_stata()+ # menambahkan garis regresi geom_abline(intercept=5.395556e+01, slope=7.648826e-04, linetype=&quot;twodash&quot;, color=&quot;red&quot;, size=1) Gambar 5.64: Penerapan abline Kita dapat menambahkan garis segment untuk menunjukkan sebuah observasi. Format yang digunakan adalah sebagai berikut: geom_segment(aes(x, y, xend, yend)) Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.65 untuk membuat garis segmen. library(grid) ggplot(gapminder, aes(gdpPercap, lifeExp))+ geom_point(shape=1, color=&quot;grey&quot;)+ theme_stata()+ # menambahkan tanda panah geom_segment(x=70000, y=80, xend=60000, yend=70, arrow=arrow(length=unit(0.1, &quot;inches&quot;)), linetype=&quot;twodash&quot;, color=&quot;red&quot;, size=1) Gambar 5.65: Penerapan garis segmen 5.10.11 Melakukan Rotasi Pada Grafik Rotasi grafik atau pembalikan axis dapat dilakukan menggunakan fungsi berikut: coord_flip(): untuk membuat plot horizontal.Rotasi axis sehingga sumbu x dapat menjadi sumbu y dan sebaliknya. scale_x_reverse() dan scale_x_reverse(): pembalikan skala pada axis. Misalkan kita ingin membuat plot horizontal pada box plot sehingga mempermudah kita dalam melakukan perbandingan terhadap masing-masing grup. Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.66. ggplot(gapminder, aes(continent, lifeExp, fill=continent))+ geom_boxplot()+ theme_economist()+ scale_fill_economist()+ # rotasi axis coord_flip() Gambar 5.66: Rotasi axis Kita dapat juga melakukan pembalikan skala pada axis sehingga skala yang semula berawal dari min ke max menjadi sebaliknya. Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.67. ggplot(gapminder, aes(lifeExp, fill=..count..))+ geom_histogram()+ theme_wsj()+ # pembalikan sumbu y scale_y_reverse() Gambar 5.67: Pembalikan sumbu y 5.10.12 Facet Facet digunakan untuk membagi plot menjadi panel matriks. Setiap panel menunjukkan setiap kelompok data. Fungsi facet yang dapat digunakan antara lain: facet_grid() facet_wrap() Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.68 dan Gambar 5.69 untuk membuat facet pada satu variabel. ggplot(gapminder, aes(lifeExp, fill=..count..))+ geom_histogram()+ theme_gdocs()+ facet_grid(.~continent) Gambar 5.68: Facet horizontal satu variabel ggplot(gapminder, aes(lifeExp, fill=..count..))+ geom_histogram()+ theme_gdocs()+ facet_grid(continent~.) Gambar 5.69: Facet vertikal satu variabel Kita dapat pula melakukan facet terhadap dua buah variabel.Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.70 untuk membuat facet pada dua variabel. gapminder%&gt;% filter(year==1952|year==2007, continent %in% c(&quot;Asia&quot;,&quot;Americas&quot;))%&gt;% ggplot(aes(continent, lifeExp, fill=factor(year)))+ geom_boxplot()+ theme_stata()+ scale_fill_stata()+ facet_grid(continent~factor(year)) Gambar 5.70: Facet dua variabel Kita dapat mengatur skala dari axis menggunakan argument sebagai berikut: free: skala akan disesuaikan berdasarkan pada setiap axis. free_x: skala pada sumbu x akan dibiarkan menyesuaikan secara bebas. free_y: skala pada sumbu y akan dibiarkan menyesuaikan secara bebas. fixed (default): skala axis diseragamkan pada seluruh panel. Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Gambar 5.71 untuk membuat facet pada dua variabel dengan skala bebas pada sumbu y. gapminder%&gt;% filter(year==1952|year==2007, continent %in% c(&quot;Asia&quot;,&quot;Americas&quot;))%&gt;% ggplot(aes(continent, lifeExp, fill=factor(year)))+ geom_boxplot()+ theme_stata()+ scale_fill_stata()+ facet_grid(continent~factor(year), scales=&quot;free_y&quot;) Gambar 5.71: Facet dua variabel dengan skala bebas pada sumbu y 5.11 Referensi Wickham, H. Grolemund G. 2016. R For Data Science: Import, Tidy, Transform, Visualize, And Model Data. O’Reilly Media, Inc. Peng, R.D. 2015. Exploratory Data Analysis with R. Leanpub book. GGPLOT2 Documentation. https://ggplot2.tidyverse.org/ STHDA. ggplot2 - Essentials. &lt;www.sthda.com/english/wiki/ggplot2-essentials&gt; "],
["references.html", "References", " References "]
]
